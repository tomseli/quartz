
quartz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080080f4  080080f4  000180f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081ec  080081ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081f4  080081f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080081fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  20000074  08008270  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b40  08008270  00021b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e122  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c0f  00000000  00000000  0003e1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00041dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f8  00000000  00000000  00043748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026aea  00000000  00000000  00044f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9b2  00000000  00000000  0006ba2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f27ba  00000000  00000000  000883dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ab96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f70  00000000  00000000  0017abe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080dc 	.word	0x080080dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080080dc 	.word	0x080080dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <UART_char>:
/*
 * @brief print any char to UART
 * @param char to print
 */
void UART_char(unsigned char c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 10);
 800057e:	1df9      	adds	r1, r7, #7
 8000580:	230a      	movs	r3, #10
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <UART_char+0x20>)
 8000586:	f003 fea7 	bl	80042d8 <HAL_UART_Transmit>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000013c 	.word	0x2000013c

08000598 <UART_int>:
/*
 * @brief print any int to UART
 * @param int to print
 */
void UART_int(unsigned int value)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	char text[8];

	HAL_UART_Transmit(&huart2, (uint8_t*) text, sprintf(text, "%d", value), 100);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4908      	ldr	r1, [pc, #32]	; (80005c8 <UART_int+0x30>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f007 f937 	bl	800781c <siprintf>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	f107 0108 	add.w	r1, r7, #8
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <UART_int+0x34>)
 80005ba:	f003 fe8d 	bl	80042d8 <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	080080f4 	.word	0x080080f4
 80005cc:	2000013c 	.word	0x2000013c

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fc50 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f832 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f954 	bl	8000888 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 f934 	bl	800084c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f902 	bl	80007ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005e8:	f000 f87c 	bl	80006e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Start ADC in DMA mode
  HAL_ADC_Start_DMA(&hadc1, adc_values, 3);
 80005ec:	2203      	movs	r2, #3
 80005ee:	490c      	ldr	r1, [pc, #48]	; (8000620 <main+0x50>)
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <main+0x54>)
 80005f2:	f000 ff91 	bl	8001518 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f6:	f004 fb51 	bl	8004c9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01_ID */
  Task01_IDHandle = osThreadNew(Task01, NULL, &Task01_ID_attributes);
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <main+0x58>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <main+0x5c>)
 8000600:	f004 fb96 	bl	8004d30 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <main+0x60>)
 8000608:	6013      	str	r3, [r2, #0]

  /* creation of Task02_ID */
  Task02_IDHandle = osThreadNew(Task02, NULL, &Task02_ID_attributes);
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <main+0x64>)
 800060c:	2100      	movs	r1, #0
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <main+0x68>)
 8000610:	f004 fb8e 	bl	8004d30 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <main+0x6c>)
 8000618:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061a:	f004 fb63 	bl	8004ce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x4e>
 8000620:	200001c8 	.word	0x200001c8
 8000624:	20000090 	.word	0x20000090
 8000628:	08008128 	.word	0x08008128
 800062c:	080009a1 	.word	0x080009a1
 8000630:	200001c0 	.word	0x200001c0
 8000634:	0800814c 	.word	0x0800814c
 8000638:	080009af 	.word	0x080009af
 800063c:	200001c4 	.word	0x200001c4

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b096      	sub	sp, #88	; 0x58
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2244      	movs	r2, #68	; 0x44
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 f8dc 	bl	800780c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000662:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000666:	f002 f96d 	bl	8002944 <HAL_PWREx_ControlVoltageScaling>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000670:	f000 f9b6 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2310      	movs	r3, #16
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2302      	movs	r3, #2
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800068e:	230a      	movs	r3, #10
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000692:	2307      	movs	r3, #7
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f9a4 	bl	80029f0 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ae:	f000 f997 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2303      	movs	r3, #3
 80006b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	2104      	movs	r1, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fda4 	bl	8003218 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d6:	f000 f983 	bl	80009e0 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3758      	adds	r7, #88	; 0x58
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006fa:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_ADC1_Init+0xf4>)
 80006fc:	4a37      	ldr	r2, [pc, #220]	; (80007dc <MX_ADC1_Init+0xf8>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000702:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000706:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000708:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <MX_ADC1_Init+0xf4>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000716:	2201      	movs	r2, #1
 8000718:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_ADC1_Init+0xf4>)
 800071c:	2204      	movs	r2, #4
 800071e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000720:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000722:	2200      	movs	r2, #0
 8000724:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000726:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000728:	2201      	movs	r2, #1
 800072a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_ADC1_Init+0xf4>)
 800072e:	2203      	movs	r2, #3
 8000730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_ADC1_Init+0xf4>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000742:	2200      	movs	r2, #0
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000748:	2201      	movs	r2, #1
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_ADC1_Init+0xf4>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_ADC1_Init+0xf4>)
 800075e:	f000 fd93 	bl	8001288 <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000768:	f000 f93a 	bl	80009e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_ADC1_Init+0xfc>)
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000770:	2306      	movs	r3, #6
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000774:	2302      	movs	r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000778:	237f      	movs	r3, #127	; 0x7f
 800077a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077c:	2304      	movs	r3, #4
 800077e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <MX_ADC1_Init+0xf4>)
 800078a:	f000 ff67 	bl	800165c <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000794:	f000 f924 	bl	80009e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_ADC1_Init+0x100>)
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800079c:	230c      	movs	r3, #12
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_ADC1_Init+0xf4>)
 80007a6:	f000 ff59 	bl	800165c <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80007b0:	f000 f916 	bl	80009e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_ADC1_Init+0x104>)
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007b8:	2312      	movs	r3, #18
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_ADC1_Init+0xf4>)
 80007c2:	f000 ff4b 	bl	800165c <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80007cc:	f000 f908 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000090 	.word	0x20000090
 80007dc:	50040000 	.word	0x50040000
 80007e0:	0c900008 	.word	0x0c900008
 80007e4:	10c00010 	.word	0x10c00010
 80007e8:	19200040 	.word	0x19200040

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART2_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MX_USART2_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART2_UART_Init+0x58>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000830:	f003 fd04 	bl	800423c <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f8d1 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000013c 	.word	0x2000013c
 8000848:	40004400 	.word	0x40004400

0800084c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_DMA_Init+0x38>)
 8000854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <MX_DMA_Init+0x38>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6493      	str	r3, [r2, #72]	; 0x48
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_DMA_Init+0x38>)
 8000860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2105      	movs	r1, #5
 800086e:	200b      	movs	r0, #11
 8000870:	f001 fca6 	bl	80021c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000874:	200b      	movs	r0, #11
 8000876:	f001 fcbf 	bl	80021f8 <HAL_NVIC_EnableIRQ>

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a3c      	ldr	r2, [pc, #240]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b3a      	ldr	r3, [pc, #232]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	4b37      	ldr	r3, [pc, #220]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a36      	ldr	r2, [pc, #216]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b31      	ldr	r3, [pc, #196]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a30      	ldr	r2, [pc, #192]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <MX_GPIO_Init+0x10c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6___INHU_Pin|Green_LED_Pin|D11___INU_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 4124 	mov.w	r1, #41984	; 0xa400
 8000904:	4824      	ldr	r0, [pc, #144]	; (8000998 <MX_GPIO_Init+0x110>)
 8000906:	f001 fff7 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D9___INW_Pin|D10___INV_Pin|D5___INHV_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 4109 	mov.w	r1, #35072	; 0x8900
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f001 fff0 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	481b      	ldr	r0, [pc, #108]	; (800099c <MX_GPIO_Init+0x114>)
 8000930:	f001 fe68 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6___INHU_Pin Green_LED_Pin D11___INU_Pin */
  GPIO_InitStruct.Pin = D6___INHU_Pin|Green_LED_Pin|D11___INU_Pin;
 8000934:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <MX_GPIO_Init+0x110>)
 800094e:	f001 fe59 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : D9___INW_Pin D10___INV_Pin D5___INHV_Pin */
  GPIO_InitStruct.Pin = D9___INW_Pin|D10___INV_Pin|D5___INHV_Pin;
 8000952:	f44f 4309 	mov.w	r3, #35072	; 0x8900
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f001 fe49 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3___INHW_Pin */
  GPIO_InitStruct.Pin = D3___INHW_Pin;
 8000972:	2308      	movs	r3, #8
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000976:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3___INHW_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_GPIO_Init+0x110>)
 8000988:	f001 fe3c 	bl	8002604 <HAL_GPIO_Init>

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	; 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	48000400 	.word	0x48000400
 800099c:	48000800 	.word	0x48000800

080009a0 <Task01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01 */
void Task01(void *argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		task01_function();
 80009a8:	f006 fec8 	bl	800773c <task01_function>
 80009ac:	e7fc      	b.n	80009a8 <Task01+0x8>

080009ae <Task02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02 */
void Task02(void *argument)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02 */
  /* Infinite loop */
	for(;;)
	{
		task02_function();
 80009b6:	f006 fec9 	bl	800774c <task02_function>
 80009ba:	e7fc      	b.n	80009b6 <Task02+0x8>

080009bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ce:	f000 fa73 	bl	8000eb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40001000 	.word	0x40001000

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6613      	str	r3, [r2, #96]	; 0x60
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6593      	str	r3, [r2, #88]	; 0x58
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f001 fbc9 	bl	80021c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0a2      	sub	sp, #136	; 0x88
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2260      	movs	r2, #96	; 0x60
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 fed5 	bl	800780c <memset>
  if(hadc->Instance==ADC1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <HAL_ADC_MspInit+0x148>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	f040 8087 	bne.w	8000b7c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a78:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a82:	2308      	movs	r3, #8
 8000a84:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fe11 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000aa8:	f7ff ff9a 	bl	80009e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a2f      	ldr	r2, [pc, #188]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <HAL_ADC_MspInit+0x14c>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = A3___ADC_U_Pin|A2___ADC_V_Pin;
 8000af4:	230c      	movs	r3, #12
 8000af6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000af8:	230b      	movs	r3, #11
 8000afa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b04:	4619      	mov	r1, r3
 8000b06:	4821      	ldr	r0, [pc, #132]	; (8000b8c <HAL_ADC_MspInit+0x150>)
 8000b08:	f001 fd7c 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A1___ADC_W_Pin;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b10:	230b      	movs	r3, #11
 8000b12:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(A1___ADC_W_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f001 fd6f 	bl	8002604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b28:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_ADC_MspInit+0x158>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b56:	2220      	movs	r2, #32
 8000b58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b62:	f001 fb57 	bl	8002214 <HAL_DMA_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8000b6c:	f7ff ff38 	bl	80009e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b74:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b76:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_ADC_MspInit+0x154>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3788      	adds	r7, #136	; 0x88
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	50040000 	.word	0x50040000
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000800 	.word	0x48000800
 8000b90:	200000f4 	.word	0x200000f4
 8000b94:	40020008 	.word	0x40020008

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a2      	sub	sp, #136	; 0x88
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2260      	movs	r2, #96	; 0x60
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 fe27 	bl	800780c <memset>
  if(huart->Instance==USART2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d138      	bne.n	8000c3a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fd75 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be0:	f7ff fefe 	bl	80009e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_UART_MspInit+0xb0>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0xb0>)
 8000bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bee:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0xb0>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_UART_MspInit+0xb0>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0xb0>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_UART_MspInit+0xb0>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c14:	230c      	movs	r3, #12
 8000c16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c26:	2307      	movs	r3, #7
 8000c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f001 fce5 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3788      	adds	r7, #136	; 0x88
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <HAL_InitTick+0xe0>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	4a33      	ldr	r2, [pc, #204]	; (8000d2c <HAL_InitTick+0xe0>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6593      	str	r3, [r2, #88]	; 0x58
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <HAL_InitTick+0xe0>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c72:	f107 0210 	add.w	r2, r7, #16
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fc8f 	bl	80035a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d103      	bne.n	8000c94 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c8c:	f002 fc5c 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8000c90:	6378      	str	r0, [r7, #52]	; 0x34
 8000c92:	e004      	b.n	8000c9e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c94:	f002 fc58 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca0:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <HAL_InitTick+0xe4>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9b      	lsrs	r3, r3, #18
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_InitTick+0xe8>)
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <HAL_InitTick+0xec>)
 8000cb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_InitTick+0xe8>)
 8000cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <HAL_InitTick+0xe8>)
 8000cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_InitTick+0xe8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_InitTick+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_InitTick+0xe8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <HAL_InitTick+0xe8>)
 8000cd4:	f003 f832 	bl	8003d3c <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d11b      	bne.n	8000d1e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ce6:	4813      	ldr	r0, [pc, #76]	; (8000d34 <HAL_InitTick+0xe8>)
 8000ce8:	f003 f88a 	bl	8003e00 <HAL_TIM_Base_Start_IT>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d111      	bne.n	8000d1e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cfa:	2036      	movs	r0, #54	; 0x36
 8000cfc:	f001 fa7c 	bl	80021f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b0f      	cmp	r3, #15
 8000d04:	d808      	bhi.n	8000d18 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d06:	2200      	movs	r2, #0
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	2036      	movs	r0, #54	; 0x36
 8000d0c:	f001 fa58 	bl	80021c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_InitTick+0xf0>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e002      	b.n	8000d1e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3738      	adds	r7, #56	; 0x38
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	200001d4 	.word	0x200001d4
 8000d38:	40001000 	.word	0x40001000
 8000d3c:	20000004 	.word	0x20000004

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <DMA1_Channel1_IRQHandler+0x10>)
 8000d72:	f001 fb67 	bl	8002444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000f4 	.word	0x200000f4

08000d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <TIM6_DAC_IRQHandler+0x10>)
 8000d86:	f003 f88f 	bl	8003ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001d4 	.word	0x200001d4

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f006 fcea 	bl	800779c <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20010000 	.word	0x20010000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	20000220 	.word	0x20000220
 8000dfc:	20001b40 	.word	0x20001b40

08000e00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff ffea 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2e:	490d      	ldr	r1, [pc, #52]	; (8000e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <LoopForever+0xe>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e44:	4c0a      	ldr	r4, [pc, #40]	; (8000e70 <LoopForever+0x16>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f006 fca9 	bl	80077a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e56:	f7ff fbbb 	bl	80005d0 <main>

08000e5a <LoopForever>:

LoopForever:
    b LoopForever
 8000e5a:	e7fe      	b.n	8000e5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e68:	080081fc 	.word	0x080081fc
  ldr r2, =_sbss
 8000e6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e70:	20001b40 	.word	0x20001b40

08000e74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_Init+0x3c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_Init+0x3c>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f001 f98b 	bl	80021aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e94:	200f      	movs	r0, #15
 8000e96:	f7ff fed9 	bl	8000c4c <HAL_InitTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	e001      	b.n	8000eaa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea6:	f7ff fda1 	bl	80009ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000224 	.word	0x20000224

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000224 	.word	0x20000224

08000ef8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	609a      	str	r2, [r3, #8]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	609a      	str	r2, [r3, #8]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3360      	adds	r3, #96	; 0x60
 8000f72:	461a      	mov	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <LL_ADC_SetOffset+0x44>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	03fff000 	.word	0x03fff000

08000fa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3360      	adds	r3, #96	; 0x60
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3360      	adds	r3, #96	; 0x60
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ffe:	bf00      	nop
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3330      	adds	r3, #48	; 0x30
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	f003 030c 	and.w	r3, r3, #12
 800104c:	4413      	add	r3, r2
 800104e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	211f      	movs	r1, #31
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	401a      	ands	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	0e9b      	lsrs	r3, r3, #26
 8001068:	f003 011f 	and.w	r1, r3, #31
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	431a      	orrs	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800107c:	bf00      	nop
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3314      	adds	r3, #20
 8001098:	461a      	mov	r2, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	0e5b      	lsrs	r3, r3, #25
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	0d1b      	lsrs	r3, r3, #20
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	2107      	movs	r1, #7
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	401a      	ands	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	0d1b      	lsrs	r3, r3, #20
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0318 	and.w	r3, r3, #24
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001104:	40d9      	lsrs	r1, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	400b      	ands	r3, r1
 800110a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800110e:	431a      	orrs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	0007ffff 	.word	0x0007ffff

08001128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6093      	str	r3, [r2, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800115c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001160:	d101      	bne.n	8001166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011b0:	d101      	bne.n	80011b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <LL_ADC_IsEnabled+0x18>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <LL_ADC_IsEnabled+0x1a>
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001222:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001226:	f043 0204 	orr.w	r2, r3, #4
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b04      	cmp	r3, #4
 800124c:	d101      	bne.n	8001252 <LL_ADC_REG_IsConversionOngoing+0x18>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b08      	cmp	r3, #8
 8001272:	d101      	bne.n	8001278 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e12c      	b.n	80014fc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d109      	bne.n	80012c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fbc3 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff3f 	bl	800114c <LL_ADC_IsDeepPowerDownEnabled>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff25 	bl	8001128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff5a 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d115      	bne.n	800131a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff3e 	bl	8001174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012f8:	4b82      	ldr	r3, [pc, #520]	; (8001504 <HAL_ADC_Init+0x27c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	099b      	lsrs	r3, r3, #6
 80012fe:	4a82      	ldr	r2, [pc, #520]	; (8001508 <HAL_ADC_Init+0x280>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	099b      	lsrs	r3, r3, #6
 8001306:	3301      	adds	r3, #1
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800130c:	e002      	b.n	8001314 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff3c 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10d      	bne.n	8001346 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff75 	bl	800123a <LL_ADC_REG_IsConversionOngoing>
 8001350:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 80c5 	bne.w	80014ea <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 80c1 	bne.w	80014ea <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001370:	f043 0202 	orr.w	r2, r3, #2
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff35 	bl	80011ec <LL_ADC_IsEnabled>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001388:	4860      	ldr	r0, [pc, #384]	; (800150c <HAL_ADC_Init+0x284>)
 800138a:	f7ff ff2f 	bl	80011ec <LL_ADC_IsEnabled>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d105      	bne.n	80013a0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4619      	mov	r1, r3
 800139a:	485d      	ldr	r0, [pc, #372]	; (8001510 <HAL_ADC_Init+0x288>)
 800139c:	f7ff fdac 	bl	8000ef8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e5b      	ldrb	r3, [r3, #25]
 80013a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d106      	bne.n	80013dc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	3b01      	subs	r3, #1
 80013d4:	045b      	lsls	r3, r3, #17
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d009      	beq.n	80013f8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	4b45      	ldr	r3, [pc, #276]	; (8001514 <HAL_ADC_Init+0x28c>)
 8001400:	4013      	ands	r3, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	430b      	orrs	r3, r1
 800140a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff12 	bl	800123a <LL_ADC_REG_IsConversionOngoing>
 8001416:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff1f 	bl	8001260 <LL_ADC_INJ_IsConversionOngoing>
 8001422:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d13d      	bne.n	80014a6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d13a      	bne.n	80014a6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001434:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800143c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800144c:	f023 0302 	bic.w	r3, r3, #2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	69b9      	ldr	r1, [r7, #24]
 8001456:	430b      	orrs	r3, r1
 8001458:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001460:	2b01      	cmp	r3, #1
 8001462:	d118      	bne.n	8001496 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800147a:	4311      	orrs	r1, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001480:	4311      	orrs	r1, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001486:	430a      	orrs	r2, r1
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	e007      	b.n	80014a6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d10c      	bne.n	80014c8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f023 010f 	bic.w	r1, r3, #15
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
 80014c6:	e007      	b.n	80014d8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020f 	bic.w	r2, r2, #15
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014dc:	f023 0303 	bic.w	r3, r3, #3
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	655a      	str	r2, [r3, #84]	; 0x54
 80014e8:	e007      	b.n	80014fa <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ee:	f043 0210 	orr.w	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000
 8001508:	053e2d63 	.word	0x053e2d63
 800150c:	50040000 	.word	0x50040000
 8001510:	50040300 	.word	0x50040300
 8001514:	fff0c007 	.word	0xfff0c007

08001518 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe86 	bl	800123a <LL_ADC_REG_IsConversionOngoing>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d167      	bne.n	8001604 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_ADC_Start_DMA+0x2a>
 800153e:	2302      	movs	r3, #2
 8001540:	e063      	b.n	800160a <HAL_ADC_Start_DMA+0xf2>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fc66 	bl	8001e1c <ADC_Enable>
 8001550:	4603      	mov	r3, r0
 8001552:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d14f      	bne.n	80015fa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f023 0206 	bic.w	r2, r3, #6
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	659a      	str	r2, [r3, #88]	; 0x58
 8001586:	e002      	b.n	800158e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_ADC_Start_DMA+0xfc>)
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <HAL_ADC_Start_DMA+0x100>)
 800159c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a1e      	ldr	r2, [pc, #120]	; (800161c <HAL_ADC_Start_DMA+0x104>)
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	221c      	movs	r2, #28
 80015ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0210 	orr.w	r2, r2, #16
 80015c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0201 	orr.w	r2, r2, #1
 80015d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3340      	adds	r3, #64	; 0x40
 80015e0:	4619      	mov	r1, r3
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f000 fecd 	bl	8002384 <HAL_DMA_Start_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe0d 	bl	8001212 <LL_ADC_REG_StartConversion>
 80015f8:	e006      	b.n	8001608 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001602:	e001      	b.n	8001608 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001604:	2302      	movs	r3, #2
 8001606:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	08001f29 	.word	0x08001f29
 8001618:	08002001 	.word	0x08002001
 800161c:	0800201d 	.word	0x0800201d

08001620 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0b6      	sub	sp, #216	; 0xd8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_ADC_ConfigChannel+0x22>
 800167a:	2302      	movs	r3, #2
 800167c:	e3b9      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x796>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fdd5 	bl	800123a <LL_ADC_REG_IsConversionOngoing>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 839e 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d824      	bhi.n	80016ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	3b02      	subs	r3, #2
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d81b      	bhi.n	80016e2 <HAL_ADC_ConfigChannel+0x86>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <HAL_ADC_ConfigChannel+0x54>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	080016c1 	.word	0x080016c1
 80016b4:	080016c9 	.word	0x080016c9
 80016b8:	080016d1 	.word	0x080016d1
 80016bc:	080016d9 	.word	0x080016d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	220c      	movs	r2, #12
 80016c4:	605a      	str	r2, [r3, #4]
          break;
 80016c6:	e011      	b.n	80016ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2212      	movs	r2, #18
 80016cc:	605a      	str	r2, [r3, #4]
          break;
 80016ce:	e00d      	b.n	80016ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2218      	movs	r2, #24
 80016d4:	605a      	str	r2, [r3, #4]
          break;
 80016d6:	e009      	b.n	80016ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016de:	605a      	str	r2, [r3, #4]
          break;
 80016e0:	e004      	b.n	80016ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2206      	movs	r2, #6
 80016e6:	605a      	str	r2, [r3, #4]
          break;
 80016e8:	e000      	b.n	80016ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	f7ff fc99 	bl	8001030 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fd99 	bl	800123a <LL_ADC_REG_IsConversionOngoing>
 8001708:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fda5 	bl	8001260 <LL_ADC_INJ_IsConversionOngoing>
 8001716:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800171a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 81a6 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001728:	2b00      	cmp	r3, #0
 800172a:	f040 81a1 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	461a      	mov	r2, r3
 800173c:	f7ff fca4 	bl	8001088 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d00a      	beq.n	8001778 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6919      	ldr	r1, [r3, #16]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001772:	f7ff fbf5 	bl	8000f60 <LL_ADC_SetOffset>
 8001776:	e17b      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc12 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10a      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x148>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc07 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	f003 021f 	and.w	r2, r3, #31
 80017a2:	e01e      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x186>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fbfc 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80017d2:	2320      	movs	r3, #32
 80017d4:	e004      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80017d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x19e>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0e9b      	lsrs	r3, r3, #26
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	e018      	b.n	800182c <HAL_ADC_ConfigChannel+0x1d0>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800180e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800181e:	2320      	movs	r3, #32
 8001820:	e004      	b.n	800182c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001826:	fab3 f383 	clz	r3, r3
 800182a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800182c:	429a      	cmp	r2, r3
 800182e:	d106      	bne.n	800183e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fbcb 	bl	8000fd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fbaf 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10a      	bne.n	800186a <HAL_ADC_ConfigChannel+0x20e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fba4 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	0e9b      	lsrs	r3, r3, #26
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	e01e      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x24c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2101      	movs	r1, #1
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb99 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800188c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001898:	2320      	movs	r3, #32
 800189a:	e004      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800189c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x264>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0e9b      	lsrs	r3, r3, #26
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	e018      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x296>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80018e4:	2320      	movs	r3, #32
 80018e6:	e004      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80018e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d106      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fb68 	bl	8000fd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2102      	movs	r1, #2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fb4c 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10a      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x2d4>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2102      	movs	r1, #2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fb41 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	0e9b      	lsrs	r3, r3, #26
 800192a:	f003 021f 	and.w	r2, r3, #31
 800192e:	e01e      	b.n	800196e <HAL_ADC_ConfigChannel+0x312>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2102      	movs	r1, #2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fb36 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800194e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800195e:	2320      	movs	r3, #32
 8001960:	e004      	b.n	800196c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x32a>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	0e9b      	lsrs	r3, r3, #26
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	e016      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x358>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800199e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80019a6:	2320      	movs	r3, #32
 80019a8:	e004      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80019aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d106      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	2102      	movs	r1, #2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb07 	bl	8000fd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2103      	movs	r1, #3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff faeb 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x396>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2103      	movs	r1, #3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fae0 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	0e9b      	lsrs	r3, r3, #26
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	e017      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x3c6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2103      	movs	r1, #3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fad5 	bl	8000fa8 <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a0c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001a14:	2320      	movs	r3, #32
 8001a16:	e003      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x3de>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0e9b      	lsrs	r3, r3, #26
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	e011      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x402>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001a52:	2320      	movs	r3, #32
 8001a54:	e003      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d106      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	2103      	movs	r1, #3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fab2 	bl	8000fd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fbb9 	bl	80011ec <LL_ADC_IsEnabled>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f040 813f 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f7ff fb26 	bl	80010e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a8e      	ldr	r2, [pc, #568]	; (8001cd4 <HAL_ADC_ConfigChannel+0x678>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	f040 8130 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10b      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x46c>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0e9b      	lsrs	r3, r3, #26
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	bf94      	ite	ls
 8001ac0:	2301      	movls	r3, #1
 8001ac2:	2300      	movhi	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e019      	b.n	8001afc <HAL_ADC_ConfigChannel+0x4a0>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ad8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	e003      	b.n	8001aec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	bf94      	ite	ls
 8001af6:	2301      	movls	r3, #1
 8001af8:	2300      	movhi	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d079      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x4c0>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0e9b      	lsrs	r3, r3, #26
 8001b12:	3301      	adds	r3, #1
 8001b14:	069b      	lsls	r3, r3, #26
 8001b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b1a:	e015      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x4ec>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b34:	2320      	movs	r3, #32
 8001b36:	e003      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	069b      	lsls	r3, r3, #26
 8001b44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x50c>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0e9b      	lsrs	r3, r3, #26
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	e017      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x53c>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b78:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e003      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	ea42 0103 	orr.w	r1, r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x562>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	051b      	lsls	r3, r3, #20
 8001bbc:	e018      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x594>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	e003      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	e080      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x5b4>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	069b      	lsls	r3, r3, #26
 8001c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c0e:	e015      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x5e0>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e003      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	069b      	lsls	r3, r3, #26
 8001c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x600>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	e017      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x630>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	61fb      	str	r3, [r7, #28]
  return result;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e003      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	ea42 0103 	orr.w	r1, r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x65c>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	3b1e      	subs	r3, #30
 8001cb0:	051b      	lsls	r3, r3, #20
 8001cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	e01d      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x698>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	613b      	str	r3, [r7, #16]
  return result;
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d103      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	e005      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x684>
 8001cd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f003 021f 	and.w	r2, r3, #31
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	3b1e      	subs	r3, #30
 8001cee:	051b      	lsls	r3, r3, #20
 8001cf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6892      	ldr	r2, [r2, #8]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7ff f9c4 	bl	8001088 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_ADC_ConfigChannel+0x7a0>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d06c      	beq.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d0c:	483c      	ldr	r0, [pc, #240]	; (8001e00 <HAL_ADC_ConfigChannel+0x7a4>)
 8001d0e:	f7ff f919 	bl	8000f44 <LL_ADC_GetCommonPathInternalCh>
 8001d12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3a      	ldr	r2, [pc, #232]	; (8001e04 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d127      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d121      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a35      	ldr	r2, [pc, #212]	; (8001e08 <HAL_ADC_ConfigChannel+0x7ac>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d157      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d3e:	4619      	mov	r1, r3
 8001d40:	482f      	ldr	r0, [pc, #188]	; (8001e00 <HAL_ADC_ConfigChannel+0x7a4>)
 8001d42:	f7ff f8ec 	bl	8000f1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_ADC_ConfigChannel+0x7b0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <HAL_ADC_ConfigChannel+0x7b4>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d6e:	e03a      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <HAL_ADC_ConfigChannel+0x7b8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d113      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x746>
 8001d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_ADC_ConfigChannel+0x7ac>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d12a      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4819      	ldr	r0, [pc, #100]	; (8001e00 <HAL_ADC_ConfigChannel+0x7a4>)
 8001d9c:	f7ff f8bf 	bl	8000f1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da0:	e021      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_ADC_ConfigChannel+0x7bc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d11c      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d116      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_ADC_ConfigChannel+0x7ac>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d111      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <HAL_ADC_ConfigChannel+0x7a4>)
 8001dce:	f7ff f8a6 	bl	8000f1e <LL_ADC_SetCommonPathInternalCh>
 8001dd2:	e008      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	37d8      	adds	r7, #216	; 0xd8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	80080000 	.word	0x80080000
 8001e00:	50040300 	.word	0x50040300
 8001e04:	c7520000 	.word	0xc7520000
 8001e08:	50040000 	.word	0x50040000
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	053e2d63 	.word	0x053e2d63
 8001e14:	cb840000 	.word	0xcb840000
 8001e18:	80000001 	.word	0x80000001

08001e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f9dd 	bl	80011ec <LL_ADC_IsEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d169      	bne.n	8001f0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <ADC_Enable+0xfc>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00d      	beq.n	8001e62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e055      	b.n	8001f0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f9ac 	bl	80011c4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e6c:	482b      	ldr	r0, [pc, #172]	; (8001f1c <ADC_Enable+0x100>)
 8001e6e:	f7ff f869 	bl	8000f44 <LL_ADC_GetCommonPathInternalCh>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <ADC_Enable+0x104>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <ADC_Enable+0x108>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e96:	e002      	b.n	8001e9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f81c 	bl	8000ee0 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eaa:	e028      	b.n	8001efe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f99b 	bl	80011ec <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f97f 	bl	80011c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ec6:	f7ff f80b 	bl	8000ee0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d914      	bls.n	8001efe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d00d      	beq.n	8001efe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e007      	b.n	8001f0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d1cf      	bne.n	8001eac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	8000003f 	.word	0x8000003f
 8001f1c:	50040300 	.word	0x50040300
 8001f20:	20000000 	.word	0x20000000
 8001f24:	053e2d63 	.word	0x053e2d63

08001f28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d14b      	bne.n	8001fda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d021      	beq.n	8001fa0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f852 	bl	800100a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d032      	beq.n	8001fd2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d12b      	bne.n	8001fd2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11f      	bne.n	8001fd2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f9e:	e018      	b.n	8001fd2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d111      	bne.n	8001fd2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7ff fb24 	bl	8001620 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fd8:	e00e      	b.n	8001ff8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fb2e 	bl	8001648 <HAL_ADC_ErrorCallback>
}
 8001fec:	e004      	b.n	8001ff8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fb10 	bl	8001634 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f043 0204 	orr.w	r2, r3, #4
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7ff fb00 	bl	8001648 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <__NVIC_EnableIRQ+0x38>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff4c 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d2:	f7ff ff61 	bl	8002098 <__NVIC_GetPriorityGrouping>
 80021d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7ff ffb1 	bl	8002144 <NVIC_EncodePriority>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff80 	bl	80020f0 <__NVIC_SetPriority>
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff54 	bl	80020b4 <__NVIC_EnableIRQ>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e098      	b.n	8002358 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <HAL_DMA_Init+0x150>)
 800222e:	429a      	cmp	r2, r3
 8002230:	d80f      	bhi.n	8002252 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_DMA_Init+0x154>)
 800223a:	4413      	add	r3, r2
 800223c:	4a4b      	ldr	r2, [pc, #300]	; (800236c <HAL_DMA_Init+0x158>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	009a      	lsls	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a48      	ldr	r2, [pc, #288]	; (8002370 <HAL_DMA_Init+0x15c>)
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
 8002250:	e00e      	b.n	8002270 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_DMA_Init+0x160>)
 800225a:	4413      	add	r3, r2
 800225c:	4a43      	ldr	r2, [pc, #268]	; (800236c <HAL_DMA_Init+0x158>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	009a      	lsls	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a42      	ldr	r2, [pc, #264]	; (8002378 <HAL_DMA_Init+0x164>)
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002294:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ca:	d039      	beq.n	8002340 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a27      	ldr	r2, [pc, #156]	; (8002370 <HAL_DMA_Init+0x15c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11a      	bne.n	800230c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_DMA_Init+0x168>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f003 031c 	and.w	r3, r3, #28
 80022e2:	210f      	movs	r1, #15
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4924      	ldr	r1, [pc, #144]	; (800237c <HAL_DMA_Init+0x168>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_DMA_Init+0x168>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f003 031c 	and.w	r3, r3, #28
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	491d      	ldr	r1, [pc, #116]	; (800237c <HAL_DMA_Init+0x168>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
 800230a:	e019      	b.n	8002340 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_DMA_Init+0x16c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f003 031c 	and.w	r3, r3, #28
 8002318:	210f      	movs	r1, #15
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_DMA_Init+0x16c>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_DMA_Init+0x16c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f003 031c 	and.w	r3, r3, #28
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	4911      	ldr	r1, [pc, #68]	; (8002380 <HAL_DMA_Init+0x16c>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40020407 	.word	0x40020407
 8002368:	bffdfff8 	.word	0xbffdfff8
 800236c:	cccccccd 	.word	0xcccccccd
 8002370:	40020000 	.word	0x40020000
 8002374:	bffdfbf8 	.word	0xbffdfbf8
 8002378:	40020400 	.word	0x40020400
 800237c:	400200a8 	.word	0x400200a8
 8002380:	400204a8 	.word	0x400204a8

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_DMA_Start_IT+0x20>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e04b      	b.n	800243c <HAL_DMA_Start_IT+0xb8>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d13a      	bne.n	800242e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f8e0 	bl	80025a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 020e 	orr.w	r2, r2, #14
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e00f      	b.n	800241c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 020a 	orr.w	r2, r2, #10
 800241a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e005      	b.n	800243a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f003 031c 	and.w	r3, r3, #28
 8002464:	2204      	movs	r2, #4
 8002466:	409a      	lsls	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d026      	beq.n	80024be <HAL_DMA_IRQHandler+0x7a>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d021      	beq.n	80024be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0204 	bic.w	r2, r2, #4
 8002496:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f003 021c 	and.w	r2, r3, #28
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2104      	movs	r1, #4
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d071      	beq.n	8002598 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80024bc:	e06c      	b.n	8002598 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f003 031c 	and.w	r3, r3, #28
 80024c6:	2202      	movs	r2, #2
 80024c8:	409a      	lsls	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d02e      	beq.n	8002530 <HAL_DMA_IRQHandler+0xec>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d029      	beq.n	8002530 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 020a 	bic.w	r2, r2, #10
 80024f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f003 021c 	and.w	r2, r3, #28
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2102      	movs	r1, #2
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d038      	beq.n	8002598 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800252e:	e033      	b.n	8002598 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f003 031c 	and.w	r3, r3, #28
 8002538:	2208      	movs	r2, #8
 800253a:	409a      	lsls	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02a      	beq.n	800259a <HAL_DMA_IRQHandler+0x156>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d025      	beq.n	800259a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 020e 	bic.w	r2, r2, #14
 800255c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 021c 	and.w	r2, r3, #28
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002598:	bf00      	nop
 800259a:	bf00      	nop
}
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f003 021c 	and.w	r2, r3, #28
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d108      	bne.n	80025e6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025e4:	e007      	b.n	80025f6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002612:	e154      	b.n	80028be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8146 	beq.w	80028b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d005      	beq.n	8002644 <HAL_GPIO_Init+0x40>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d130      	bne.n	80026a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267a:	2201      	movs	r2, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 0201 	and.w	r2, r3, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d017      	beq.n	80026e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d123      	bne.n	8002736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0203 	and.w	r2, r3, #3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80a0 	beq.w	80028b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002778:	4b58      	ldr	r3, [pc, #352]	; (80028dc <HAL_GPIO_Init+0x2d8>)
 800277a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277c:	4a57      	ldr	r2, [pc, #348]	; (80028dc <HAL_GPIO_Init+0x2d8>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6613      	str	r3, [r2, #96]	; 0x60
 8002784:	4b55      	ldr	r3, [pc, #340]	; (80028dc <HAL_GPIO_Init+0x2d8>)
 8002786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002790:	4a53      	ldr	r2, [pc, #332]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ba:	d019      	beq.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <HAL_GPIO_Init+0x2e0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x1e8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a48      	ldr	r2, [pc, #288]	; (80028e8 <HAL_GPIO_Init+0x2e4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1e4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a47      	ldr	r2, [pc, #284]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1e0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a46      	ldr	r2, [pc, #280]	; (80028f0 <HAL_GPIO_Init+0x2ec>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1dc>
 80027dc:	2304      	movs	r3, #4
 80027de:	e008      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027e0:	2307      	movs	r3, #7
 80027e2:	e006      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027e4:	2303      	movs	r3, #3
 80027e6:	e004      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e002      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027f0:	2300      	movs	r3, #0
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	f002 0203 	and.w	r2, r2, #3
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	4093      	lsls	r3, r2
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002802:	4937      	ldr	r1, [pc, #220]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002810:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43db      	mvns	r3, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002834:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800285e:	4a25      	ldr	r2, [pc, #148]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	43db      	mvns	r3, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002888:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800288e:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3301      	adds	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f aea3 	bne.w	8002614 <HAL_GPIO_Init+0x10>
  }
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40010000 	.word	0x40010000
 80028e4:	48000400 	.word	0x48000400
 80028e8:	48000800 	.word	0x48000800
 80028ec:	48000c00 	.word	0x48000c00
 80028f0:	48001000 	.word	0x48001000
 80028f4:	40010400 	.word	0x40010400

080028f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002908:	787b      	ldrb	r3, [r7, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002914:	e002      	b.n	800291c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_PWREx_GetVoltageRange+0x18>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40007000 	.word	0x40007000

08002944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002952:	d130      	bne.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002954:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002960:	d038      	beq.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800296a:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2232      	movs	r2, #50	; 0x32
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0c9b      	lsrs	r3, r3, #18
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002988:	e002      	b.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3b01      	subs	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299c:	d102      	bne.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f2      	bne.n	800298a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d110      	bne.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e00f      	b.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d007      	beq.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029cc:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40007000 	.word	0x40007000
 80029e8:	20000000 	.word	0x20000000
 80029ec:	431bde83 	.word	0x431bde83

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f000 bc02 	b.w	8003208 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a04:	4b96      	ldr	r3, [pc, #600]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a0e:	4b94      	ldr	r3, [pc, #592]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80e4 	beq.w	8002bee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4c>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	f040 808b 	bne.w	8002b4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 8087 	bne.w	8002b4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a3c:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x64>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e3d9      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7e>
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6c:	e005      	b.n	8002a7a <HAL_RCC_OscConfig+0x8a>
 8002a6e:	4b7c      	ldr	r3, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d223      	bcs.n	8002ac6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fdbe 	bl	8003604 <RCC_SetFlashLatencyFromMSIRange>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e3ba      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a92:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a72      	ldr	r2, [pc, #456]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	496d      	ldr	r1, [pc, #436]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab0:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	4968      	ldr	r1, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	e025      	b.n	8002b12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4960      	ldr	r1, [pc, #384]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae4:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	495b      	ldr	r1, [pc, #364]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fd7e 	bl	8003604 <RCC_SetFlashLatencyFromMSIRange>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e37a      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b12:	f000 fc81 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	4950      	ldr	r1, [pc, #320]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	4a4e      	ldr	r2, [pc, #312]	; (8002c68 <HAL_RCC_OscConfig+0x278>)
 8002b30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b32:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <HAL_RCC_OscConfig+0x27c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f888 	bl	8000c4c <HAL_InitTick>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d052      	beq.n	8002bec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	e35e      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d032      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe f9bf 	bl	8000ee0 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b66:	f7fe f9bb 	bl	8000ee0 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e347      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b78:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b84:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	f043 0308 	orr.w	r3, r3, #8
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4930      	ldr	r1, [pc, #192]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	492b      	ldr	r1, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
 8002bb6:	e01a      	b.n	8002bee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f98c 	bl	8000ee0 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bcc:	f7fe f988 	bl	8000ee0 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e314      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1dc>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d073      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x21c>
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d10e      	bne.n	8002c24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d063      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d15f      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e2f1      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x24c>
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e025      	b.n	8002c88 <HAL_RCC_OscConfig+0x298>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d114      	bne.n	8002c70 <HAL_RCC_OscConfig+0x280>
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a02      	ldr	r2, [pc, #8]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e013      	b.n	8002c88 <HAL_RCC_OscConfig+0x298>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08008170 	.word	0x08008170
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	4ba0      	ldr	r3, [pc, #640]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a9f      	ldr	r2, [pc, #636]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b9d      	ldr	r3, [pc, #628]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a9c      	ldr	r2, [pc, #624]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe f926 	bl	8000ee0 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe f922 	bl	8000ee0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e2ae      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002caa:	4b92      	ldr	r3, [pc, #584]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x2a8>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f912 	bl	8000ee0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f90e 	bl	8000ee0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e29a      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd2:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2d0>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d060      	beq.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x310>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d119      	bne.n	8002d2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d116      	bne.n	8002d2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d00:	4b7c      	ldr	r3, [pc, #496]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x328>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e277      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b76      	ldr	r3, [pc, #472]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	4973      	ldr	r1, [pc, #460]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d2c:	e040      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d023      	beq.n	8002d7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d36:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fe f8cd 	bl	8000ee0 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe f8c9 	bl	8000ee0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e255      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5c:	4b65      	ldr	r3, [pc, #404]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	495f      	ldr	r1, [pc, #380]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	e018      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe f8a9 	bl	8000ee0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe f8a5 	bl	8000ee0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e231      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d03c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	4a4a      	ldr	r2, [pc, #296]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe f884 	bl	8000ee0 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe f880 	bl	8000ee0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e20c      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <HAL_RCC_OscConfig+0x3ec>
 8002dfc:	e01b      	b.n	8002e36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f867 	bl	8000ee0 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe f863 	bl	8000ee0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1ef      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1ef      	bne.n	8002e16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80a6 	beq.w	8002f90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_RCC_OscConfig+0x508>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d118      	bne.n	8002eae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_OscConfig+0x508>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_RCC_OscConfig+0x508>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e88:	f7fe f82a 	bl	8000ee0 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7fe f826 	bl	8000ee0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1b2      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x508>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d108      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4d8>
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec6:	e029      	b.n	8002f1c <HAL_RCC_OscConfig+0x52c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d115      	bne.n	8002efc <HAL_RCC_OscConfig+0x50c>
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	e014      	b.n	8002f1c <HAL_RCC_OscConfig+0x52c>
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	4b9a      	ldr	r3, [pc, #616]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a99      	ldr	r2, [pc, #612]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0c:	4b96      	ldr	r3, [pc, #600]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	4a95      	ldr	r2, [pc, #596]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d016      	beq.n	8002f52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fd ffdc 	bl	8000ee0 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fd ffd8 	bl	8000ee0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e162      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f42:	4b89      	ldr	r3, [pc, #548]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ed      	beq.n	8002f2c <HAL_RCC_OscConfig+0x53c>
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f52:	f7fd ffc5 	bl	8000ee0 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fd ffc1 	bl	8000ee0 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e14b      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f70:	4b7d      	ldr	r3, [pc, #500]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ed      	bne.n	8002f5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d105      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f84:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	4a77      	ldr	r2, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d03c      	beq.n	8003016 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01c      	beq.n	8002fde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa4:	4b70      	ldr	r3, [pc, #448]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002faa:	4a6f      	ldr	r2, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fd ff94 	bl	8000ee0 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fbc:	f7fd ff90 	bl	8000ee0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e11c      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fce:	4b66      	ldr	r3, [pc, #408]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <HAL_RCC_OscConfig+0x5cc>
 8002fdc:	e01b      	b.n	8003016 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fde:	4b62      	ldr	r3, [pc, #392]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe4:	4a60      	ldr	r2, [pc, #384]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fd ff77 	bl	8000ee0 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff6:	f7fd ff73 	bl	8000ee0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0ff      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003008:	4b57      	ldr	r3, [pc, #348]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 800300a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ef      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80f3 	beq.w	8003206 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	2b02      	cmp	r3, #2
 8003026:	f040 80c9 	bne.w	80031bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800302a:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	429a      	cmp	r2, r3
 800303c:	d12c      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	3b01      	subs	r3, #1
 800304a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d123      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d11b      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d113      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	3b01      	subs	r3, #1
 800307e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d109      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	3b01      	subs	r3, #1
 8003092:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d06b      	beq.n	8003170 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d062      	beq.n	8003164 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0ac      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ae:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 80030b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ba:	f7fd ff11 	bl	8000ee0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fd ff0d 	bl	8000ee0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e099      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f0      	bne.n	80030c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <HAL_RCC_OscConfig+0x77c>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030fa:	0212      	lsls	r2, r2, #8
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003102:	0852      	lsrs	r2, r2, #1
 8003104:	3a01      	subs	r2, #1
 8003106:	0552      	lsls	r2, r2, #21
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800310e:	0852      	lsrs	r2, r2, #1
 8003110:	3a01      	subs	r2, #1
 8003112:	0652      	lsls	r2, r2, #25
 8003114:	4311      	orrs	r1, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800311a:	06d2      	lsls	r2, r2, #27
 800311c:	430a      	orrs	r2, r1
 800311e:	4912      	ldr	r1, [pc, #72]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8003120:	4313      	orrs	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003124:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800313c:	f7fd fed0 	bl	8000ee0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fd fecc 	bl	8000ee0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e058      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_RCC_OscConfig+0x778>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003162:	e050      	b.n	8003206 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e04f      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
 8003168:	40021000 	.word	0x40021000
 800316c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d144      	bne.n	8003206 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a23      	ldr	r2, [pc, #140]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003188:	4b21      	ldr	r3, [pc, #132]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 800318e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003192:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003194:	f7fd fea4 	bl	8000ee0 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fd fea0 	bl	8000ee0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e02c      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x7ac>
 80031ba:	e024      	b.n	8003206 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d01f      	beq.n	8003202 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 80031c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fd fe87 	bl	8000ee0 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d6:	f7fd fe83 	bl	8000ee0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e00f      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	4905      	ldr	r1, [pc, #20]	; (8003210 <HAL_RCC_OscConfig+0x820>)
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_OscConfig+0x824>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	60cb      	str	r3, [r1, #12]
 8003200:	e001      	b.n	8003206 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	feeefffc 	.word	0xfeeefffc

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0e7      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b75      	ldr	r3, [pc, #468]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d910      	bls.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b72      	ldr	r3, [pc, #456]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4970      	ldr	r1, [pc, #448]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b6e      	ldr	r3, [pc, #440]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0cf      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003274:	429a      	cmp	r2, r3
 8003276:	d908      	bls.n	800328a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4960      	ldr	r1, [pc, #384]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d04c      	beq.n	8003330 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d121      	bne.n	80032ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0a6      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	4b54      	ldr	r3, [pc, #336]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d115      	bne.n	80032ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e09a      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ce:	4b4e      	ldr	r3, [pc, #312]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e08e      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e086      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ee:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4943      	ldr	r1, [pc, #268]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fd fdee 	bl	8000ee0 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fd fdea 	bl	8000ee0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e06e      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d010      	beq.n	800335e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003348:	429a      	cmp	r2, r3
 800334a:	d208      	bcs.n	800335e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	492b      	ldr	r1, [pc, #172]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d210      	bcs.n	800338e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 0207 	bic.w	r2, r3, #7
 8003374:	4923      	ldr	r1, [pc, #140]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCC_ClockConfig+0x1ec>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d001      	beq.n	800338e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e036      	b.n	80033fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4918      	ldr	r1, [pc, #96]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d009      	beq.n	80033cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4910      	ldr	r1, [pc, #64]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033cc:	f000 f824 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	490b      	ldr	r1, [pc, #44]	; (800340c <HAL_RCC_ClockConfig+0x1f4>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1f8>)
 80033ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1fc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fc2b 	bl	8000c4c <HAL_InitTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80033fa:	7afb      	ldrb	r3, [r7, #11]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40022000 	.word	0x40022000
 8003408:	40021000 	.word	0x40021000
 800340c:	08008170 	.word	0x08008170
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003430:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d121      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d11e      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800344c:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	e005      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10d      	bne.n	80034a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d102      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCC_GetSysClockFreq+0x110>)
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	e004      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_RCC_GetSysClockFreq+0x114>)
 800349e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d134      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d003      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0xa6>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d003      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0xac>
 80034bc:	e005      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_RCC_GetSysClockFreq+0x110>)
 80034c0:	617b      	str	r3, [r7, #20]
      break;
 80034c2:	e005      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_GetSysClockFreq+0x114>)
 80034c6:	617b      	str	r3, [r7, #20]
      break;
 80034c8:	e002      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	617b      	str	r3, [r7, #20]
      break;
 80034ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	3301      	adds	r3, #1
 80034dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	fb03 f202 	mul.w	r2, r3, r2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	0e5b      	lsrs	r3, r3, #25
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	3301      	adds	r3, #1
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003510:	69bb      	ldr	r3, [r7, #24]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	08008188 	.word	0x08008188
 8003528:	00f42400 	.word	0x00f42400
 800352c:	007a1200 	.word	0x007a1200

08003530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <HAL_RCC_GetHCLKFreq+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000000 	.word	0x20000000

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800354c:	f7ff fff0 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4904      	ldr	r1, [pc, #16]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	08008180 	.word	0x08008180

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003578:	f7ff ffda 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0adb      	lsrs	r3, r3, #11
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	; (800359c <HAL_RCC_GetPCLK2Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	08008180 	.word	0x08008180

080035a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	220f      	movs	r2, #15
 80035ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_GetClockConfig+0x5c>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0203 	and.w	r2, r3, #3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_RCC_GetClockConfig+0x5c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_RCC_GetClockConfig+0x5c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_RCC_GetClockConfig+0x5c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <HAL_RCC_GetClockConfig+0x60>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0207 	and.w	r2, r3, #7
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	40022000 	.word	0x40022000

08003604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800361c:	f7ff f984 	bl	8002928 <HAL_PWREx_GetVoltageRange>
 8003620:	6178      	str	r0, [r7, #20]
 8003622:	e014      	b.n	800364e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a24      	ldr	r2, [pc, #144]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800363c:	f7ff f974 	bl	8002928 <HAL_PWREx_GetVoltageRange>
 8003640:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d10b      	bne.n	800366e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d919      	bls.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2ba0      	cmp	r3, #160	; 0xa0
 8003660:	d902      	bls.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003662:	2302      	movs	r3, #2
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	e013      	b.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003668:	2301      	movs	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e010      	b.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d902      	bls.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003674:	2303      	movs	r3, #3
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	e00a      	b.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d102      	bne.n	8003686 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003680:	2302      	movs	r3, #2
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	e004      	b.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b70      	cmp	r3, #112	; 0x70
 800368a:	d101      	bne.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800368c:	2301      	movs	r3, #1
 800368e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 0207 	bic.w	r2, r3, #7
 8003698:	4909      	ldr	r1, [pc, #36]	; (80036c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036a0:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d001      	beq.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40022000 	.word	0x40022000

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036cc:	2300      	movs	r3, #0
 80036ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d0:	2300      	movs	r3, #0
 80036d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d031      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036e8:	d01a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80036ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036ee:	d814      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036f8:	d10f      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4a5c      	ldr	r2, [pc, #368]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fa22 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	74fb      	strb	r3, [r7, #19]
      break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003728:	4b51      	ldr	r3, [pc, #324]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	494e      	ldr	r1, [pc, #312]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800373e:	e001      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 809e 	beq.w	800388e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003756:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	4b40      	ldr	r3, [pc, #256]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4a3f      	ldr	r2, [pc, #252]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
 8003778:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003784:	2301      	movs	r3, #1
 8003786:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a39      	ldr	r2, [pc, #228]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003794:	f7fd fba4 	bl	8000ee0 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fd fba0 	bl	8000ee0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	74fb      	strb	r3, [r7, #19]
        break;
 80037ae:	e005      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b0:	4b30      	ldr	r3, [pc, #192]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ef      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d15a      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01e      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d019      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800380a:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fd fb60 	bl	8000ee0 <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003822:	e00b      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fd fb5c 	bl	8000ee0 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d902      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	74fb      	strb	r3, [r7, #19]
            break;
 800383a:	e006      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ec      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003866:	e009      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387c:	7c7b      	ldrb	r3, [r7, #17]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b8d      	ldr	r3, [pc, #564]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	4a8c      	ldr	r2, [pc, #560]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389a:	4b87      	ldr	r3, [pc, #540]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f023 0203 	bic.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4983      	ldr	r1, [pc, #524]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038bc:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f023 020c 	bic.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	497b      	ldr	r1, [pc, #492]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038de:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	4972      	ldr	r1, [pc, #456]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003900:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	496a      	ldr	r1, [pc, #424]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003922:	4b65      	ldr	r3, [pc, #404]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003930:	4961      	ldr	r1, [pc, #388]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003944:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4959      	ldr	r1, [pc, #356]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003966:	4b54      	ldr	r3, [pc, #336]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4950      	ldr	r1, [pc, #320]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003988:	4b4b      	ldr	r3, [pc, #300]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	4948      	ldr	r1, [pc, #288]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039aa:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	493f      	ldr	r1, [pc, #252]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d028      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039cc:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039da:	4937      	ldr	r1, [pc, #220]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ea:	d106      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ec:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a31      	ldr	r2, [pc, #196]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f6:	60d3      	str	r3, [r2, #12]
 80039f8:	e011      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f8a4 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d028      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a2a:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a38:	491f      	ldr	r1, [pc, #124]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a54:	60d3      	str	r3, [r2, #12]
 8003a56:	e011      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f875 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa6:	d109      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a02      	ldr	r2, [pc, #8]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab2:	60d3      	str	r3, [r2, #12]
 8003ab4:	e014      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f843 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01c      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	4916      	ldr	r1, [pc, #88]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0a:	d10c      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f820 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	4904      	ldr	r1, [pc, #16]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b48:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000

08003b58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b66:	4b74      	ldr	r3, [pc, #464]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b72:	4b71      	ldr	r3, [pc, #452]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0203 	and.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d10d      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
       ||
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b8a:	4b6b      	ldr	r3, [pc, #428]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
       ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d047      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e044      	b.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d018      	beq.n	8003bde <RCCEx_PLLSAI1_Config+0x86>
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d825      	bhi.n	8003bfc <RCCEx_PLLSAI1_Config+0xa4>
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d002      	beq.n	8003bba <RCCEx_PLLSAI1_Config+0x62>
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d009      	beq.n	8003bcc <RCCEx_PLLSAI1_Config+0x74>
 8003bb8:	e020      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bba:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11d      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bca:	e01a      	b.n	8003c02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bcc:	4b5a      	ldr	r3, [pc, #360]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d116      	bne.n	8003c06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bdc:	e013      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bde:	4b56      	ldr	r3, [pc, #344]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bea:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bfa:	e006      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003c00:	e004      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c12:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	430b      	orrs	r3, r1
 8003c28:	4943      	ldr	r1, [pc, #268]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d17c      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c34:	4b40      	ldr	r3, [pc, #256]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3f      	ldr	r2, [pc, #252]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7fd f94e 	bl	8000ee0 <HAL_GetTick>
 8003c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c46:	e009      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c48:	f7fd f94a 	bl	8000ee0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d902      	bls.n	8003c5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	73fb      	strb	r3, [r7, #15]
        break;
 8003c5a:	e005      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c5c:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ef      	bne.n	8003c48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d15f      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d110      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c74:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68d2      	ldr	r2, [r2, #12]
 8003c8a:	06d2      	lsls	r2, r2, #27
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	492a      	ldr	r1, [pc, #168]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	610b      	str	r3, [r1, #16]
 8003c94:	e027      	b.n	8003ce6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d112      	bne.n	8003cc2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c9c:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ca4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6892      	ldr	r2, [r2, #8]
 8003cac:	0211      	lsls	r1, r2, #8
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6912      	ldr	r2, [r2, #16]
 8003cb2:	0852      	lsrs	r2, r2, #1
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	0552      	lsls	r2, r2, #21
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	491f      	ldr	r1, [pc, #124]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	610b      	str	r3, [r1, #16]
 8003cc0:	e011      	b.n	8003ce6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6892      	ldr	r2, [r2, #8]
 8003cd2:	0211      	lsls	r1, r2, #8
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6952      	ldr	r2, [r2, #20]
 8003cd8:	0852      	lsrs	r2, r2, #1
 8003cda:	3a01      	subs	r2, #1
 8003cdc:	0652      	lsls	r2, r2, #25
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	4915      	ldr	r1, [pc, #84]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cf0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fd f8f5 	bl	8000ee0 <HAL_GetTick>
 8003cf6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cf8:	e009      	b.n	8003d0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cfa:	f7fd f8f1 	bl	8000ee0 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d902      	bls.n	8003d0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	73fb      	strb	r3, [r7, #15]
          break;
 8003d0c:	e005      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0ef      	beq.n	8003cfa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	4903      	ldr	r1, [pc, #12]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e049      	b.n	8003de2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f841 	bl	8003dea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 f9dc 	bl	8004138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d001      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e03b      	b.n	8003e90 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_TIM_Base_Start_IT+0x4e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d004      	beq.n	8003e4e <HAL_TIM_Base_Start_IT+0x4e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d115      	bne.n	8003e7a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b06      	cmp	r3, #6
 8003e5e:	d015      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x8c>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e66:	d011      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e78:	e008      	b.n	8003e8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e000      	b.n	8003e8e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	00010007 	.word	0x00010007

08003ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d122      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d11b      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0202 	mvn.w	r2, #2
 8003ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f905 	bl	80040fa <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8f7 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f908 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d122      	bne.n	8003f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d11b      	bne.n	8003f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0204 	mvn.w	r2, #4
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8db 	bl	80040fa <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8cd 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f8de 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0208 	mvn.w	r2, #8
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2204      	movs	r2, #4
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8b1 	bl	80040fa <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8a3 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f8b4 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0210 	mvn.w	r2, #16
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f887 	bl	80040fa <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f879 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f88a 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0201 	mvn.w	r2, #1
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fc fcc8 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b80      	cmp	r3, #128	; 0x80
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004044:	2b80      	cmp	r3, #128	; 0x80
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8de 	bl	8004214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004066:	d10e      	bne.n	8004086 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d107      	bne.n	8004086 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800407e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f8d1 	bl	8004228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d10e      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d107      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f838 	bl	8004122 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d10e      	bne.n	80040de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d107      	bne.n	80040de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0220 	mvn.w	r2, #32
 80040d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f891 	bl	8004200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <TIM_Base_SetConfig+0xbc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_Base_SetConfig+0x20>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004156:	d108      	bne.n	800416a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <TIM_Base_SetConfig+0xbc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00b      	beq.n	800418a <TIM_Base_SetConfig+0x52>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d007      	beq.n	800418a <TIM_Base_SetConfig+0x52>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <TIM_Base_SetConfig+0xc0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_Base_SetConfig+0x52>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <TIM_Base_SetConfig+0xc4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d108      	bne.n	800419c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a0c      	ldr	r2, [pc, #48]	; (80041f4 <TIM_Base_SetConfig+0xbc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d007      	beq.n	80041d8 <TIM_Base_SetConfig+0xa0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <TIM_Base_SetConfig+0xc0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_Base_SetConfig+0xa0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <TIM_Base_SetConfig+0xc4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d103      	bne.n	80041e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	615a      	str	r2, [r3, #20]
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40014400 	.word	0x40014400

08004200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e040      	b.n	80042d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fc fc9a 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2224      	movs	r2, #36	; 0x24
 8004268:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8c0 	bl	8004400 <UART_SetConfig>
 8004280:	4603      	mov	r3, r0
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e022      	b.n	80042d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fb0e 	bl	80048b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fb95 	bl	80049f8 <UART_CheckIdleState>
 80042ce:	4603      	mov	r3, r0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	f040 8082 	bne.w	80043f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_UART_Transmit+0x26>
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07a      	b.n	80043f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_UART_Transmit+0x38>
 800430c:	2302      	movs	r3, #2
 800430e:	e073      	b.n	80043f8 <HAL_UART_Transmit+0x120>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2221      	movs	r2, #33	; 0x21
 8004324:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004326:	f7fc fddb 	bl	8000ee0 <HAL_GetTick>
 800432a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d108      	bne.n	8004358 <HAL_UART_Transmit+0x80>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e003      	b.n	8004360 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004368:	e02d      	b.n	80043c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2200      	movs	r2, #0
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fb88 	bl	8004a8a <UART_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e039      	b.n	80043f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004396:	b292      	uxth	r2, r2
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	3302      	adds	r3, #2
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e008      	b.n	80043b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	b292      	uxth	r2, r2
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3301      	adds	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1cb      	bne.n	800436a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2140      	movs	r1, #64	; 0x40
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fb54 	bl	8004a8a <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e005      	b.n	80043f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b08a      	sub	sp, #40	; 0x28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	431a      	orrs	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4313      	orrs	r3, r2
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b9e      	ldr	r3, [pc, #632]	; (80046a8 <UART_SetConfig+0x2a8>)
 8004430:	4013      	ands	r3, r2
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004438:	430b      	orrs	r3, r1
 800443a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a93      	ldr	r2, [pc, #588]	; (80046ac <UART_SetConfig+0x2ac>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004468:	4313      	orrs	r3, r2
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a8a      	ldr	r2, [pc, #552]	; (80046b0 <UART_SetConfig+0x2b0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d126      	bne.n	80044d8 <UART_SetConfig+0xd8>
 800448a:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <UART_SetConfig+0x2b4>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b03      	cmp	r3, #3
 8004496:	d81b      	bhi.n	80044d0 <UART_SetConfig+0xd0>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0xa0>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044b1 	.word	0x080044b1
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c9 	.word	0x080044c9
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e0ab      	b.n	8004610 <UART_SetConfig+0x210>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	e0a7      	b.n	8004610 <UART_SetConfig+0x210>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c6:	e0a3      	b.n	8004610 <UART_SetConfig+0x210>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ce:	e09f      	b.n	8004610 <UART_SetConfig+0x210>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d6:	e09b      	b.n	8004610 <UART_SetConfig+0x210>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a76      	ldr	r2, [pc, #472]	; (80046b8 <UART_SetConfig+0x2b8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d138      	bne.n	8004554 <UART_SetConfig+0x154>
 80044e2:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <UART_SetConfig+0x2b4>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d82d      	bhi.n	800454c <UART_SetConfig+0x14c>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0xf8>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	0800454d 	.word	0x0800454d
 8004504:	0800454d 	.word	0x0800454d
 8004508:	0800453d 	.word	0x0800453d
 800450c:	0800454d 	.word	0x0800454d
 8004510:	0800454d 	.word	0x0800454d
 8004514:	0800454d 	.word	0x0800454d
 8004518:	08004535 	.word	0x08004535
 800451c:	0800454d 	.word	0x0800454d
 8004520:	0800454d 	.word	0x0800454d
 8004524:	0800454d 	.word	0x0800454d
 8004528:	08004545 	.word	0x08004545
 800452c:	2300      	movs	r3, #0
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e06d      	b.n	8004610 <UART_SetConfig+0x210>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e069      	b.n	8004610 <UART_SetConfig+0x210>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e065      	b.n	8004610 <UART_SetConfig+0x210>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e061      	b.n	8004610 <UART_SetConfig+0x210>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e05d      	b.n	8004610 <UART_SetConfig+0x210>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a58      	ldr	r2, [pc, #352]	; (80046bc <UART_SetConfig+0x2bc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d125      	bne.n	80045aa <UART_SetConfig+0x1aa>
 800455e:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <UART_SetConfig+0x2b4>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004568:	2b30      	cmp	r3, #48	; 0x30
 800456a:	d016      	beq.n	800459a <UART_SetConfig+0x19a>
 800456c:	2b30      	cmp	r3, #48	; 0x30
 800456e:	d818      	bhi.n	80045a2 <UART_SetConfig+0x1a2>
 8004570:	2b20      	cmp	r3, #32
 8004572:	d00a      	beq.n	800458a <UART_SetConfig+0x18a>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d814      	bhi.n	80045a2 <UART_SetConfig+0x1a2>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <UART_SetConfig+0x182>
 800457c:	2b10      	cmp	r3, #16
 800457e:	d008      	beq.n	8004592 <UART_SetConfig+0x192>
 8004580:	e00f      	b.n	80045a2 <UART_SetConfig+0x1a2>
 8004582:	2300      	movs	r3, #0
 8004584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004588:	e042      	b.n	8004610 <UART_SetConfig+0x210>
 800458a:	2302      	movs	r3, #2
 800458c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004590:	e03e      	b.n	8004610 <UART_SetConfig+0x210>
 8004592:	2304      	movs	r3, #4
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004598:	e03a      	b.n	8004610 <UART_SetConfig+0x210>
 800459a:	2308      	movs	r3, #8
 800459c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a0:	e036      	b.n	8004610 <UART_SetConfig+0x210>
 80045a2:	2310      	movs	r3, #16
 80045a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a8:	e032      	b.n	8004610 <UART_SetConfig+0x210>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <UART_SetConfig+0x2ac>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d12a      	bne.n	800460a <UART_SetConfig+0x20a>
 80045b4:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <UART_SetConfig+0x2b4>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c2:	d01a      	beq.n	80045fa <UART_SetConfig+0x1fa>
 80045c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c8:	d81b      	bhi.n	8004602 <UART_SetConfig+0x202>
 80045ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ce:	d00c      	beq.n	80045ea <UART_SetConfig+0x1ea>
 80045d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d4:	d815      	bhi.n	8004602 <UART_SetConfig+0x202>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <UART_SetConfig+0x1e2>
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045de:	d008      	beq.n	80045f2 <UART_SetConfig+0x1f2>
 80045e0:	e00f      	b.n	8004602 <UART_SetConfig+0x202>
 80045e2:	2300      	movs	r3, #0
 80045e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e8:	e012      	b.n	8004610 <UART_SetConfig+0x210>
 80045ea:	2302      	movs	r3, #2
 80045ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f0:	e00e      	b.n	8004610 <UART_SetConfig+0x210>
 80045f2:	2304      	movs	r3, #4
 80045f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f8:	e00a      	b.n	8004610 <UART_SetConfig+0x210>
 80045fa:	2308      	movs	r3, #8
 80045fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004600:	e006      	b.n	8004610 <UART_SetConfig+0x210>
 8004602:	2310      	movs	r3, #16
 8004604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004608:	e002      	b.n	8004610 <UART_SetConfig+0x210>
 800460a:	2310      	movs	r3, #16
 800460c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a25      	ldr	r2, [pc, #148]	; (80046ac <UART_SetConfig+0x2ac>)
 8004616:	4293      	cmp	r3, r2
 8004618:	f040 808a 	bne.w	8004730 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800461c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004620:	2b08      	cmp	r3, #8
 8004622:	d824      	bhi.n	800466e <UART_SetConfig+0x26e>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x22c>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004651 	.word	0x08004651
 8004630:	0800466f 	.word	0x0800466f
 8004634:	08004659 	.word	0x08004659
 8004638:	0800466f 	.word	0x0800466f
 800463c:	0800465f 	.word	0x0800465f
 8004640:	0800466f 	.word	0x0800466f
 8004644:	0800466f 	.word	0x0800466f
 8004648:	0800466f 	.word	0x0800466f
 800464c:	08004667 	.word	0x08004667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004650:	f7fe ff7a 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8004654:	61f8      	str	r0, [r7, #28]
        break;
 8004656:	e010      	b.n	800467a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <UART_SetConfig+0x2c0>)
 800465a:	61fb      	str	r3, [r7, #28]
        break;
 800465c:	e00d      	b.n	800467a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465e:	f7fe fedb 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004662:	61f8      	str	r0, [r7, #28]
        break;
 8004664:	e009      	b.n	800467a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466a:	61fb      	str	r3, [r7, #28]
        break;
 800466c:	e005      	b.n	800467a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004678:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8109 	beq.w	8004894 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	429a      	cmp	r2, r3
 8004690:	d305      	bcc.n	800469e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	429a      	cmp	r2, r3
 800469c:	d912      	bls.n	80046c4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046a4:	e0f6      	b.n	8004894 <UART_SetConfig+0x494>
 80046a6:	bf00      	nop
 80046a8:	efff69f3 	.word	0xefff69f3
 80046ac:	40008000 	.word	0x40008000
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40004400 	.word	0x40004400
 80046bc:	40004800 	.word	0x40004800
 80046c0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2200      	movs	r2, #0
 80046c8:	461c      	mov	r4, r3
 80046ca:	4615      	mov	r5, r2
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	022b      	lsls	r3, r5, #8
 80046d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046da:	0222      	lsls	r2, r4, #8
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	6849      	ldr	r1, [r1, #4]
 80046e0:	0849      	lsrs	r1, r1, #1
 80046e2:	2000      	movs	r0, #0
 80046e4:	4688      	mov	r8, r1
 80046e6:	4681      	mov	r9, r0
 80046e8:	eb12 0a08 	adds.w	sl, r2, r8
 80046ec:	eb43 0b09 	adc.w	fp, r3, r9
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046fe:	4650      	mov	r0, sl
 8004700:	4659      	mov	r1, fp
 8004702:	f7fb fdb5 	bl	8000270 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4613      	mov	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004714:	d308      	bcc.n	8004728 <UART_SetConfig+0x328>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800471c:	d204      	bcs.n	8004728 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	e0b5      	b.n	8004894 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800472e:	e0b1      	b.n	8004894 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004738:	d15d      	bne.n	80047f6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800473a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800473e:	2b08      	cmp	r3, #8
 8004740:	d827      	bhi.n	8004792 <UART_SetConfig+0x392>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0x348>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800476d 	.word	0x0800476d
 800474c:	08004775 	.word	0x08004775
 8004750:	0800477d 	.word	0x0800477d
 8004754:	08004793 	.word	0x08004793
 8004758:	08004783 	.word	0x08004783
 800475c:	08004793 	.word	0x08004793
 8004760:	08004793 	.word	0x08004793
 8004764:	08004793 	.word	0x08004793
 8004768:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800476c:	f7fe feec 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8004770:	61f8      	str	r0, [r7, #28]
        break;
 8004772:	e014      	b.n	800479e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe fefe 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8004778:	61f8      	str	r0, [r7, #28]
        break;
 800477a:	e010      	b.n	800479e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b4c      	ldr	r3, [pc, #304]	; (80048b0 <UART_SetConfig+0x4b0>)
 800477e:	61fb      	str	r3, [r7, #28]
        break;
 8004780:	e00d      	b.n	800479e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe fe49 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004786:	61f8      	str	r0, [r7, #28]
        break;
 8004788:	e009      	b.n	800479e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478e:	61fb      	str	r3, [r7, #28]
        break;
 8004790:	e005      	b.n	800479e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800479c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d077      	beq.n	8004894 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	005a      	lsls	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	441a      	add	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b0f      	cmp	r3, #15
 80047be:	d916      	bls.n	80047ee <UART_SetConfig+0x3ee>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c6:	d212      	bcs.n	80047ee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f023 030f 	bic.w	r3, r3, #15
 80047d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	b29a      	uxth	r2, r3
 80047de:	8afb      	ldrh	r3, [r7, #22]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	8afa      	ldrh	r2, [r7, #22]
 80047ea:	60da      	str	r2, [r3, #12]
 80047ec:	e052      	b.n	8004894 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047f4:	e04e      	b.n	8004894 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d827      	bhi.n	800484e <UART_SetConfig+0x44e>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x404>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004829 	.word	0x08004829
 8004808:	08004831 	.word	0x08004831
 800480c:	08004839 	.word	0x08004839
 8004810:	0800484f 	.word	0x0800484f
 8004814:	0800483f 	.word	0x0800483f
 8004818:	0800484f 	.word	0x0800484f
 800481c:	0800484f 	.word	0x0800484f
 8004820:	0800484f 	.word	0x0800484f
 8004824:	08004847 	.word	0x08004847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fe fe8e 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 800482c:	61f8      	str	r0, [r7, #28]
        break;
 800482e:	e014      	b.n	800485a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7fe fea0 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8004834:	61f8      	str	r0, [r7, #28]
        break;
 8004836:	e010      	b.n	800485a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004838:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <UART_SetConfig+0x4b0>)
 800483a:	61fb      	str	r3, [r7, #28]
        break;
 800483c:	e00d      	b.n	800485a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483e:	f7fe fdeb 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004842:	61f8      	str	r0, [r7, #28]
        break;
 8004844:	e009      	b.n	800485a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	61fb      	str	r3, [r7, #28]
        break;
 800484c:	e005      	b.n	800485a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004858:	bf00      	nop
    }

    if (pclk != 0U)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d019      	beq.n	8004894 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	085a      	lsrs	r2, r3, #1
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	d909      	bls.n	800488e <UART_SetConfig+0x48e>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d205      	bcs.n	800488e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60da      	str	r2, [r3, #12]
 800488c:	e002      	b.n	8004894 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	; 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ae:	bf00      	nop
 80048b0:	00f42400 	.word	0x00f42400

080048b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01a      	beq.n	80049ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b2:	d10a      	bne.n	80049ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a08:	f7fc fa6a 	bl	8000ee0 <HAL_GetTick>
 8004a0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d10e      	bne.n	8004a3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f82d 	bl	8004a8a <UART_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e023      	b.n	8004a82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d10e      	bne.n	8004a66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f817 	bl	8004a8a <UART_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e00d      	b.n	8004a82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b09c      	sub	sp, #112	; 0x70
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9a:	e0a5      	b.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	f000 80a1 	beq.w	8004be8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa6:	f7fc fa1b 	bl	8000ee0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <UART_WaitOnFlagUntilTimeout+0x32>
 8004ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d13e      	bne.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004adc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ae0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e6      	bne.n	8004abc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	663b      	str	r3, [r7, #96]	; 0x60
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e5      	bne.n	8004aee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e067      	b.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d04f      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b56:	d147      	bne.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b60:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b80:	637b      	str	r3, [r7, #52]	; 0x34
 8004b82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e6      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bb4:	623a      	str	r2, [r7, #32]
 8004bb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	69f9      	ldr	r1, [r7, #28]
 8004bba:	6a3a      	ldr	r2, [r7, #32]
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e010      	b.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	f43f af4a 	beq.w	8004a9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3770      	adds	r7, #112	; 0x70
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <__NVIC_SetPriority>:
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	6039      	str	r1, [r7, #0]
 8004c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	db0a      	blt.n	8004c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	490c      	ldr	r1, [pc, #48]	; (8004c60 <__NVIC_SetPriority+0x4c>)
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	0112      	lsls	r2, r2, #4
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	440b      	add	r3, r1
 8004c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c3c:	e00a      	b.n	8004c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	4908      	ldr	r1, [pc, #32]	; (8004c64 <__NVIC_SetPriority+0x50>)
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	3b04      	subs	r3, #4
 8004c4c:	0112      	lsls	r2, r2, #4
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	440b      	add	r3, r1
 8004c52:	761a      	strb	r2, [r3, #24]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000e100 	.word	0xe000e100
 8004c64:	e000ed00 	.word	0xe000ed00

08004c68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <SysTick_Handler+0x1c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c70:	f001 fcfe 	bl	8006670 <xTaskGetSchedulerState>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d001      	beq.n	8004c7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c7a:	f002 fae5 	bl	8007248 <xPortSysTickHandler>
  }
}
 8004c7e:	bf00      	nop
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	e000e010 	.word	0xe000e010

08004c88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	f06f 0004 	mvn.w	r0, #4
 8004c92:	f7ff ffbf 	bl	8004c14 <__NVIC_SetPriority>
#endif
}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca2:	f3ef 8305 	mrs	r3, IPSR
 8004ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cae:	f06f 0305 	mvn.w	r3, #5
 8004cb2:	607b      	str	r3, [r7, #4]
 8004cb4:	e00c      	b.n	8004cd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <osKernelInitialize+0x44>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d105      	bne.n	8004cca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cbe:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <osKernelInitialize+0x44>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	607b      	str	r3, [r7, #4]
 8004cc8:	e002      	b.n	8004cd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cd0:	687b      	ldr	r3, [r7, #4]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000228 	.word	0x20000228

08004ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cea:	f3ef 8305 	mrs	r3, IPSR
 8004cee:	603b      	str	r3, [r7, #0]
  return(result);
 8004cf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cf6:	f06f 0305 	mvn.w	r3, #5
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	e010      	b.n	8004d20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <osKernelStart+0x48>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d109      	bne.n	8004d1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d06:	f7ff ffbf 	bl	8004c88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <osKernelStart+0x48>)
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d10:	f001 f866 	bl	8005de0 <vTaskStartScheduler>
      stat = osOK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	e002      	b.n	8004d20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d20:	687b      	ldr	r3, [r7, #4]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000228 	.word	0x20000228

08004d30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08e      	sub	sp, #56	; 0x38
 8004d34:	af04      	add	r7, sp, #16
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d40:	f3ef 8305 	mrs	r3, IPSR
 8004d44:	617b      	str	r3, [r7, #20]
  return(result);
 8004d46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d17e      	bne.n	8004e4a <osThreadNew+0x11a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d07b      	beq.n	8004e4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d56:	2318      	movs	r3, #24
 8004d58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d045      	beq.n	8004df6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <osThreadNew+0x48>
        name = attr->name;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <osThreadNew+0x6e>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b38      	cmp	r3, #56	; 0x38
 8004d90:	d805      	bhi.n	8004d9e <osThreadNew+0x6e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <osThreadNew+0x72>
        return (NULL);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e054      	b.n	8004e4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00e      	beq.n	8004dd8 <osThreadNew+0xa8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b5b      	cmp	r3, #91	; 0x5b
 8004dc0:	d90a      	bls.n	8004dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d006      	beq.n	8004dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <osThreadNew+0xa8>
        mem = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e010      	b.n	8004dfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10c      	bne.n	8004dfa <osThreadNew+0xca>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d108      	bne.n	8004dfa <osThreadNew+0xca>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <osThreadNew+0xca>
          mem = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e001      	b.n	8004dfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d110      	bne.n	8004e22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e08:	9202      	str	r2, [sp, #8]
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fe0c 	bl	8005a34 <xTaskCreateStatic>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	e013      	b.n	8004e4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d110      	bne.n	8004e4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	f107 0310 	add.w	r3, r7, #16
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fe57 	bl	8005aee <xTaskCreate>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d001      	beq.n	8004e4a <osThreadNew+0x11a>
            hTask = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e4a:	693b      	ldr	r3, [r7, #16]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3728      	adds	r7, #40	; 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e5c:	f3ef 8305 	mrs	r3, IPSR
 8004e60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <osDelay+0x1c>
    stat = osErrorISR;
 8004e68:	f06f 0305 	mvn.w	r3, #5
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e007      	b.n	8004e80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 ff7c 	bl	8005d78 <vTaskDelay>
    }
  }

  return (stat);
 8004e80:	68fb      	ldr	r3, [r7, #12]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a07      	ldr	r2, [pc, #28]	; (8004eb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <vApplicationGetIdleTaskMemory+0x30>)
 8004ea2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2280      	movs	r2, #128	; 0x80
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	2000022c 	.word	0x2000022c
 8004ebc:	20000288 	.word	0x20000288

08004ec0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a07      	ldr	r2, [pc, #28]	; (8004eec <vApplicationGetTimerTaskMemory+0x2c>)
 8004ed0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a06      	ldr	r2, [pc, #24]	; (8004ef0 <vApplicationGetTimerTaskMemory+0x30>)
 8004ed6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ede:	601a      	str	r2, [r3, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	20000488 	.word	0x20000488
 8004ef0:	200004e4 	.word	0x200004e4

08004ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f103 0208 	add.w	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f103 0208 	add.w	r2, r3, #8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0208 	add.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d103      	bne.n	8004fb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e00c      	b.n	8004fd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e002      	b.n	8004fc4 <vListInsert+0x2e>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d2f6      	bcs.n	8004fbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	601a      	str	r2, [r3, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6892      	ldr	r2, [r2, #8]
 800501e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6852      	ldr	r2, [r2, #4]
 8005028:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d103      	bne.n	800503c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005086:	f002 f84d 	bl	8007124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	68f9      	ldr	r1, [r7, #12]
 8005094:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	441a      	add	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	3b01      	subs	r3, #1
 80050b8:	68f9      	ldr	r1, [r7, #12]
 80050ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	22ff      	movs	r2, #255	; 0xff
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	22ff      	movs	r2, #255	; 0xff
 80050d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d114      	bne.n	8005106 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01a      	beq.n	800511a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3310      	adds	r3, #16
 80050e8:	4618      	mov	r0, r3
 80050ea:	f001 f903 	bl	80062f4 <xTaskRemoveFromEventList>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <xQueueGenericReset+0xcc>)
 80050f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	e009      	b.n	800511a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3310      	adds	r3, #16
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fef2 	bl	8004ef4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3324      	adds	r3, #36	; 0x24
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff feed 	bl	8004ef4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800511a:	f002 f833 	bl	8007184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800511e:	2301      	movs	r3, #1
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08e      	sub	sp, #56	; 0x38
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <xQueueGenericCreateStatic+0x52>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <xQueueGenericCreateStatic+0x56>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <xQueueGenericCreateStatic+0x58>
 8005182:	2300      	movs	r3, #0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	623b      	str	r3, [r7, #32]
}
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <xQueueGenericCreateStatic+0x7e>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <xQueueGenericCreateStatic+0x82>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <xQueueGenericCreateStatic+0x84>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	61fb      	str	r3, [r7, #28]
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051ca:	2350      	movs	r3, #80	; 0x50
 80051cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b50      	cmp	r3, #80	; 0x50
 80051d2:	d00a      	beq.n	80051ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	61bb      	str	r3, [r7, #24]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	4613      	mov	r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f805 	bl	800521c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005214:	4618      	mov	r0, r3
 8005216:	3730      	adds	r7, #48	; 0x30
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d103      	bne.n	8005238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e002      	b.n	800523e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800524a:	2101      	movs	r1, #1
 800524c:	69b8      	ldr	r0, [r7, #24]
 800524e:	f7ff ff05 	bl	800505c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	78fa      	ldrb	r2, [r7, #3]
 8005256:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08e      	sub	sp, #56	; 0x38
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005272:	2300      	movs	r3, #0
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xQueueGenericSend+0x32>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <xQueueGenericSend+0x40>
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <xQueueGenericSend+0x44>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <xQueueGenericSend+0x46>
 80052a8:	2300      	movs	r3, #0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <xQueueGenericSend+0x60>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d103      	bne.n	80052d2 <xQueueGenericSend+0x6e>
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <xQueueGenericSend+0x72>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <xQueueGenericSend+0x74>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	623b      	str	r3, [r7, #32]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052f2:	f001 f9bd 	bl	8006670 <xTaskGetSchedulerState>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <xQueueGenericSend+0x9e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <xQueueGenericSend+0xa2>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <xQueueGenericSend+0xa4>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xQueueGenericSend+0xbe>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	61fb      	str	r3, [r7, #28]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005322:	f001 feff 	bl	8007124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <xQueueGenericSend+0xd4>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d129      	bne.n	800538c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800533e:	f000 fa0b 	bl	8005758 <prvCopyDataToQueue>
 8005342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d010      	beq.n	800536e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	3324      	adds	r3, #36	; 0x24
 8005350:	4618      	mov	r0, r3
 8005352:	f000 ffcf 	bl	80062f4 <xTaskRemoveFromEventList>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800535c:	4b3f      	ldr	r3, [pc, #252]	; (800545c <xQueueGenericSend+0x1f8>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	e00a      	b.n	8005384 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005374:	4b39      	ldr	r3, [pc, #228]	; (800545c <xQueueGenericSend+0x1f8>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005384:	f001 fefe 	bl	8007184 <vPortExitCritical>
				return pdPASS;
 8005388:	2301      	movs	r3, #1
 800538a:	e063      	b.n	8005454 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005392:	f001 fef7 	bl	8007184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005396:	2300      	movs	r3, #0
 8005398:	e05c      	b.n	8005454 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053a0:	f107 0314 	add.w	r3, r7, #20
 80053a4:	4618      	mov	r0, r3
 80053a6:	f001 f809 	bl	80063bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ae:	f001 fee9 	bl	8007184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053b2:	f000 fd7b 	bl	8005eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053b6:	f001 feb5 	bl	8007124 <vPortEnterCritical>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d103      	bne.n	80053d0 <xQueueGenericSend+0x16c>
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d103      	bne.n	80053e6 <xQueueGenericSend+0x182>
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e6:	f001 fecd 	bl	8007184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053ea:	1d3a      	adds	r2, r7, #4
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fff8 	bl	80063e8 <xTaskCheckForTimeOut>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d124      	bne.n	8005448 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005400:	f000 faa2 	bl	8005948 <prvIsQueueFull>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d018      	beq.n	800543c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	3310      	adds	r3, #16
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4611      	mov	r1, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f000 ff1e 	bl	8006254 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541a:	f000 fa2d 	bl	8005878 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800541e:	f000 fd53 	bl	8005ec8 <xTaskResumeAll>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	f47f af7c 	bne.w	8005322 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <xQueueGenericSend+0x1f8>)
 800542c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	e772      	b.n	8005322 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800543c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800543e:	f000 fa1b 	bl	8005878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005442:	f000 fd41 	bl	8005ec8 <xTaskResumeAll>
 8005446:	e76c      	b.n	8005322 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544a:	f000 fa15 	bl	8005878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800544e:	f000 fd3b 	bl	8005ec8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005454:	4618      	mov	r0, r3
 8005456:	3738      	adds	r7, #56	; 0x38
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b090      	sub	sp, #64	; 0x40
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <xQueueGenericSendFromISR+0x3c>
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <xQueueGenericSendFromISR+0x40>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <xQueueGenericSendFromISR+0x42>
 80054a0:	2300      	movs	r3, #0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d103      	bne.n	80054ca <xQueueGenericSendFromISR+0x6a>
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <xQueueGenericSendFromISR+0x6e>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <xQueueGenericSendFromISR+0x70>
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	623b      	str	r3, [r7, #32]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054ea:	f001 fefd 	bl	80072e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054ee:	f3ef 8211 	mrs	r2, BASEPRI
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	61fa      	str	r2, [r7, #28]
 8005504:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005506:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005508:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <xQueueGenericSendFromISR+0xbc>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d12f      	bne.n	800557c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005532:	f000 f911 	bl	8005758 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005536:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d112      	bne.n	8005566 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d016      	beq.n	8005576 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	3324      	adds	r3, #36	; 0x24
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fed1 	bl	80062f4 <xTaskRemoveFromEventList>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00e      	beq.n	8005576 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e007      	b.n	8005576 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005566:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800556a:	3301      	adds	r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	b25a      	sxtb	r2, r3
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005576:	2301      	movs	r3, #1
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800557a:	e001      	b.n	8005580 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800557c:	2300      	movs	r3, #0
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800558a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800558c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800558e:	4618      	mov	r0, r3
 8005590:	3740      	adds	r7, #64	; 0x40
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08c      	sub	sp, #48	; 0x30
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <xQueueReceive+0x30>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	623b      	str	r3, [r7, #32]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <xQueueReceive+0x3e>
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <xQueueReceive+0x42>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <xQueueReceive+0x44>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xQueueReceive+0x5e>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	61fb      	str	r3, [r7, #28]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055f6:	f001 f83b 	bl	8006670 <xTaskGetSchedulerState>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <xQueueReceive+0x6e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <xQueueReceive+0x72>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <xQueueReceive+0x74>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <xQueueReceive+0x8e>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	61bb      	str	r3, [r7, #24]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005626:	f001 fd7d 	bl	8007124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01f      	beq.n	8005676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563a:	f000 f8f7 	bl	800582c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	1e5a      	subs	r2, r3, #1
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00f      	beq.n	800566e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	3310      	adds	r3, #16
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fe4e 	bl	80062f4 <xTaskRemoveFromEventList>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800565e:	4b3d      	ldr	r3, [pc, #244]	; (8005754 <xQueueReceive+0x1bc>)
 8005660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800566e:	f001 fd89 	bl	8007184 <vPortExitCritical>
				return pdPASS;
 8005672:	2301      	movs	r3, #1
 8005674:	e069      	b.n	800574a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d103      	bne.n	8005684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800567c:	f001 fd82 	bl	8007184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005680:	2300      	movs	r3, #0
 8005682:	e062      	b.n	800574a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800568a:	f107 0310 	add.w	r3, r7, #16
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fe94 	bl	80063bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005698:	f001 fd74 	bl	8007184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800569c:	f000 fc06 	bl	8005eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056a0:	f001 fd40 	bl	8007124 <vPortEnterCritical>
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d103      	bne.n	80056ba <xQueueReceive+0x122>
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c0:	b25b      	sxtb	r3, r3
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d103      	bne.n	80056d0 <xQueueReceive+0x138>
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d0:	f001 fd58 	bl	8007184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056d4:	1d3a      	adds	r2, r7, #4
 80056d6:	f107 0310 	add.w	r3, r7, #16
 80056da:	4611      	mov	r1, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fe83 	bl	80063e8 <xTaskCheckForTimeOut>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d123      	bne.n	8005730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ea:	f000 f917 	bl	800591c <prvIsQueueEmpty>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d017      	beq.n	8005724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fda9 	bl	8006254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005704:	f000 f8b8 	bl	8005878 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005708:	f000 fbde 	bl	8005ec8 <xTaskResumeAll>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d189      	bne.n	8005626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <xQueueReceive+0x1bc>)
 8005714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	e780      	b.n	8005626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005726:	f000 f8a7 	bl	8005878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800572a:	f000 fbcd 	bl	8005ec8 <xTaskResumeAll>
 800572e:	e77a      	b.n	8005626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005732:	f000 f8a1 	bl	8005878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005736:	f000 fbc7 	bl	8005ec8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800573a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573c:	f000 f8ee 	bl	800591c <prvIsQueueEmpty>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	f43f af6f 	beq.w	8005626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800574a:	4618      	mov	r0, r3
 800574c:	3730      	adds	r7, #48	; 0x30
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	e000ed04 	.word	0xe000ed04

08005758 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d14d      	bne.n	800581a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 ff92 	bl	80066ac <xTaskPriorityDisinherit>
 8005788:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	e043      	b.n	800581a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d119      	bne.n	80057cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6858      	ldr	r0, [r3, #4]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	461a      	mov	r2, r3
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	f002 f824 	bl	80077f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	441a      	add	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d32b      	bcc.n	800581a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	e026      	b.n	800581a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	68d8      	ldr	r0, [r3, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	461a      	mov	r2, r3
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	f002 f80a 	bl	80077f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	425b      	negs	r3, r3
 80057e6:	441a      	add	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d207      	bcs.n	8005808 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	425b      	negs	r3, r3
 8005802:	441a      	add	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d105      	bne.n	800581a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3b01      	subs	r3, #1
 8005818:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005822:	697b      	ldr	r3, [r7, #20]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d018      	beq.n	8005870 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	441a      	add	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	429a      	cmp	r2, r3
 8005856:	d303      	bcc.n	8005860 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68d9      	ldr	r1, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	461a      	mov	r2, r3
 800586a:	6838      	ldr	r0, [r7, #0]
 800586c:	f001 ffc0 	bl	80077f0 <memcpy>
	}
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005880:	f001 fc50 	bl	8007124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800588a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800588c:	e011      	b.n	80058b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d012      	beq.n	80058bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3324      	adds	r3, #36	; 0x24
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fd2a 	bl	80062f4 <xTaskRemoveFromEventList>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058a6:	f000 fe01 	bl	80064ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	dce9      	bgt.n	800588e <prvUnlockQueue+0x16>
 80058ba:	e000      	b.n	80058be <prvUnlockQueue+0x46>
					break;
 80058bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058c6:	f001 fc5d 	bl	8007184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058ca:	f001 fc2b 	bl	8007124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058d6:	e011      	b.n	80058fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d012      	beq.n	8005906 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3310      	adds	r3, #16
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fd05 	bl	80062f4 <xTaskRemoveFromEventList>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058f0:	f000 fddc 	bl	80064ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005900:	2b00      	cmp	r3, #0
 8005902:	dce9      	bgt.n	80058d8 <prvUnlockQueue+0x60>
 8005904:	e000      	b.n	8005908 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005906:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	22ff      	movs	r2, #255	; 0xff
 800590c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005910:	f001 fc38 	bl	8007184 <vPortExitCritical>
}
 8005914:	bf00      	nop
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005924:	f001 fbfe 	bl	8007124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005930:	2301      	movs	r3, #1
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e001      	b.n	800593a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800593a:	f001 fc23 	bl	8007184 <vPortExitCritical>

	return xReturn;
 800593e:	68fb      	ldr	r3, [r7, #12]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005950:	f001 fbe8 	bl	8007124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	429a      	cmp	r2, r3
 800595e:	d102      	bne.n	8005966 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005960:	2301      	movs	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e001      	b.n	800596a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800596a:	f001 fc0b 	bl	8007184 <vPortExitCritical>

	return xReturn;
 800596e:	68fb      	ldr	r3, [r7, #12]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	e014      	b.n	80059b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005988:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <vQueueAddToRegistry+0x50>)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10b      	bne.n	80059ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005994:	490c      	ldr	r1, [pc, #48]	; (80059c8 <vQueueAddToRegistry+0x50>)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800599e:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <vQueueAddToRegistry+0x50>)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059aa:	e006      	b.n	80059ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b07      	cmp	r3, #7
 80059b6:	d9e7      	bls.n	8005988 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	200008e4 	.word	0x200008e4

080059cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059dc:	f001 fba2 	bl	8007124 <vPortEnterCritical>
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059e6:	b25b      	sxtb	r3, r3
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d103      	bne.n	80059f6 <vQueueWaitForMessageRestricted+0x2a>
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059fc:	b25b      	sxtb	r3, r3
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d103      	bne.n	8005a0c <vQueueWaitForMessageRestricted+0x40>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a0c:	f001 fbba 	bl	8007184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	3324      	adds	r3, #36	; 0x24
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fc3b 	bl	800629c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a26:	6978      	ldr	r0, [r7, #20]
 8005a28:	f7ff ff26 	bl	8005878 <prvUnlockQueue>
	}
 8005a2c:	bf00      	nop
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08e      	sub	sp, #56	; 0x38
 8005a38:	af04      	add	r7, sp, #16
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	623b      	str	r3, [r7, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <xTaskCreateStatic+0x46>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	61fb      	str	r3, [r7, #28]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a7a:	235c      	movs	r3, #92	; 0x5c
 8005a7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b5c      	cmp	r3, #92	; 0x5c
 8005a82:	d00a      	beq.n	8005a9a <xTaskCreateStatic+0x66>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	61bb      	str	r3, [r7, #24]
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01e      	beq.n	8005ae0 <xTaskCreateStatic+0xac>
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01b      	beq.n	8005ae0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005aba:	2300      	movs	r3, #0
 8005abc:	9303      	str	r3, [sp, #12]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	f107 0314 	add.w	r3, r7, #20
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f850 	bl	8005b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ada:	f000 f8dd 	bl	8005c98 <prvAddNewTaskToReadyList>
 8005ade:	e001      	b.n	8005ae4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ae4:	697b      	ldr	r3, [r7, #20]
	}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3728      	adds	r7, #40	; 0x28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b08c      	sub	sp, #48	; 0x30
 8005af2:	af04      	add	r7, sp, #16
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	603b      	str	r3, [r7, #0]
 8005afa:	4613      	mov	r3, r2
 8005afc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fc30 	bl	8007368 <pvPortMalloc>
 8005b08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00e      	beq.n	8005b2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b10:	205c      	movs	r0, #92	; 0x5c
 8005b12:	f001 fc29 	bl	8007368 <pvPortMalloc>
 8005b16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
 8005b24:	e005      	b.n	8005b32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	f001 fcea 	bl	8007500 <vPortFree>
 8005b2c:	e001      	b.n	8005b32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d017      	beq.n	8005b68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b40:	88fa      	ldrh	r2, [r7, #6]
 8005b42:	2300      	movs	r3, #0
 8005b44:	9303      	str	r3, [sp, #12]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	9302      	str	r3, [sp, #8]
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f80e 	bl	8005b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b5c:	69f8      	ldr	r0, [r7, #28]
 8005b5e:	f000 f89b 	bl	8005c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b62:	2301      	movs	r3, #1
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	e002      	b.n	8005b6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	461a      	mov	r2, r3
 8005b90:	21a5      	movs	r1, #165	; 0xa5
 8005b92:	f001 fe3b 	bl	800780c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f023 0307 	bic.w	r3, r3, #7
 8005bae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	617b      	str	r3, [r7, #20]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01f      	beq.n	8005c16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e012      	b.n	8005c02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	7819      	ldrb	r1, [r3, #0]
 8005be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	3334      	adds	r3, #52	; 0x34
 8005bec:	460a      	mov	r2, r1
 8005bee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d006      	beq.n	8005c0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b0f      	cmp	r3, #15
 8005c06:	d9e9      	bls.n	8005bdc <prvInitialiseNewTask+0x64>
 8005c08:	e000      	b.n	8005c0c <prvInitialiseNewTask+0x94>
			{
				break;
 8005c0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c14:	e003      	b.n	8005c1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	2b37      	cmp	r3, #55	; 0x37
 8005c22:	d901      	bls.n	8005c28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c24:	2337      	movs	r3, #55	; 0x37
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	2200      	movs	r2, #0
 8005c38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff f978 	bl	8004f34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	3318      	adds	r3, #24
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff f973 	bl	8004f34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	2200      	movs	r2, #0
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	69b8      	ldr	r0, [r7, #24]
 8005c78:	f001 f928 	bl	8006ecc <pxPortInitialiseStack>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c8e:	bf00      	nop
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ca0:	f001 fa40 	bl	8007124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ca4:	4b2d      	ldr	r3, [pc, #180]	; (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cae:	4b2c      	ldr	r3, [pc, #176]	; (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cb6:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cbc:	4b27      	ldr	r3, [pc, #156]	; (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d110      	bne.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cc4:	f000 fc16 	bl	80064f4 <prvInitialiseTaskLists>
 8005cc8:	e00d      	b.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cca:	4b26      	ldr	r3, [pc, #152]	; (8005d64 <prvAddNewTaskToReadyList+0xcc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cd2:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d802      	bhi.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ce0:	4a1f      	ldr	r2, [pc, #124]	; (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ce6:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <prvAddNewTaskToReadyList+0xd0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3301      	adds	r3, #1
 8005cec:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <prvAddNewTaskToReadyList+0xd0>)
 8005cee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <prvAddNewTaskToReadyList+0xd0>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <prvAddNewTaskToReadyList+0xd4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <prvAddNewTaskToReadyList+0x74>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	4a18      	ldr	r2, [pc, #96]	; (8005d6c <prvAddNewTaskToReadyList+0xd4>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <prvAddNewTaskToReadyList+0xd8>)
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f7ff f913 	bl	8004f4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d28:	f001 fa2c 	bl	8007184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <prvAddNewTaskToReadyList+0xcc>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00e      	beq.n	8005d52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d207      	bcs.n	8005d52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <prvAddNewTaskToReadyList+0xdc>)
 8005d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000df8 	.word	0x20000df8
 8005d60:	20000924 	.word	0x20000924
 8005d64:	20000e04 	.word	0x20000e04
 8005d68:	20000e14 	.word	0x20000e14
 8005d6c:	20000e00 	.word	0x20000e00
 8005d70:	20000928 	.word	0x20000928
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d017      	beq.n	8005dba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d8a:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <vTaskDelay+0x60>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <vTaskDelay+0x30>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005da8:	f000 f880 	bl	8005eac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dac:	2100      	movs	r1, #0
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fcea 	bl	8006788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005db4:	f000 f888 	bl	8005ec8 <xTaskResumeAll>
 8005db8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d107      	bne.n	8005dd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <vTaskDelay+0x64>)
 8005dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000e20 	.word	0x20000e20
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dee:	463a      	mov	r2, r7
 8005df0:	1d39      	adds	r1, r7, #4
 8005df2:	f107 0308 	add.w	r3, r7, #8
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff f848 	bl	8004e8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	9202      	str	r2, [sp, #8]
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	2300      	movs	r3, #0
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	460a      	mov	r2, r1
 8005e0e:	4921      	ldr	r1, [pc, #132]	; (8005e94 <vTaskStartScheduler+0xb4>)
 8005e10:	4821      	ldr	r0, [pc, #132]	; (8005e98 <vTaskStartScheduler+0xb8>)
 8005e12:	f7ff fe0f 	bl	8005a34 <xTaskCreateStatic>
 8005e16:	4603      	mov	r3, r0
 8005e18:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <vTaskStartScheduler+0xbc>)
 8005e1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e1c:	4b1f      	ldr	r3, [pc, #124]	; (8005e9c <vTaskStartScheduler+0xbc>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	e001      	b.n	8005e2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d102      	bne.n	8005e3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e34:	f000 fcfc 	bl	8006830 <xTimerCreateTimerTask>
 8005e38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d116      	bne.n	8005e6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	613b      	str	r3, [r7, #16]
}
 8005e52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <vTaskStartScheduler+0xc0>)
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <vTaskStartScheduler+0xc4>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e62:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <vTaskStartScheduler+0xc8>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e68:	f001 f8ba 	bl	8006fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e6c:	e00e      	b.n	8005e8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d10a      	bne.n	8005e8c <vTaskStartScheduler+0xac>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	60fb      	str	r3, [r7, #12]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <vTaskStartScheduler+0xaa>
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	08008110 	.word	0x08008110
 8005e98:	080064c5 	.word	0x080064c5
 8005e9c:	20000e1c 	.word	0x20000e1c
 8005ea0:	20000e18 	.word	0x20000e18
 8005ea4:	20000e04 	.word	0x20000e04
 8005ea8:	20000dfc 	.word	0x20000dfc

08005eac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <vTaskSuspendAll+0x18>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	4a03      	ldr	r2, [pc, #12]	; (8005ec4 <vTaskSuspendAll+0x18>)
 8005eb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eba:	bf00      	nop
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	20000e20 	.word	0x20000e20

08005ec8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ed6:	4b42      	ldr	r3, [pc, #264]	; (8005fe0 <xTaskResumeAll+0x118>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	603b      	str	r3, [r7, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ef4:	f001 f916 	bl	8007124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ef8:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <xTaskResumeAll+0x118>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	4a38      	ldr	r2, [pc, #224]	; (8005fe0 <xTaskResumeAll+0x118>)
 8005f00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f02:	4b37      	ldr	r3, [pc, #220]	; (8005fe0 <xTaskResumeAll+0x118>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d162      	bne.n	8005fd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <xTaskResumeAll+0x11c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d05e      	beq.n	8005fd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f12:	e02f      	b.n	8005f74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f14:	4b34      	ldr	r3, [pc, #208]	; (8005fe8 <xTaskResumeAll+0x120>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3318      	adds	r3, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff f871 	bl	8005008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff f86c 	bl	8005008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f34:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <xTaskResumeAll+0x124>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d903      	bls.n	8005f44 <xTaskResumeAll+0x7c>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	4a2a      	ldr	r2, [pc, #168]	; (8005fec <xTaskResumeAll+0x124>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <xTaskResumeAll+0x128>)
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f7fe fff7 	bl	8004f4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <xTaskResumeAll+0x12c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d302      	bcc.n	8005f74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f6e:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <xTaskResumeAll+0x130>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f74:	4b1c      	ldr	r3, [pc, #112]	; (8005fe8 <xTaskResumeAll+0x120>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1cb      	bne.n	8005f14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f82:	f000 fb55 	bl	8006630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <xTaskResumeAll+0x134>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d010      	beq.n	8005fb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f92:	f000 f847 	bl	8006024 <xTaskIncrementTick>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f9c:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <xTaskResumeAll+0x130>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1f1      	bne.n	8005f92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <xTaskResumeAll+0x134>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <xTaskResumeAll+0x130>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <xTaskResumeAll+0x138>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fd0:	f001 f8d8 	bl	8007184 <vPortExitCritical>

	return xAlreadyYielded;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000e20 	.word	0x20000e20
 8005fe4:	20000df8 	.word	0x20000df8
 8005fe8:	20000db8 	.word	0x20000db8
 8005fec:	20000e00 	.word	0x20000e00
 8005ff0:	20000928 	.word	0x20000928
 8005ff4:	20000924 	.word	0x20000924
 8005ff8:	20000e0c 	.word	0x20000e0c
 8005ffc:	20000e08 	.word	0x20000e08
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <xTaskGetTickCount+0x1c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006010:	687b      	ldr	r3, [r7, #4]
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000dfc 	.word	0x20000dfc

08006024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800602e:	4b4f      	ldr	r3, [pc, #316]	; (800616c <xTaskIncrementTick+0x148>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 808f 	bne.w	8006156 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006038:	4b4d      	ldr	r3, [pc, #308]	; (8006170 <xTaskIncrementTick+0x14c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006040:	4a4b      	ldr	r2, [pc, #300]	; (8006170 <xTaskIncrementTick+0x14c>)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d120      	bne.n	800608e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800604c:	4b49      	ldr	r3, [pc, #292]	; (8006174 <xTaskIncrementTick+0x150>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <xTaskIncrementTick+0x48>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	603b      	str	r3, [r7, #0]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xTaskIncrementTick+0x46>
 800606c:	4b41      	ldr	r3, [pc, #260]	; (8006174 <xTaskIncrementTick+0x150>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	4b41      	ldr	r3, [pc, #260]	; (8006178 <xTaskIncrementTick+0x154>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a3f      	ldr	r2, [pc, #252]	; (8006174 <xTaskIncrementTick+0x150>)
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	4a3f      	ldr	r2, [pc, #252]	; (8006178 <xTaskIncrementTick+0x154>)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	4b3e      	ldr	r3, [pc, #248]	; (800617c <xTaskIncrementTick+0x158>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a3d      	ldr	r2, [pc, #244]	; (800617c <xTaskIncrementTick+0x158>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	f000 fad1 	bl	8006630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800608e:	4b3c      	ldr	r3, [pc, #240]	; (8006180 <xTaskIncrementTick+0x15c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	429a      	cmp	r2, r3
 8006096:	d349      	bcc.n	800612c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006098:	4b36      	ldr	r3, [pc, #216]	; (8006174 <xTaskIncrementTick+0x150>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d104      	bne.n	80060ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a2:	4b37      	ldr	r3, [pc, #220]	; (8006180 <xTaskIncrementTick+0x15c>)
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295
 80060a8:	601a      	str	r2, [r3, #0]
					break;
 80060aa:	e03f      	b.n	800612c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ac:	4b31      	ldr	r3, [pc, #196]	; (8006174 <xTaskIncrementTick+0x150>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d203      	bcs.n	80060cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060c4:	4a2e      	ldr	r2, [pc, #184]	; (8006180 <xTaskIncrementTick+0x15c>)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060ca:	e02f      	b.n	800612c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe ff99 	bl	8005008 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	3318      	adds	r3, #24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe ff90 	bl	8005008 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	4b25      	ldr	r3, [pc, #148]	; (8006184 <xTaskIncrementTick+0x160>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <xTaskIncrementTick+0xd8>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a22      	ldr	r2, [pc, #136]	; (8006184 <xTaskIncrementTick+0x160>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <xTaskIncrementTick+0x164>)
 800610a:	441a      	add	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe ff1b 	bl	8004f4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611c:	4b1b      	ldr	r3, [pc, #108]	; (800618c <xTaskIncrementTick+0x168>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	429a      	cmp	r2, r3
 8006124:	d3b8      	bcc.n	8006098 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800612a:	e7b5      	b.n	8006098 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800612c:	4b17      	ldr	r3, [pc, #92]	; (800618c <xTaskIncrementTick+0x168>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	4915      	ldr	r1, [pc, #84]	; (8006188 <xTaskIncrementTick+0x164>)
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d901      	bls.n	8006148 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <xTaskIncrementTick+0x16c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e004      	b.n	8006160 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <xTaskIncrementTick+0x170>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3301      	adds	r3, #1
 800615c:	4a0d      	ldr	r2, [pc, #52]	; (8006194 <xTaskIncrementTick+0x170>)
 800615e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006160:	697b      	ldr	r3, [r7, #20]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000e20 	.word	0x20000e20
 8006170:	20000dfc 	.word	0x20000dfc
 8006174:	20000db0 	.word	0x20000db0
 8006178:	20000db4 	.word	0x20000db4
 800617c:	20000e10 	.word	0x20000e10
 8006180:	20000e18 	.word	0x20000e18
 8006184:	20000e00 	.word	0x20000e00
 8006188:	20000928 	.word	0x20000928
 800618c:	20000924 	.word	0x20000924
 8006190:	20000e0c 	.word	0x20000e0c
 8006194:	20000e08 	.word	0x20000e08

08006198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800619e:	4b28      	ldr	r3, [pc, #160]	; (8006240 <vTaskSwitchContext+0xa8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061a6:	4b27      	ldr	r3, [pc, #156]	; (8006244 <vTaskSwitchContext+0xac>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061ac:	e041      	b.n	8006232 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80061ae:	4b25      	ldr	r3, [pc, #148]	; (8006244 <vTaskSwitchContext+0xac>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b4:	4b24      	ldr	r3, [pc, #144]	; (8006248 <vTaskSwitchContext+0xb0>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	e010      	b.n	80061de <vTaskSwitchContext+0x46>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	607b      	str	r3, [r7, #4]
}
 80061d4:	bf00      	nop
 80061d6:	e7fe      	b.n	80061d6 <vTaskSwitchContext+0x3e>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b01      	subs	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	491b      	ldr	r1, [pc, #108]	; (800624c <vTaskSwitchContext+0xb4>)
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0e4      	beq.n	80061bc <vTaskSwitchContext+0x24>
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <vTaskSwitchContext+0xb4>)
 80061fe:	4413      	add	r3, r2
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	605a      	str	r2, [r3, #4]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	3308      	adds	r3, #8
 8006214:	429a      	cmp	r2, r3
 8006216:	d104      	bne.n	8006222 <vTaskSwitchContext+0x8a>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	605a      	str	r2, [r3, #4]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <vTaskSwitchContext+0xb8>)
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	4a06      	ldr	r2, [pc, #24]	; (8006248 <vTaskSwitchContext+0xb0>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6013      	str	r3, [r2, #0]
}
 8006232:	bf00      	nop
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000e20 	.word	0x20000e20
 8006244:	20000e0c 	.word	0x20000e0c
 8006248:	20000e00 	.word	0x20000e00
 800624c:	20000928 	.word	0x20000928
 8006250:	20000924 	.word	0x20000924

08006254 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <vTaskPlaceOnEventList+0x44>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3318      	adds	r3, #24
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fe fe87 	bl	8004f96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006288:	2101      	movs	r1, #1
 800628a:	6838      	ldr	r0, [r7, #0]
 800628c:	f000 fa7c 	bl	8006788 <prvAddCurrentTaskToDelayedList>
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000924 	.word	0x20000924

0800629c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	617b      	str	r3, [r7, #20]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062c4:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3318      	adds	r3, #24
 80062ca:	4619      	mov	r1, r3
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7fe fe3e 	bl	8004f4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295
 80062dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	68b8      	ldr	r0, [r7, #8]
 80062e2:	f000 fa51 	bl	8006788 <prvAddCurrentTaskToDelayedList>
	}
 80062e6:	bf00      	nop
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000924 	.word	0x20000924

080062f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	60fb      	str	r3, [r7, #12]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	3318      	adds	r3, #24
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fe6f 	bl	8005008 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800632a:	4b1e      	ldr	r3, [pc, #120]	; (80063a4 <xTaskRemoveFromEventList+0xb0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d11d      	bne.n	800636e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fe66 	bl	8005008 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <xTaskRemoveFromEventList+0xb4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d903      	bls.n	8006350 <xTaskRemoveFromEventList+0x5c>
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <xTaskRemoveFromEventList+0xb4>)
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4a13      	ldr	r2, [pc, #76]	; (80063ac <xTaskRemoveFromEventList+0xb8>)
 800635e:	441a      	add	r2, r3
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7fe fdf1 	bl	8004f4e <vListInsertEnd>
 800636c:	e005      	b.n	800637a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	3318      	adds	r3, #24
 8006372:	4619      	mov	r1, r3
 8006374:	480e      	ldr	r0, [pc, #56]	; (80063b0 <xTaskRemoveFromEventList+0xbc>)
 8006376:	f7fe fdea 	bl	8004f4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <xTaskRemoveFromEventList+0xc0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	429a      	cmp	r2, r3
 8006386:	d905      	bls.n	8006394 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006388:	2301      	movs	r3, #1
 800638a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <xTaskRemoveFromEventList+0xc4>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e001      	b.n	8006398 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006398:	697b      	ldr	r3, [r7, #20]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000e20 	.word	0x20000e20
 80063a8:	20000e00 	.word	0x20000e00
 80063ac:	20000928 	.word	0x20000928
 80063b0:	20000db8 	.word	0x20000db8
 80063b4:	20000924 	.word	0x20000924
 80063b8:	20000e0c 	.word	0x20000e0c

080063bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063c4:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <vTaskInternalSetTimeOutState+0x24>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <vTaskInternalSetTimeOutState+0x28>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	605a      	str	r2, [r3, #4]
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20000e10 	.word	0x20000e10
 80063e4:	20000dfc 	.word	0x20000dfc

080063e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	613b      	str	r3, [r7, #16]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60fb      	str	r3, [r7, #12]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800642a:	f000 fe7b 	bl	8007124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800642e:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <xTaskCheckForTimeOut+0xbc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d102      	bne.n	800644e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	e023      	b.n	8006496 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <xTaskCheckForTimeOut+0xc0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d007      	beq.n	800646a <xTaskCheckForTimeOut+0x82>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e015      	b.n	8006496 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	429a      	cmp	r2, r3
 8006472:	d20b      	bcs.n	800648c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	1ad2      	subs	r2, r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ff9b 	bl	80063bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	e004      	b.n	8006496 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006492:	2301      	movs	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006496:	f000 fe75 	bl	8007184 <vPortExitCritical>

	return xReturn;
 800649a:	69fb      	ldr	r3, [r7, #28]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000dfc 	.word	0x20000dfc
 80064a8:	20000e10 	.word	0x20000e10

080064ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064b0:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <vTaskMissedYield+0x14>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
}
 80064b6:	bf00      	nop
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	20000e0c 	.word	0x20000e0c

080064c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064cc:	f000 f852 	bl	8006574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <prvIdleTask+0x28>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d9f9      	bls.n	80064cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <prvIdleTask+0x2c>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064e8:	e7f0      	b.n	80064cc <prvIdleTask+0x8>
 80064ea:	bf00      	nop
 80064ec:	20000928 	.word	0x20000928
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064fa:	2300      	movs	r3, #0
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	e00c      	b.n	800651a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4a12      	ldr	r2, [pc, #72]	; (8006554 <prvInitialiseTaskLists+0x60>)
 800650c:	4413      	add	r3, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe fcf0 	bl	8004ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3301      	adds	r3, #1
 8006518:	607b      	str	r3, [r7, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b37      	cmp	r3, #55	; 0x37
 800651e:	d9ef      	bls.n	8006500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006520:	480d      	ldr	r0, [pc, #52]	; (8006558 <prvInitialiseTaskLists+0x64>)
 8006522:	f7fe fce7 	bl	8004ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006526:	480d      	ldr	r0, [pc, #52]	; (800655c <prvInitialiseTaskLists+0x68>)
 8006528:	f7fe fce4 	bl	8004ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800652c:	480c      	ldr	r0, [pc, #48]	; (8006560 <prvInitialiseTaskLists+0x6c>)
 800652e:	f7fe fce1 	bl	8004ef4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006532:	480c      	ldr	r0, [pc, #48]	; (8006564 <prvInitialiseTaskLists+0x70>)
 8006534:	f7fe fcde 	bl	8004ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006538:	480b      	ldr	r0, [pc, #44]	; (8006568 <prvInitialiseTaskLists+0x74>)
 800653a:	f7fe fcdb 	bl	8004ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <prvInitialiseTaskLists+0x78>)
 8006540:	4a05      	ldr	r2, [pc, #20]	; (8006558 <prvInitialiseTaskLists+0x64>)
 8006542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006544:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <prvInitialiseTaskLists+0x7c>)
 8006546:	4a05      	ldr	r2, [pc, #20]	; (800655c <prvInitialiseTaskLists+0x68>)
 8006548:	601a      	str	r2, [r3, #0]
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000928 	.word	0x20000928
 8006558:	20000d88 	.word	0x20000d88
 800655c:	20000d9c 	.word	0x20000d9c
 8006560:	20000db8 	.word	0x20000db8
 8006564:	20000dcc 	.word	0x20000dcc
 8006568:	20000de4 	.word	0x20000de4
 800656c:	20000db0 	.word	0x20000db0
 8006570:	20000db4 	.word	0x20000db4

08006574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800657a:	e019      	b.n	80065b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800657c:	f000 fdd2 	bl	8007124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006580:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <prvCheckTasksWaitingTermination+0x50>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe fd3b 	bl	8005008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006592:	4b0d      	ldr	r3, [pc, #52]	; (80065c8 <prvCheckTasksWaitingTermination+0x54>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3b01      	subs	r3, #1
 8006598:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <prvCheckTasksWaitingTermination+0x54>)
 800659a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <prvCheckTasksWaitingTermination+0x58>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <prvCheckTasksWaitingTermination+0x58>)
 80065a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065a6:	f000 fded 	bl	8007184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f810 	bl	80065d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065b0:	4b06      	ldr	r3, [pc, #24]	; (80065cc <prvCheckTasksWaitingTermination+0x58>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e1      	bne.n	800657c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000dcc 	.word	0x20000dcc
 80065c8:	20000df8 	.word	0x20000df8
 80065cc:	20000de0 	.word	0x20000de0

080065d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 ff8a 	bl	8007500 <vPortFree>
				vPortFree( pxTCB );
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 ff87 	bl	8007500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065f2:	e018      	b.n	8006626 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d103      	bne.n	8006606 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 ff7e 	bl	8007500 <vPortFree>
	}
 8006604:	e00f      	b.n	8006626 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800660c:	2b02      	cmp	r3, #2
 800660e:	d00a      	beq.n	8006626 <prvDeleteTCB+0x56>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	60fb      	str	r3, [r7, #12]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <prvDeleteTCB+0x54>
	}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <prvResetNextTaskUnblockTime+0x38>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <prvResetNextTaskUnblockTime+0x3c>)
 8006642:	f04f 32ff 	mov.w	r2, #4294967295
 8006646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006648:	e008      	b.n	800665c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <prvResetNextTaskUnblockTime+0x38>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	4a04      	ldr	r2, [pc, #16]	; (800666c <prvResetNextTaskUnblockTime+0x3c>)
 800665a:	6013      	str	r3, [r2, #0]
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	20000db0 	.word	0x20000db0
 800666c:	20000e18 	.word	0x20000e18

08006670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006676:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <xTaskGetSchedulerState+0x34>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800667e:	2301      	movs	r3, #1
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	e008      	b.n	8006696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006684:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <xTaskGetSchedulerState+0x38>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800668c:	2302      	movs	r3, #2
 800668e:	607b      	str	r3, [r7, #4]
 8006690:	e001      	b.n	8006696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006696:	687b      	ldr	r3, [r7, #4]
	}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	20000e04 	.word	0x20000e04
 80066a8:	20000e20 	.word	0x20000e20

080066ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d056      	beq.n	8006770 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066c2:	4b2e      	ldr	r3, [pc, #184]	; (800677c <xTaskPriorityDisinherit+0xd0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d00a      	beq.n	80066e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	60bb      	str	r3, [r7, #8]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006704:	1e5a      	subs	r2, r3, #1
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006712:	429a      	cmp	r2, r3
 8006714:	d02c      	beq.n	8006770 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671a:	2b00      	cmp	r3, #0
 800671c:	d128      	bne.n	8006770 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3304      	adds	r3, #4
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fc70 	bl	8005008 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006740:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <xTaskPriorityDisinherit+0xd4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d903      	bls.n	8006750 <xTaskPriorityDisinherit+0xa4>
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	4a0c      	ldr	r2, [pc, #48]	; (8006780 <xTaskPriorityDisinherit+0xd4>)
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4a09      	ldr	r2, [pc, #36]	; (8006784 <xTaskPriorityDisinherit+0xd8>)
 800675e:	441a      	add	r2, r3
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f7fe fbf1 	bl	8004f4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800676c:	2301      	movs	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006770:	697b      	ldr	r3, [r7, #20]
	}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000924 	.word	0x20000924
 8006780:	20000e00 	.word	0x20000e00
 8006784:	20000928 	.word	0x20000928

08006788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <prvAddCurrentTaskToDelayedList+0x90>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006798:	4b20      	ldr	r3, [pc, #128]	; (800681c <prvAddCurrentTaskToDelayedList+0x94>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3304      	adds	r3, #4
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe fc32 	bl	8005008 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d10a      	bne.n	80067c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067b2:	4b1a      	ldr	r3, [pc, #104]	; (800681c <prvAddCurrentTaskToDelayedList+0x94>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4819      	ldr	r0, [pc, #100]	; (8006820 <prvAddCurrentTaskToDelayedList+0x98>)
 80067bc:	f7fe fbc7 	bl	8004f4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067c0:	e026      	b.n	8006810 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4413      	add	r3, r2
 80067c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067ca:	4b14      	ldr	r3, [pc, #80]	; (800681c <prvAddCurrentTaskToDelayedList+0x94>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d209      	bcs.n	80067ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4b0f      	ldr	r3, [pc, #60]	; (800681c <prvAddCurrentTaskToDelayedList+0x94>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f7fe fbd5 	bl	8004f96 <vListInsert>
}
 80067ec:	e010      	b.n	8006810 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ee:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <prvAddCurrentTaskToDelayedList+0x94>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f7fe fbcb 	bl	8004f96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006800:	4b0a      	ldr	r3, [pc, #40]	; (800682c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	429a      	cmp	r2, r3
 8006808:	d202      	bcs.n	8006810 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <prvAddCurrentTaskToDelayedList+0xa4>)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6013      	str	r3, [r2, #0]
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000dfc 	.word	0x20000dfc
 800681c:	20000924 	.word	0x20000924
 8006820:	20000de4 	.word	0x20000de4
 8006824:	20000db4 	.word	0x20000db4
 8006828:	20000db0 	.word	0x20000db0
 800682c:	20000e18 	.word	0x20000e18

08006830 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800683a:	f000 fb07 	bl	8006e4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800683e:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <xTimerCreateTimerTask+0x80>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d021      	beq.n	800688a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800684e:	1d3a      	adds	r2, r7, #4
 8006850:	f107 0108 	add.w	r1, r7, #8
 8006854:	f107 030c 	add.w	r3, r7, #12
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fb31 	bl	8004ec0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	9202      	str	r2, [sp, #8]
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	2302      	movs	r3, #2
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	2300      	movs	r3, #0
 800686e:	460a      	mov	r2, r1
 8006870:	4910      	ldr	r1, [pc, #64]	; (80068b4 <xTimerCreateTimerTask+0x84>)
 8006872:	4811      	ldr	r0, [pc, #68]	; (80068b8 <xTimerCreateTimerTask+0x88>)
 8006874:	f7ff f8de 	bl	8005a34 <xTaskCreateStatic>
 8006878:	4603      	mov	r3, r0
 800687a:	4a10      	ldr	r2, [pc, #64]	; (80068bc <xTimerCreateTimerTask+0x8c>)
 800687c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800687e:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <xTimerCreateTimerTask+0x8c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006886:	2301      	movs	r3, #1
 8006888:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	613b      	str	r3, [r7, #16]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068a6:	697b      	ldr	r3, [r7, #20]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000e54 	.word	0x20000e54
 80068b4:	08008118 	.word	0x08008118
 80068b8:	080069f5 	.word	0x080069f5
 80068bc:	20000e58 	.word	0x20000e58

080068c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	623b      	str	r3, [r7, #32]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068ee:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <xTimerGenericCommand+0x98>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d02a      	beq.n	800694c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b05      	cmp	r3, #5
 8006906:	dc18      	bgt.n	800693a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006908:	f7ff feb2 	bl	8006670 <xTaskGetSchedulerState>
 800690c:	4603      	mov	r3, r0
 800690e:	2b02      	cmp	r3, #2
 8006910:	d109      	bne.n	8006926 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006912:	4b11      	ldr	r3, [pc, #68]	; (8006958 <xTimerGenericCommand+0x98>)
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	f107 0110 	add.w	r1, r7, #16
 800691a:	2300      	movs	r3, #0
 800691c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800691e:	f7fe fca1 	bl	8005264 <xQueueGenericSend>
 8006922:	6278      	str	r0, [r7, #36]	; 0x24
 8006924:	e012      	b.n	800694c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006926:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <xTimerGenericCommand+0x98>)
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	f107 0110 	add.w	r1, r7, #16
 800692e:	2300      	movs	r3, #0
 8006930:	2200      	movs	r2, #0
 8006932:	f7fe fc97 	bl	8005264 <xQueueGenericSend>
 8006936:	6278      	str	r0, [r7, #36]	; 0x24
 8006938:	e008      	b.n	800694c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800693a:	4b07      	ldr	r3, [pc, #28]	; (8006958 <xTimerGenericCommand+0x98>)
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	f107 0110 	add.w	r1, r7, #16
 8006942:	2300      	movs	r3, #0
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	f7fe fd8b 	bl	8005460 <xQueueGenericSendFromISR>
 800694a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800694e:	4618      	mov	r0, r3
 8006950:	3728      	adds	r7, #40	; 0x28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000e54 	.word	0x20000e54

0800695c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af02      	add	r7, sp, #8
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006966:	4b22      	ldr	r3, [pc, #136]	; (80069f0 <prvProcessExpiredTimer+0x94>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	3304      	adds	r3, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fb47 	bl	8005008 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d022      	beq.n	80069ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	18d1      	adds	r1, r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	6978      	ldr	r0, [r7, #20]
 8006996:	f000 f8d1 	bl	8006b3c <prvInsertTimerInActiveList>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01f      	beq.n	80069e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069a0:	2300      	movs	r3, #0
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	2100      	movs	r1, #0
 80069aa:	6978      	ldr	r0, [r7, #20]
 80069ac:	f7ff ff88 	bl	80068c0 <xTimerGenericCommand>
 80069b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d113      	bne.n	80069e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	60fb      	str	r3, [r7, #12]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069d4:	f023 0301 	bic.w	r3, r3, #1
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	6978      	ldr	r0, [r7, #20]
 80069e6:	4798      	blx	r3
}
 80069e8:	bf00      	nop
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20000e4c 	.word	0x20000e4c

080069f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069fc:	f107 0308 	add.w	r3, r7, #8
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 f857 	bl	8006ab4 <prvGetNextExpireTime>
 8006a06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 f803 	bl	8006a18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a12:	f000 f8d5 	bl	8006bc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a16:	e7f1      	b.n	80069fc <prvTimerTask+0x8>

08006a18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a22:	f7ff fa43 	bl	8005eac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 f866 	bl	8006afc <prvSampleTimeNow>
 8006a30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d130      	bne.n	8006a9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <prvProcessTimerOrBlockTask+0x3c>
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d806      	bhi.n	8006a54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a46:	f7ff fa3f 	bl	8005ec8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ff85 	bl	800695c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a52:	e024      	b.n	8006a9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d008      	beq.n	8006a6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <prvProcessTimerOrBlockTask+0x90>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <prvProcessTimerOrBlockTask+0x50>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <prvProcessTimerOrBlockTask+0x52>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <prvProcessTimerOrBlockTask+0x94>)
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f7fe ffa7 	bl	80059cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a7e:	f7ff fa23 	bl	8005ec8 <xTaskResumeAll>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a88:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <prvProcessTimerOrBlockTask+0x98>)
 8006a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	f3bf 8f6f 	isb	sy
}
 8006a98:	e001      	b.n	8006a9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a9a:	f7ff fa15 	bl	8005ec8 <xTaskResumeAll>
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000e50 	.word	0x20000e50
 8006aac:	20000e54 	.word	0x20000e54
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006abc:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <prvGetNextExpireTime+0x44>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <prvGetNextExpireTime+0x16>
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	e000      	b.n	8006acc <prvGetNextExpireTime+0x18>
 8006aca:	2200      	movs	r2, #0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d105      	bne.n	8006ae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <prvGetNextExpireTime+0x44>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e001      	b.n	8006ae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000e4c 	.word	0x20000e4c

08006afc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b04:	f7ff fa7e 	bl	8006004 <xTaskGetTickCount>
 8006b08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <prvSampleTimeNow+0x3c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d205      	bcs.n	8006b20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b14:	f000 f936 	bl	8006d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b26:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <prvSampleTimeNow+0x3c>)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000e5c 	.word	0x20000e5c

08006b3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d812      	bhi.n	8006b88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	1ad2      	subs	r2, r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d302      	bcc.n	8006b76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e01b      	b.n	8006bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <prvInsertTimerInActiveList+0x7c>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f7fe fa08 	bl	8004f96 <vListInsert>
 8006b86:	e012      	b.n	8006bae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d206      	bcs.n	8006b9e <prvInsertTimerInActiveList+0x62>
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e007      	b.n	8006bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b9e:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <prvInsertTimerInActiveList+0x80>)
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4610      	mov	r0, r2
 8006baa:	f7fe f9f4 	bl	8004f96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bae:	697b      	ldr	r3, [r7, #20]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20000e50 	.word	0x20000e50
 8006bbc:	20000e4c 	.word	0x20000e4c

08006bc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	; 0x38
 8006bc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bc6:	e0ca      	b.n	8006d5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	da18      	bge.n	8006c00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	61fb      	str	r3, [r7, #28]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bf6:	6850      	ldr	r0, [r2, #4]
 8006bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfa:	6892      	ldr	r2, [r2, #8]
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f2c0 80aa 	blt.w	8006d5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	3304      	adds	r3, #4
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe f9f5 	bl	8005008 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c1e:	463b      	mov	r3, r7
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ff6b 	bl	8006afc <prvSampleTimeNow>
 8006c26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b09      	cmp	r3, #9
 8006c2c:	f200 8097 	bhi.w	8006d5e <prvProcessReceivedCommands+0x19e>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <prvProcessReceivedCommands+0x78>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c61 	.word	0x08006c61
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c61 	.word	0x08006c61
 8006c44:	08006cd5 	.word	0x08006cd5
 8006c48:	08006ce9 	.word	0x08006ce9
 8006c4c:	08006d33 	.word	0x08006d33
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c61 	.word	0x08006c61
 8006c58:	08006cd5 	.word	0x08006cd5
 8006c5c:	08006ce9 	.word	0x08006ce9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	18d1      	adds	r1, r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c80:	f7ff ff5c 	bl	8006b3c <prvInsertTimerInActiveList>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d069      	beq.n	8006d5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d05e      	beq.n	8006d5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	441a      	add	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2300      	movs	r3, #0
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb2:	f7ff fe05 	bl	80068c0 <xTimerGenericCommand>
 8006cb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d14f      	bne.n	8006d5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	61bb      	str	r3, [r7, #24]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ce6:	e03a      	b.n	8006d5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	617b      	str	r3, [r7, #20]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	18d1      	adds	r1, r2, r3
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2c:	f7ff ff06 	bl	8006b3c <prvInsertTimerInActiveList>
					break;
 8006d30:	e015      	b.n	8006d5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d103      	bne.n	8006d48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d42:	f000 fbdd 	bl	8007500 <vPortFree>
 8006d46:	e00a      	b.n	8006d5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d5a:	e000      	b.n	8006d5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <prvProcessReceivedCommands+0x1c0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	1d39      	adds	r1, r7, #4
 8006d64:	2200      	movs	r2, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fc16 	bl	8005598 <xQueueReceive>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f47f af2a 	bne.w	8006bc8 <prvProcessReceivedCommands+0x8>
	}
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	3730      	adds	r7, #48	; 0x30
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000e54 	.word	0x20000e54

08006d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d8a:	e048      	b.n	8006e1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d8c:	4b2d      	ldr	r3, [pc, #180]	; (8006e44 <prvSwitchTimerLists+0xc0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d96:	4b2b      	ldr	r3, [pc, #172]	; (8006e44 <prvSwitchTimerLists+0xc0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fe f92f 	bl	8005008 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02e      	beq.n	8006e1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d90e      	bls.n	8006df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dde:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <prvSwitchTimerLists+0xc0>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f7fe f8d4 	bl	8004f96 <vListInsert>
 8006dee:	e016      	b.n	8006e1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006df0:	2300      	movs	r3, #0
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	2300      	movs	r3, #0
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff fd60 	bl	80068c0 <xTimerGenericCommand>
 8006e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	603b      	str	r3, [r7, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <prvSwitchTimerLists+0xc0>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1b1      	bne.n	8006d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <prvSwitchTimerLists+0xc0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e2e:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <prvSwitchTimerLists+0xc4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <prvSwitchTimerLists+0xc0>)
 8006e34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e36:	4a04      	ldr	r2, [pc, #16]	; (8006e48 <prvSwitchTimerLists+0xc4>)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	6013      	str	r3, [r2, #0]
}
 8006e3c:	bf00      	nop
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000e4c 	.word	0x20000e4c
 8006e48:	20000e50 	.word	0x20000e50

08006e4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e52:	f000 f967 	bl	8007124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <prvCheckForValidListAndQueue+0x60>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d120      	bne.n	8006ea0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e5e:	4814      	ldr	r0, [pc, #80]	; (8006eb0 <prvCheckForValidListAndQueue+0x64>)
 8006e60:	f7fe f848 	bl	8004ef4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e64:	4813      	ldr	r0, [pc, #76]	; (8006eb4 <prvCheckForValidListAndQueue+0x68>)
 8006e66:	f7fe f845 	bl	8004ef4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e6a:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <prvCheckForValidListAndQueue+0x6c>)
 8006e6c:	4a10      	ldr	r2, [pc, #64]	; (8006eb0 <prvCheckForValidListAndQueue+0x64>)
 8006e6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e70:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <prvCheckForValidListAndQueue+0x70>)
 8006e72:	4a10      	ldr	r2, [pc, #64]	; (8006eb4 <prvCheckForValidListAndQueue+0x68>)
 8006e74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e76:	2300      	movs	r3, #0
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <prvCheckForValidListAndQueue+0x74>)
 8006e7c:	4a11      	ldr	r2, [pc, #68]	; (8006ec4 <prvCheckForValidListAndQueue+0x78>)
 8006e7e:	2110      	movs	r1, #16
 8006e80:	200a      	movs	r0, #10
 8006e82:	f7fe f953 	bl	800512c <xQueueGenericCreateStatic>
 8006e86:	4603      	mov	r3, r0
 8006e88:	4a08      	ldr	r2, [pc, #32]	; (8006eac <prvCheckForValidListAndQueue+0x60>)
 8006e8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e8c:	4b07      	ldr	r3, [pc, #28]	; (8006eac <prvCheckForValidListAndQueue+0x60>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <prvCheckForValidListAndQueue+0x60>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	490b      	ldr	r1, [pc, #44]	; (8006ec8 <prvCheckForValidListAndQueue+0x7c>)
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fd6c 	bl	8005978 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ea0:	f000 f970 	bl	8007184 <vPortExitCritical>
}
 8006ea4:	bf00      	nop
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000e54 	.word	0x20000e54
 8006eb0:	20000e24 	.word	0x20000e24
 8006eb4:	20000e38 	.word	0x20000e38
 8006eb8:	20000e4c 	.word	0x20000e4c
 8006ebc:	20000e50 	.word	0x20000e50
 8006ec0:	20000f00 	.word	0x20000f00
 8006ec4:	20000e60 	.word	0x20000e60
 8006ec8:	08008120 	.word	0x08008120

08006ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3b04      	subs	r3, #4
 8006edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3b04      	subs	r3, #4
 8006eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f023 0201 	bic.w	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006efc:	4a0c      	ldr	r2, [pc, #48]	; (8006f30 <pxPortInitialiseStack+0x64>)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b14      	subs	r3, #20
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3b04      	subs	r3, #4
 8006f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f06f 0202 	mvn.w	r2, #2
 8006f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3b20      	subs	r3, #32
 8006f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f22:	68fb      	ldr	r3, [r7, #12]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	08006f35 	.word	0x08006f35

08006f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <prvTaskExitError+0x54>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d00a      	beq.n	8006f5e <prvTaskExitError+0x2a>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60fb      	str	r3, [r7, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <prvTaskExitError+0x28>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60bb      	str	r3, [r7, #8]
}
 8006f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f72:	bf00      	nop
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0fc      	beq.n	8006f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	2000000c 	.word	0x2000000c
 8006f8c:	00000000 	.word	0x00000000

08006f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <pxCurrentTCBConst2>)
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	6808      	ldr	r0, [r1, #0]
 8006f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	f380 8809 	msr	PSP, r0
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8811 	msr	BASEPRI, r0
 8006faa:	4770      	bx	lr
 8006fac:	f3af 8000 	nop.w

08006fb0 <pxCurrentTCBConst2>:
 8006fb0:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop

08006fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fb8:	4808      	ldr	r0, [pc, #32]	; (8006fdc <prvPortStartFirstTask+0x24>)
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f380 8808 	msr	MSP, r0
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8814 	msr	CONTROL, r0
 8006fca:	b662      	cpsie	i
 8006fcc:	b661      	cpsie	f
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	df00      	svc	0
 8006fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fda:	bf00      	nop
 8006fdc:	e000ed08 	.word	0xe000ed08

08006fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fe6:	4b46      	ldr	r3, [pc, #280]	; (8007100 <xPortStartScheduler+0x120>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a46      	ldr	r2, [pc, #280]	; (8007104 <xPortStartScheduler+0x124>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10a      	bne.n	8007006 <xPortStartScheduler+0x26>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	613b      	str	r3, [r7, #16]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007006:	4b3e      	ldr	r3, [pc, #248]	; (8007100 <xPortStartScheduler+0x120>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a3f      	ldr	r2, [pc, #252]	; (8007108 <xPortStartScheduler+0x128>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10a      	bne.n	8007026 <xPortStartScheduler+0x46>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <xPortStartScheduler+0x12c>)
 8007028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007048:	b2da      	uxtb	r2, r3
 800704a:	4b31      	ldr	r3, [pc, #196]	; (8007110 <xPortStartScheduler+0x130>)
 800704c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800704e:	4b31      	ldr	r3, [pc, #196]	; (8007114 <xPortStartScheduler+0x134>)
 8007050:	2207      	movs	r2, #7
 8007052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007054:	e009      	b.n	800706a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007056:	4b2f      	ldr	r3, [pc, #188]	; (8007114 <xPortStartScheduler+0x134>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3b01      	subs	r3, #1
 800705c:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <xPortStartScheduler+0x134>)
 800705e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	b2db      	uxtb	r3, r3
 8007068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d0ef      	beq.n	8007056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007076:	4b27      	ldr	r3, [pc, #156]	; (8007114 <xPortStartScheduler+0x134>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1c3 0307 	rsb	r3, r3, #7
 800707e:	2b04      	cmp	r3, #4
 8007080:	d00a      	beq.n	8007098 <xPortStartScheduler+0xb8>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	60bb      	str	r3, [r7, #8]
}
 8007094:	bf00      	nop
 8007096:	e7fe      	b.n	8007096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007098:	4b1e      	ldr	r3, [pc, #120]	; (8007114 <xPortStartScheduler+0x134>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	4a1d      	ldr	r2, [pc, #116]	; (8007114 <xPortStartScheduler+0x134>)
 80070a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <xPortStartScheduler+0x134>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070aa:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <xPortStartScheduler+0x134>)
 80070ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070b6:	4b18      	ldr	r3, [pc, #96]	; (8007118 <xPortStartScheduler+0x138>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a17      	ldr	r2, [pc, #92]	; (8007118 <xPortStartScheduler+0x138>)
 80070bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <xPortStartScheduler+0x138>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a14      	ldr	r2, [pc, #80]	; (8007118 <xPortStartScheduler+0x138>)
 80070c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070ce:	f000 f8dd 	bl	800728c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070d2:	4b12      	ldr	r3, [pc, #72]	; (800711c <xPortStartScheduler+0x13c>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070d8:	f000 f8fc 	bl	80072d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070dc:	4b10      	ldr	r3, [pc, #64]	; (8007120 <xPortStartScheduler+0x140>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0f      	ldr	r2, [pc, #60]	; (8007120 <xPortStartScheduler+0x140>)
 80070e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070e8:	f7ff ff66 	bl	8006fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070ec:	f7ff f854 	bl	8006198 <vTaskSwitchContext>
	prvTaskExitError();
 80070f0:	f7ff ff20 	bl	8006f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	e000ed00 	.word	0xe000ed00
 8007104:	410fc271 	.word	0x410fc271
 8007108:	410fc270 	.word	0x410fc270
 800710c:	e000e400 	.word	0xe000e400
 8007110:	20000f50 	.word	0x20000f50
 8007114:	20000f54 	.word	0x20000f54
 8007118:	e000ed20 	.word	0xe000ed20
 800711c:	2000000c 	.word	0x2000000c
 8007120:	e000ef34 	.word	0xe000ef34

08007124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	607b      	str	r3, [r7, #4]
}
 800713c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <vPortEnterCritical+0x58>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	4a0d      	ldr	r2, [pc, #52]	; (800717c <vPortEnterCritical+0x58>)
 8007146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <vPortEnterCritical+0x58>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10f      	bne.n	8007170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <vPortEnterCritical+0x5c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <vPortEnterCritical+0x4c>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	603b      	str	r3, [r7, #0]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <vPortEnterCritical+0x4a>
	}
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	2000000c 	.word	0x2000000c
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <vPortExitCritical+0x50>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <vPortExitCritical+0x24>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	607b      	str	r3, [r7, #4]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <vPortExitCritical+0x50>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <vPortExitCritical+0x50>)
 80071b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071b2:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <vPortExitCritical+0x50>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <vPortExitCritical+0x42>
 80071ba:	2300      	movs	r3, #0
 80071bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	f383 8811 	msr	BASEPRI, r3
}
 80071c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	2000000c 	.word	0x2000000c
	...

080071e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071e0:	f3ef 8009 	mrs	r0, PSP
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	4b15      	ldr	r3, [pc, #84]	; (8007240 <pxCurrentTCBConst>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	f01e 0f10 	tst.w	lr, #16
 80071f0:	bf08      	it	eq
 80071f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	6010      	str	r0, [r2, #0]
 80071fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007204:	f380 8811 	msr	BASEPRI, r0
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f7fe ffc2 	bl	8006198 <vTaskSwitchContext>
 8007214:	f04f 0000 	mov.w	r0, #0
 8007218:	f380 8811 	msr	BASEPRI, r0
 800721c:	bc09      	pop	{r0, r3}
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	6808      	ldr	r0, [r1, #0]
 8007222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007226:	f01e 0f10 	tst.w	lr, #16
 800722a:	bf08      	it	eq
 800722c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007230:	f380 8809 	msr	PSP, r0
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w

08007240 <pxCurrentTCBConst>:
 8007240:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop

08007248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007262:	f7fe fedf 	bl	8006024 <xTaskIncrementTick>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800726c:	4b06      	ldr	r3, [pc, #24]	; (8007288 <xPortSysTickHandler+0x40>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f383 8811 	msr	BASEPRI, r3
}
 800727e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007290:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <vPortSetupTimerInterrupt+0x34>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007296:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <vPortSetupTimerInterrupt+0x38>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <vPortSetupTimerInterrupt+0x3c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a0a      	ldr	r2, [pc, #40]	; (80072cc <vPortSetupTimerInterrupt+0x40>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	099b      	lsrs	r3, r3, #6
 80072a8:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <vPortSetupTimerInterrupt+0x44>)
 80072aa:	3b01      	subs	r3, #1
 80072ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <vPortSetupTimerInterrupt+0x34>)
 80072b0:	2207      	movs	r2, #7
 80072b2:	601a      	str	r2, [r3, #0]
}
 80072b4:	bf00      	nop
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	e000e010 	.word	0xe000e010
 80072c4:	e000e018 	.word	0xe000e018
 80072c8:	20000000 	.word	0x20000000
 80072cc:	10624dd3 	.word	0x10624dd3
 80072d0:	e000e014 	.word	0xe000e014

080072d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072e4 <vPortEnableVFP+0x10>
 80072d8:	6801      	ldr	r1, [r0, #0]
 80072da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072de:	6001      	str	r1, [r0, #0]
 80072e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072e2:	bf00      	nop
 80072e4:	e000ed88 	.word	0xe000ed88

080072e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072ee:	f3ef 8305 	mrs	r3, IPSR
 80072f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b0f      	cmp	r3, #15
 80072f8:	d914      	bls.n	8007324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <vPortValidateInterruptPriority+0x70>)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007304:	4b15      	ldr	r3, [pc, #84]	; (800735c <vPortValidateInterruptPriority+0x74>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	7afa      	ldrb	r2, [r7, #11]
 800730a:	429a      	cmp	r2, r3
 800730c:	d20a      	bcs.n	8007324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007324:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <vPortValidateInterruptPriority+0x78>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800732c:	4b0d      	ldr	r3, [pc, #52]	; (8007364 <vPortValidateInterruptPriority+0x7c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d90a      	bls.n	800734a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	603b      	str	r3, [r7, #0]
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <vPortValidateInterruptPriority+0x60>
	}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	e000e3f0 	.word	0xe000e3f0
 800735c:	20000f50 	.word	0x20000f50
 8007360:	e000ed0c 	.word	0xe000ed0c
 8007364:	20000f54 	.word	0x20000f54

08007368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007370:	2300      	movs	r3, #0
 8007372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007374:	f7fe fd9a 	bl	8005eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007378:	4b5b      	ldr	r3, [pc, #364]	; (80074e8 <pvPortMalloc+0x180>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007380:	f000 f920 	bl	80075c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007384:	4b59      	ldr	r3, [pc, #356]	; (80074ec <pvPortMalloc+0x184>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 8093 	bne.w	80074b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01d      	beq.n	80073d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007398:	2208      	movs	r2, #8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d014      	beq.n	80073d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f023 0307 	bic.w	r3, r3, #7
 80073b0:	3308      	adds	r3, #8
 80073b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <pvPortMalloc+0x6c>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	617b      	str	r3, [r7, #20]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d06e      	beq.n	80074b8 <pvPortMalloc+0x150>
 80073da:	4b45      	ldr	r3, [pc, #276]	; (80074f0 <pvPortMalloc+0x188>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d869      	bhi.n	80074b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073e4:	4b43      	ldr	r3, [pc, #268]	; (80074f4 <pvPortMalloc+0x18c>)
 80073e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073e8:	4b42      	ldr	r3, [pc, #264]	; (80074f4 <pvPortMalloc+0x18c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ee:	e004      	b.n	80073fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d903      	bls.n	800740c <pvPortMalloc+0xa4>
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f1      	bne.n	80073f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800740c:	4b36      	ldr	r3, [pc, #216]	; (80074e8 <pvPortMalloc+0x180>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	429a      	cmp	r2, r3
 8007414:	d050      	beq.n	80074b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2208      	movs	r2, #8
 800741c:	4413      	add	r3, r2
 800741e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	2308      	movs	r3, #8
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	429a      	cmp	r2, r3
 8007436:	d91f      	bls.n	8007478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <pvPortMalloc+0xf8>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	613b      	str	r3, [r7, #16]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007472:	69b8      	ldr	r0, [r7, #24]
 8007474:	f000 f908 	bl	8007688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007478:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <pvPortMalloc+0x188>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <pvPortMalloc+0x188>)
 8007484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <pvPortMalloc+0x188>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	4b1b      	ldr	r3, [pc, #108]	; (80074f8 <pvPortMalloc+0x190>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d203      	bcs.n	800749a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007492:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <pvPortMalloc+0x188>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <pvPortMalloc+0x190>)
 8007498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <pvPortMalloc+0x184>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074ae:	4b13      	ldr	r3, [pc, #76]	; (80074fc <pvPortMalloc+0x194>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	4a11      	ldr	r2, [pc, #68]	; (80074fc <pvPortMalloc+0x194>)
 80074b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074b8:	f7fe fd06 	bl	8005ec8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <pvPortMalloc+0x174>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	60fb      	str	r3, [r7, #12]
}
 80074d8:	bf00      	nop
 80074da:	e7fe      	b.n	80074da <pvPortMalloc+0x172>
	return pvReturn;
 80074dc:	69fb      	ldr	r3, [r7, #28]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3728      	adds	r7, #40	; 0x28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20001b18 	.word	0x20001b18
 80074ec:	20001b2c 	.word	0x20001b2c
 80074f0:	20001b1c 	.word	0x20001b1c
 80074f4:	20001b10 	.word	0x20001b10
 80074f8:	20001b20 	.word	0x20001b20
 80074fc:	20001b24 	.word	0x20001b24

08007500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d04d      	beq.n	80075ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007512:	2308      	movs	r3, #8
 8007514:	425b      	negs	r3, r3
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4413      	add	r3, r2
 800751a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	4b24      	ldr	r3, [pc, #144]	; (80075b8 <vPortFree+0xb8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4013      	ands	r3, r2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <vPortFree+0x44>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	60fb      	str	r3, [r7, #12]
}
 8007540:	bf00      	nop
 8007542:	e7fe      	b.n	8007542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00a      	beq.n	8007562 <vPortFree+0x62>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	60bb      	str	r3, [r7, #8]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <vPortFree+0xb8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4013      	ands	r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01e      	beq.n	80075ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d11a      	bne.n	80075ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <vPortFree+0xb8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	43db      	mvns	r3, r3
 8007582:	401a      	ands	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007588:	f7fe fc90 	bl	8005eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <vPortFree+0xbc>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4413      	add	r3, r2
 8007596:	4a09      	ldr	r2, [pc, #36]	; (80075bc <vPortFree+0xbc>)
 8007598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800759a:	6938      	ldr	r0, [r7, #16]
 800759c:	f000 f874 	bl	8007688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <vPortFree+0xc0>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3301      	adds	r3, #1
 80075a6:	4a06      	ldr	r2, [pc, #24]	; (80075c0 <vPortFree+0xc0>)
 80075a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075aa:	f7fe fc8d 	bl	8005ec8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075ae:	bf00      	nop
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20001b2c 	.word	0x20001b2c
 80075bc:	20001b1c 	.word	0x20001b1c
 80075c0:	20001b28 	.word	0x20001b28

080075c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80075ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075d0:	4b27      	ldr	r3, [pc, #156]	; (8007670 <prvHeapInit+0xac>)
 80075d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00c      	beq.n	80075f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3307      	adds	r3, #7
 80075e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	4a1f      	ldr	r2, [pc, #124]	; (8007670 <prvHeapInit+0xac>)
 80075f4:	4413      	add	r3, r2
 80075f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075fc:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <prvHeapInit+0xb0>)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007602:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <prvHeapInit+0xb0>)
 8007604:	2200      	movs	r2, #0
 8007606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007610:	2208      	movs	r2, #8
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0307 	bic.w	r3, r3, #7
 800761e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4a15      	ldr	r2, [pc, #84]	; (8007678 <prvHeapInit+0xb4>)
 8007624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <prvHeapInit+0xb4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800762e:	4b12      	ldr	r3, [pc, #72]	; (8007678 <prvHeapInit+0xb4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007644:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <prvHeapInit+0xb4>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	4a0a      	ldr	r2, [pc, #40]	; (800767c <prvHeapInit+0xb8>)
 8007652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	4a09      	ldr	r2, [pc, #36]	; (8007680 <prvHeapInit+0xbc>)
 800765a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800765c:	4b09      	ldr	r3, [pc, #36]	; (8007684 <prvHeapInit+0xc0>)
 800765e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	20000f58 	.word	0x20000f58
 8007674:	20001b10 	.word	0x20001b10
 8007678:	20001b18 	.word	0x20001b18
 800767c:	20001b20 	.word	0x20001b20
 8007680:	20001b1c 	.word	0x20001b1c
 8007684:	20001b2c 	.word	0x20001b2c

08007688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007690:	4b28      	ldr	r3, [pc, #160]	; (8007734 <prvInsertBlockIntoFreeList+0xac>)
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e002      	b.n	800769c <prvInsertBlockIntoFreeList+0x14>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d8f7      	bhi.n	8007696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	4413      	add	r3, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d108      	bne.n	80076ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	441a      	add	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	441a      	add	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d118      	bne.n	8007710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <prvInsertBlockIntoFreeList+0xb0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d00d      	beq.n	8007706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	441a      	add	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	e008      	b.n	8007718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007706:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <prvInsertBlockIntoFreeList+0xb0>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	e003      	b.n	8007718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d002      	beq.n	8007726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20001b10 	.word	0x20001b10
 8007738:	20001b18 	.word	0x20001b18

0800773c <task01_function>:

int number = 0;
int countup = 1;

void task01_function()
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
//		countup = 1;
//
//	UART_int(number);
//	UART_char('\t');
//	UART_char('\n');
	osDelay(50);
 8007740:	2032      	movs	r0, #50	; 0x32
 8007742:	f7fd fb87 	bl	8004e54 <osDelay>
}
 8007746:	bf00      	nop
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <task02_function>:


void task02_function()
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
	UART_int(adc_values[0] << 2);
 8007750:	4b11      	ldr	r3, [pc, #68]	; (8007798 <task02_function+0x4c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4618      	mov	r0, r3
 8007758:	f7f8 ff1e 	bl	8000598 <UART_int>
	UART_char('\t');
 800775c:	2009      	movs	r0, #9
 800775e:	f7f8 ff09 	bl	8000574 <UART_char>

	UART_int(adc_values[1] << 2);
 8007762:	4b0d      	ldr	r3, [pc, #52]	; (8007798 <task02_function+0x4c>)
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4618      	mov	r0, r3
 800776a:	f7f8 ff15 	bl	8000598 <UART_int>
	UART_char('\t');
 800776e:	2009      	movs	r0, #9
 8007770:	f7f8 ff00 	bl	8000574 <UART_char>

	UART_int(adc_values[2] << 2);
 8007774:	4b08      	ldr	r3, [pc, #32]	; (8007798 <task02_function+0x4c>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4618      	mov	r0, r3
 800777c:	f7f8 ff0c 	bl	8000598 <UART_int>
	UART_char('\t');
 8007780:	2009      	movs	r0, #9
 8007782:	f7f8 fef7 	bl	8000574 <UART_char>
	UART_char('\n');
 8007786:	200a      	movs	r0, #10
 8007788:	f7f8 fef4 	bl	8000574 <UART_char>
	osDelay(5);
 800778c:	2005      	movs	r0, #5
 800778e:	f7fd fb61 	bl	8004e54 <osDelay>
}
 8007792:	bf00      	nop
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	200001c8 	.word	0x200001c8

0800779c <__errno>:
 800779c:	4b01      	ldr	r3, [pc, #4]	; (80077a4 <__errno+0x8>)
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000010 	.word	0x20000010

080077a8 <__libc_init_array>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	4d0d      	ldr	r5, [pc, #52]	; (80077e0 <__libc_init_array+0x38>)
 80077ac:	4c0d      	ldr	r4, [pc, #52]	; (80077e4 <__libc_init_array+0x3c>)
 80077ae:	1b64      	subs	r4, r4, r5
 80077b0:	10a4      	asrs	r4, r4, #2
 80077b2:	2600      	movs	r6, #0
 80077b4:	42a6      	cmp	r6, r4
 80077b6:	d109      	bne.n	80077cc <__libc_init_array+0x24>
 80077b8:	4d0b      	ldr	r5, [pc, #44]	; (80077e8 <__libc_init_array+0x40>)
 80077ba:	4c0c      	ldr	r4, [pc, #48]	; (80077ec <__libc_init_array+0x44>)
 80077bc:	f000 fc8e 	bl	80080dc <_init>
 80077c0:	1b64      	subs	r4, r4, r5
 80077c2:	10a4      	asrs	r4, r4, #2
 80077c4:	2600      	movs	r6, #0
 80077c6:	42a6      	cmp	r6, r4
 80077c8:	d105      	bne.n	80077d6 <__libc_init_array+0x2e>
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d0:	4798      	blx	r3
 80077d2:	3601      	adds	r6, #1
 80077d4:	e7ee      	b.n	80077b4 <__libc_init_array+0xc>
 80077d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077da:	4798      	blx	r3
 80077dc:	3601      	adds	r6, #1
 80077de:	e7f2      	b.n	80077c6 <__libc_init_array+0x1e>
 80077e0:	080081f4 	.word	0x080081f4
 80077e4:	080081f4 	.word	0x080081f4
 80077e8:	080081f4 	.word	0x080081f4
 80077ec:	080081f8 	.word	0x080081f8

080077f0 <memcpy>:
 80077f0:	440a      	add	r2, r1
 80077f2:	4291      	cmp	r1, r2
 80077f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077f8:	d100      	bne.n	80077fc <memcpy+0xc>
 80077fa:	4770      	bx	lr
 80077fc:	b510      	push	{r4, lr}
 80077fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007806:	4291      	cmp	r1, r2
 8007808:	d1f9      	bne.n	80077fe <memcpy+0xe>
 800780a:	bd10      	pop	{r4, pc}

0800780c <memset>:
 800780c:	4402      	add	r2, r0
 800780e:	4603      	mov	r3, r0
 8007810:	4293      	cmp	r3, r2
 8007812:	d100      	bne.n	8007816 <memset+0xa>
 8007814:	4770      	bx	lr
 8007816:	f803 1b01 	strb.w	r1, [r3], #1
 800781a:	e7f9      	b.n	8007810 <memset+0x4>

0800781c <siprintf>:
 800781c:	b40e      	push	{r1, r2, r3}
 800781e:	b500      	push	{lr}
 8007820:	b09c      	sub	sp, #112	; 0x70
 8007822:	ab1d      	add	r3, sp, #116	; 0x74
 8007824:	9002      	str	r0, [sp, #8]
 8007826:	9006      	str	r0, [sp, #24]
 8007828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800782c:	4809      	ldr	r0, [pc, #36]	; (8007854 <siprintf+0x38>)
 800782e:	9107      	str	r1, [sp, #28]
 8007830:	9104      	str	r1, [sp, #16]
 8007832:	4909      	ldr	r1, [pc, #36]	; (8007858 <siprintf+0x3c>)
 8007834:	f853 2b04 	ldr.w	r2, [r3], #4
 8007838:	9105      	str	r1, [sp, #20]
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	a902      	add	r1, sp, #8
 8007840:	f000 f868 	bl	8007914 <_svfiprintf_r>
 8007844:	9b02      	ldr	r3, [sp, #8]
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	b01c      	add	sp, #112	; 0x70
 800784c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007850:	b003      	add	sp, #12
 8007852:	4770      	bx	lr
 8007854:	20000010 	.word	0x20000010
 8007858:	ffff0208 	.word	0xffff0208

0800785c <__ssputs_r>:
 800785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007860:	688e      	ldr	r6, [r1, #8]
 8007862:	429e      	cmp	r6, r3
 8007864:	4682      	mov	sl, r0
 8007866:	460c      	mov	r4, r1
 8007868:	4690      	mov	r8, r2
 800786a:	461f      	mov	r7, r3
 800786c:	d838      	bhi.n	80078e0 <__ssputs_r+0x84>
 800786e:	898a      	ldrh	r2, [r1, #12]
 8007870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007874:	d032      	beq.n	80078dc <__ssputs_r+0x80>
 8007876:	6825      	ldr	r5, [r4, #0]
 8007878:	6909      	ldr	r1, [r1, #16]
 800787a:	eba5 0901 	sub.w	r9, r5, r1
 800787e:	6965      	ldr	r5, [r4, #20]
 8007880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007888:	3301      	adds	r3, #1
 800788a:	444b      	add	r3, r9
 800788c:	106d      	asrs	r5, r5, #1
 800788e:	429d      	cmp	r5, r3
 8007890:	bf38      	it	cc
 8007892:	461d      	movcc	r5, r3
 8007894:	0553      	lsls	r3, r2, #21
 8007896:	d531      	bpl.n	80078fc <__ssputs_r+0xa0>
 8007898:	4629      	mov	r1, r5
 800789a:	f000 fb55 	bl	8007f48 <_malloc_r>
 800789e:	4606      	mov	r6, r0
 80078a0:	b950      	cbnz	r0, 80078b8 <__ssputs_r+0x5c>
 80078a2:	230c      	movs	r3, #12
 80078a4:	f8ca 3000 	str.w	r3, [sl]
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ae:	81a3      	strh	r3, [r4, #12]
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b8:	6921      	ldr	r1, [r4, #16]
 80078ba:	464a      	mov	r2, r9
 80078bc:	f7ff ff98 	bl	80077f0 <memcpy>
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ca:	81a3      	strh	r3, [r4, #12]
 80078cc:	6126      	str	r6, [r4, #16]
 80078ce:	6165      	str	r5, [r4, #20]
 80078d0:	444e      	add	r6, r9
 80078d2:	eba5 0509 	sub.w	r5, r5, r9
 80078d6:	6026      	str	r6, [r4, #0]
 80078d8:	60a5      	str	r5, [r4, #8]
 80078da:	463e      	mov	r6, r7
 80078dc:	42be      	cmp	r6, r7
 80078de:	d900      	bls.n	80078e2 <__ssputs_r+0x86>
 80078e0:	463e      	mov	r6, r7
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	4632      	mov	r2, r6
 80078e6:	4641      	mov	r1, r8
 80078e8:	f000 faa8 	bl	8007e3c <memmove>
 80078ec:	68a3      	ldr	r3, [r4, #8]
 80078ee:	1b9b      	subs	r3, r3, r6
 80078f0:	60a3      	str	r3, [r4, #8]
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	4433      	add	r3, r6
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	2000      	movs	r0, #0
 80078fa:	e7db      	b.n	80078b4 <__ssputs_r+0x58>
 80078fc:	462a      	mov	r2, r5
 80078fe:	f000 fb97 	bl	8008030 <_realloc_r>
 8007902:	4606      	mov	r6, r0
 8007904:	2800      	cmp	r0, #0
 8007906:	d1e1      	bne.n	80078cc <__ssputs_r+0x70>
 8007908:	6921      	ldr	r1, [r4, #16]
 800790a:	4650      	mov	r0, sl
 800790c:	f000 fab0 	bl	8007e70 <_free_r>
 8007910:	e7c7      	b.n	80078a2 <__ssputs_r+0x46>
	...

08007914 <_svfiprintf_r>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	4698      	mov	r8, r3
 800791a:	898b      	ldrh	r3, [r1, #12]
 800791c:	061b      	lsls	r3, r3, #24
 800791e:	b09d      	sub	sp, #116	; 0x74
 8007920:	4607      	mov	r7, r0
 8007922:	460d      	mov	r5, r1
 8007924:	4614      	mov	r4, r2
 8007926:	d50e      	bpl.n	8007946 <_svfiprintf_r+0x32>
 8007928:	690b      	ldr	r3, [r1, #16]
 800792a:	b963      	cbnz	r3, 8007946 <_svfiprintf_r+0x32>
 800792c:	2140      	movs	r1, #64	; 0x40
 800792e:	f000 fb0b 	bl	8007f48 <_malloc_r>
 8007932:	6028      	str	r0, [r5, #0]
 8007934:	6128      	str	r0, [r5, #16]
 8007936:	b920      	cbnz	r0, 8007942 <_svfiprintf_r+0x2e>
 8007938:	230c      	movs	r3, #12
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e0d1      	b.n	8007ae6 <_svfiprintf_r+0x1d2>
 8007942:	2340      	movs	r3, #64	; 0x40
 8007944:	616b      	str	r3, [r5, #20]
 8007946:	2300      	movs	r3, #0
 8007948:	9309      	str	r3, [sp, #36]	; 0x24
 800794a:	2320      	movs	r3, #32
 800794c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007950:	f8cd 800c 	str.w	r8, [sp, #12]
 8007954:	2330      	movs	r3, #48	; 0x30
 8007956:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b00 <_svfiprintf_r+0x1ec>
 800795a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800795e:	f04f 0901 	mov.w	r9, #1
 8007962:	4623      	mov	r3, r4
 8007964:	469a      	mov	sl, r3
 8007966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796a:	b10a      	cbz	r2, 8007970 <_svfiprintf_r+0x5c>
 800796c:	2a25      	cmp	r2, #37	; 0x25
 800796e:	d1f9      	bne.n	8007964 <_svfiprintf_r+0x50>
 8007970:	ebba 0b04 	subs.w	fp, sl, r4
 8007974:	d00b      	beq.n	800798e <_svfiprintf_r+0x7a>
 8007976:	465b      	mov	r3, fp
 8007978:	4622      	mov	r2, r4
 800797a:	4629      	mov	r1, r5
 800797c:	4638      	mov	r0, r7
 800797e:	f7ff ff6d 	bl	800785c <__ssputs_r>
 8007982:	3001      	adds	r0, #1
 8007984:	f000 80aa 	beq.w	8007adc <_svfiprintf_r+0x1c8>
 8007988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800798a:	445a      	add	r2, fp
 800798c:	9209      	str	r2, [sp, #36]	; 0x24
 800798e:	f89a 3000 	ldrb.w	r3, [sl]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80a2 	beq.w	8007adc <_svfiprintf_r+0x1c8>
 8007998:	2300      	movs	r3, #0
 800799a:	f04f 32ff 	mov.w	r2, #4294967295
 800799e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a2:	f10a 0a01 	add.w	sl, sl, #1
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	9307      	str	r3, [sp, #28]
 80079aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ae:	931a      	str	r3, [sp, #104]	; 0x68
 80079b0:	4654      	mov	r4, sl
 80079b2:	2205      	movs	r2, #5
 80079b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b8:	4851      	ldr	r0, [pc, #324]	; (8007b00 <_svfiprintf_r+0x1ec>)
 80079ba:	f7f8 fc09 	bl	80001d0 <memchr>
 80079be:	9a04      	ldr	r2, [sp, #16]
 80079c0:	b9d8      	cbnz	r0, 80079fa <_svfiprintf_r+0xe6>
 80079c2:	06d0      	lsls	r0, r2, #27
 80079c4:	bf44      	itt	mi
 80079c6:	2320      	movmi	r3, #32
 80079c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079cc:	0711      	lsls	r1, r2, #28
 80079ce:	bf44      	itt	mi
 80079d0:	232b      	movmi	r3, #43	; 0x2b
 80079d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d6:	f89a 3000 	ldrb.w	r3, [sl]
 80079da:	2b2a      	cmp	r3, #42	; 0x2a
 80079dc:	d015      	beq.n	8007a0a <_svfiprintf_r+0xf6>
 80079de:	9a07      	ldr	r2, [sp, #28]
 80079e0:	4654      	mov	r4, sl
 80079e2:	2000      	movs	r0, #0
 80079e4:	f04f 0c0a 	mov.w	ip, #10
 80079e8:	4621      	mov	r1, r4
 80079ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ee:	3b30      	subs	r3, #48	; 0x30
 80079f0:	2b09      	cmp	r3, #9
 80079f2:	d94e      	bls.n	8007a92 <_svfiprintf_r+0x17e>
 80079f4:	b1b0      	cbz	r0, 8007a24 <_svfiprintf_r+0x110>
 80079f6:	9207      	str	r2, [sp, #28]
 80079f8:	e014      	b.n	8007a24 <_svfiprintf_r+0x110>
 80079fa:	eba0 0308 	sub.w	r3, r0, r8
 80079fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007a02:	4313      	orrs	r3, r2
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	46a2      	mov	sl, r4
 8007a08:	e7d2      	b.n	80079b0 <_svfiprintf_r+0x9c>
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	1d19      	adds	r1, r3, #4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	9103      	str	r1, [sp, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfbb      	ittet	lt
 8007a16:	425b      	neglt	r3, r3
 8007a18:	f042 0202 	orrlt.w	r2, r2, #2
 8007a1c:	9307      	strge	r3, [sp, #28]
 8007a1e:	9307      	strlt	r3, [sp, #28]
 8007a20:	bfb8      	it	lt
 8007a22:	9204      	strlt	r2, [sp, #16]
 8007a24:	7823      	ldrb	r3, [r4, #0]
 8007a26:	2b2e      	cmp	r3, #46	; 0x2e
 8007a28:	d10c      	bne.n	8007a44 <_svfiprintf_r+0x130>
 8007a2a:	7863      	ldrb	r3, [r4, #1]
 8007a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2e:	d135      	bne.n	8007a9c <_svfiprintf_r+0x188>
 8007a30:	9b03      	ldr	r3, [sp, #12]
 8007a32:	1d1a      	adds	r2, r3, #4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	9203      	str	r2, [sp, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bfb8      	it	lt
 8007a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a40:	3402      	adds	r4, #2
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b10 <_svfiprintf_r+0x1fc>
 8007a48:	7821      	ldrb	r1, [r4, #0]
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	f7f8 fbbf 	bl	80001d0 <memchr>
 8007a52:	b140      	cbz	r0, 8007a66 <_svfiprintf_r+0x152>
 8007a54:	2340      	movs	r3, #64	; 0x40
 8007a56:	eba0 000a 	sub.w	r0, r0, sl
 8007a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	4303      	orrs	r3, r0
 8007a62:	3401      	adds	r4, #1
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6a:	4826      	ldr	r0, [pc, #152]	; (8007b04 <_svfiprintf_r+0x1f0>)
 8007a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a70:	2206      	movs	r2, #6
 8007a72:	f7f8 fbad 	bl	80001d0 <memchr>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d038      	beq.n	8007aec <_svfiprintf_r+0x1d8>
 8007a7a:	4b23      	ldr	r3, [pc, #140]	; (8007b08 <_svfiprintf_r+0x1f4>)
 8007a7c:	bb1b      	cbnz	r3, 8007ac6 <_svfiprintf_r+0x1b2>
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	3307      	adds	r3, #7
 8007a82:	f023 0307 	bic.w	r3, r3, #7
 8007a86:	3308      	adds	r3, #8
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8c:	4433      	add	r3, r6
 8007a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a90:	e767      	b.n	8007962 <_svfiprintf_r+0x4e>
 8007a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a96:	460c      	mov	r4, r1
 8007a98:	2001      	movs	r0, #1
 8007a9a:	e7a5      	b.n	80079e8 <_svfiprintf_r+0xd4>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	3401      	adds	r4, #1
 8007aa0:	9305      	str	r3, [sp, #20]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	f04f 0c0a 	mov.w	ip, #10
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aae:	3a30      	subs	r2, #48	; 0x30
 8007ab0:	2a09      	cmp	r2, #9
 8007ab2:	d903      	bls.n	8007abc <_svfiprintf_r+0x1a8>
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0c5      	beq.n	8007a44 <_svfiprintf_r+0x130>
 8007ab8:	9105      	str	r1, [sp, #20]
 8007aba:	e7c3      	b.n	8007a44 <_svfiprintf_r+0x130>
 8007abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e7f0      	b.n	8007aa8 <_svfiprintf_r+0x194>
 8007ac6:	ab03      	add	r3, sp, #12
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	462a      	mov	r2, r5
 8007acc:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <_svfiprintf_r+0x1f8>)
 8007ace:	a904      	add	r1, sp, #16
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	f3af 8000 	nop.w
 8007ad6:	1c42      	adds	r2, r0, #1
 8007ad8:	4606      	mov	r6, r0
 8007ada:	d1d6      	bne.n	8007a8a <_svfiprintf_r+0x176>
 8007adc:	89ab      	ldrh	r3, [r5, #12]
 8007ade:	065b      	lsls	r3, r3, #25
 8007ae0:	f53f af2c 	bmi.w	800793c <_svfiprintf_r+0x28>
 8007ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ae6:	b01d      	add	sp, #116	; 0x74
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	ab03      	add	r3, sp, #12
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	462a      	mov	r2, r5
 8007af2:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <_svfiprintf_r+0x1f8>)
 8007af4:	a904      	add	r1, sp, #16
 8007af6:	4638      	mov	r0, r7
 8007af8:	f000 f87a 	bl	8007bf0 <_printf_i>
 8007afc:	e7eb      	b.n	8007ad6 <_svfiprintf_r+0x1c2>
 8007afe:	bf00      	nop
 8007b00:	080081b8 	.word	0x080081b8
 8007b04:	080081c2 	.word	0x080081c2
 8007b08:	00000000 	.word	0x00000000
 8007b0c:	0800785d 	.word	0x0800785d
 8007b10:	080081be 	.word	0x080081be

08007b14 <_printf_common>:
 8007b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	4616      	mov	r6, r2
 8007b1a:	4699      	mov	r9, r3
 8007b1c:	688a      	ldr	r2, [r1, #8]
 8007b1e:	690b      	ldr	r3, [r1, #16]
 8007b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b24:	4293      	cmp	r3, r2
 8007b26:	bfb8      	it	lt
 8007b28:	4613      	movlt	r3, r2
 8007b2a:	6033      	str	r3, [r6, #0]
 8007b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b30:	4607      	mov	r7, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	b10a      	cbz	r2, 8007b3a <_printf_common+0x26>
 8007b36:	3301      	adds	r3, #1
 8007b38:	6033      	str	r3, [r6, #0]
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	0699      	lsls	r1, r3, #26
 8007b3e:	bf42      	ittt	mi
 8007b40:	6833      	ldrmi	r3, [r6, #0]
 8007b42:	3302      	addmi	r3, #2
 8007b44:	6033      	strmi	r3, [r6, #0]
 8007b46:	6825      	ldr	r5, [r4, #0]
 8007b48:	f015 0506 	ands.w	r5, r5, #6
 8007b4c:	d106      	bne.n	8007b5c <_printf_common+0x48>
 8007b4e:	f104 0a19 	add.w	sl, r4, #25
 8007b52:	68e3      	ldr	r3, [r4, #12]
 8007b54:	6832      	ldr	r2, [r6, #0]
 8007b56:	1a9b      	subs	r3, r3, r2
 8007b58:	42ab      	cmp	r3, r5
 8007b5a:	dc26      	bgt.n	8007baa <_printf_common+0x96>
 8007b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b60:	1e13      	subs	r3, r2, #0
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	bf18      	it	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	0692      	lsls	r2, r2, #26
 8007b6a:	d42b      	bmi.n	8007bc4 <_printf_common+0xb0>
 8007b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b70:	4649      	mov	r1, r9
 8007b72:	4638      	mov	r0, r7
 8007b74:	47c0      	blx	r8
 8007b76:	3001      	adds	r0, #1
 8007b78:	d01e      	beq.n	8007bb8 <_printf_common+0xa4>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	68e5      	ldr	r5, [r4, #12]
 8007b7e:	6832      	ldr	r2, [r6, #0]
 8007b80:	f003 0306 	and.w	r3, r3, #6
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	bf08      	it	eq
 8007b88:	1aad      	subeq	r5, r5, r2
 8007b8a:	68a3      	ldr	r3, [r4, #8]
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	bf0c      	ite	eq
 8007b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b94:	2500      	movne	r5, #0
 8007b96:	4293      	cmp	r3, r2
 8007b98:	bfc4      	itt	gt
 8007b9a:	1a9b      	subgt	r3, r3, r2
 8007b9c:	18ed      	addgt	r5, r5, r3
 8007b9e:	2600      	movs	r6, #0
 8007ba0:	341a      	adds	r4, #26
 8007ba2:	42b5      	cmp	r5, r6
 8007ba4:	d11a      	bne.n	8007bdc <_printf_common+0xc8>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e008      	b.n	8007bbc <_printf_common+0xa8>
 8007baa:	2301      	movs	r3, #1
 8007bac:	4652      	mov	r2, sl
 8007bae:	4649      	mov	r1, r9
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	47c0      	blx	r8
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d103      	bne.n	8007bc0 <_printf_common+0xac>
 8007bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc0:	3501      	adds	r5, #1
 8007bc2:	e7c6      	b.n	8007b52 <_printf_common+0x3e>
 8007bc4:	18e1      	adds	r1, r4, r3
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	2030      	movs	r0, #48	; 0x30
 8007bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bce:	4422      	add	r2, r4
 8007bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bd8:	3302      	adds	r3, #2
 8007bda:	e7c7      	b.n	8007b6c <_printf_common+0x58>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	4622      	mov	r2, r4
 8007be0:	4649      	mov	r1, r9
 8007be2:	4638      	mov	r0, r7
 8007be4:	47c0      	blx	r8
 8007be6:	3001      	adds	r0, #1
 8007be8:	d0e6      	beq.n	8007bb8 <_printf_common+0xa4>
 8007bea:	3601      	adds	r6, #1
 8007bec:	e7d9      	b.n	8007ba2 <_printf_common+0x8e>
	...

08007bf0 <_printf_i>:
 8007bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf4:	7e0f      	ldrb	r7, [r1, #24]
 8007bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bf8:	2f78      	cmp	r7, #120	; 0x78
 8007bfa:	4691      	mov	r9, r2
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	469a      	mov	sl, r3
 8007c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c06:	d807      	bhi.n	8007c18 <_printf_i+0x28>
 8007c08:	2f62      	cmp	r7, #98	; 0x62
 8007c0a:	d80a      	bhi.n	8007c22 <_printf_i+0x32>
 8007c0c:	2f00      	cmp	r7, #0
 8007c0e:	f000 80d8 	beq.w	8007dc2 <_printf_i+0x1d2>
 8007c12:	2f58      	cmp	r7, #88	; 0x58
 8007c14:	f000 80a3 	beq.w	8007d5e <_printf_i+0x16e>
 8007c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c20:	e03a      	b.n	8007c98 <_printf_i+0xa8>
 8007c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c26:	2b15      	cmp	r3, #21
 8007c28:	d8f6      	bhi.n	8007c18 <_printf_i+0x28>
 8007c2a:	a101      	add	r1, pc, #4	; (adr r1, 8007c30 <_printf_i+0x40>)
 8007c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c30:	08007c89 	.word	0x08007c89
 8007c34:	08007c9d 	.word	0x08007c9d
 8007c38:	08007c19 	.word	0x08007c19
 8007c3c:	08007c19 	.word	0x08007c19
 8007c40:	08007c19 	.word	0x08007c19
 8007c44:	08007c19 	.word	0x08007c19
 8007c48:	08007c9d 	.word	0x08007c9d
 8007c4c:	08007c19 	.word	0x08007c19
 8007c50:	08007c19 	.word	0x08007c19
 8007c54:	08007c19 	.word	0x08007c19
 8007c58:	08007c19 	.word	0x08007c19
 8007c5c:	08007da9 	.word	0x08007da9
 8007c60:	08007ccd 	.word	0x08007ccd
 8007c64:	08007d8b 	.word	0x08007d8b
 8007c68:	08007c19 	.word	0x08007c19
 8007c6c:	08007c19 	.word	0x08007c19
 8007c70:	08007dcb 	.word	0x08007dcb
 8007c74:	08007c19 	.word	0x08007c19
 8007c78:	08007ccd 	.word	0x08007ccd
 8007c7c:	08007c19 	.word	0x08007c19
 8007c80:	08007c19 	.word	0x08007c19
 8007c84:	08007d93 	.word	0x08007d93
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	1d1a      	adds	r2, r3, #4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	602a      	str	r2, [r5, #0]
 8007c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e0a3      	b.n	8007de4 <_printf_i+0x1f4>
 8007c9c:	6820      	ldr	r0, [r4, #0]
 8007c9e:	6829      	ldr	r1, [r5, #0]
 8007ca0:	0606      	lsls	r6, r0, #24
 8007ca2:	f101 0304 	add.w	r3, r1, #4
 8007ca6:	d50a      	bpl.n	8007cbe <_printf_i+0xce>
 8007ca8:	680e      	ldr	r6, [r1, #0]
 8007caa:	602b      	str	r3, [r5, #0]
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	da03      	bge.n	8007cb8 <_printf_i+0xc8>
 8007cb0:	232d      	movs	r3, #45	; 0x2d
 8007cb2:	4276      	negs	r6, r6
 8007cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb8:	485e      	ldr	r0, [pc, #376]	; (8007e34 <_printf_i+0x244>)
 8007cba:	230a      	movs	r3, #10
 8007cbc:	e019      	b.n	8007cf2 <_printf_i+0x102>
 8007cbe:	680e      	ldr	r6, [r1, #0]
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cc6:	bf18      	it	ne
 8007cc8:	b236      	sxthne	r6, r6
 8007cca:	e7ef      	b.n	8007cac <_printf_i+0xbc>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	6820      	ldr	r0, [r4, #0]
 8007cd0:	1d19      	adds	r1, r3, #4
 8007cd2:	6029      	str	r1, [r5, #0]
 8007cd4:	0601      	lsls	r1, r0, #24
 8007cd6:	d501      	bpl.n	8007cdc <_printf_i+0xec>
 8007cd8:	681e      	ldr	r6, [r3, #0]
 8007cda:	e002      	b.n	8007ce2 <_printf_i+0xf2>
 8007cdc:	0646      	lsls	r6, r0, #25
 8007cde:	d5fb      	bpl.n	8007cd8 <_printf_i+0xe8>
 8007ce0:	881e      	ldrh	r6, [r3, #0]
 8007ce2:	4854      	ldr	r0, [pc, #336]	; (8007e34 <_printf_i+0x244>)
 8007ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ce6:	bf0c      	ite	eq
 8007ce8:	2308      	moveq	r3, #8
 8007cea:	230a      	movne	r3, #10
 8007cec:	2100      	movs	r1, #0
 8007cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cf2:	6865      	ldr	r5, [r4, #4]
 8007cf4:	60a5      	str	r5, [r4, #8]
 8007cf6:	2d00      	cmp	r5, #0
 8007cf8:	bfa2      	ittt	ge
 8007cfa:	6821      	ldrge	r1, [r4, #0]
 8007cfc:	f021 0104 	bicge.w	r1, r1, #4
 8007d00:	6021      	strge	r1, [r4, #0]
 8007d02:	b90e      	cbnz	r6, 8007d08 <_printf_i+0x118>
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	d04d      	beq.n	8007da4 <_printf_i+0x1b4>
 8007d08:	4615      	mov	r5, r2
 8007d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d12:	5dc7      	ldrb	r7, [r0, r7]
 8007d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d18:	4637      	mov	r7, r6
 8007d1a:	42bb      	cmp	r3, r7
 8007d1c:	460e      	mov	r6, r1
 8007d1e:	d9f4      	bls.n	8007d0a <_printf_i+0x11a>
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d10b      	bne.n	8007d3c <_printf_i+0x14c>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	07de      	lsls	r6, r3, #31
 8007d28:	d508      	bpl.n	8007d3c <_printf_i+0x14c>
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	6861      	ldr	r1, [r4, #4]
 8007d2e:	4299      	cmp	r1, r3
 8007d30:	bfde      	ittt	le
 8007d32:	2330      	movle	r3, #48	; 0x30
 8007d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d3c:	1b52      	subs	r2, r2, r5
 8007d3e:	6122      	str	r2, [r4, #16]
 8007d40:	f8cd a000 	str.w	sl, [sp]
 8007d44:	464b      	mov	r3, r9
 8007d46:	aa03      	add	r2, sp, #12
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f7ff fee2 	bl	8007b14 <_printf_common>
 8007d50:	3001      	adds	r0, #1
 8007d52:	d14c      	bne.n	8007dee <_printf_i+0x1fe>
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295
 8007d58:	b004      	add	sp, #16
 8007d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5e:	4835      	ldr	r0, [pc, #212]	; (8007e34 <_printf_i+0x244>)
 8007d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d64:	6829      	ldr	r1, [r5, #0]
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d6c:	6029      	str	r1, [r5, #0]
 8007d6e:	061d      	lsls	r5, r3, #24
 8007d70:	d514      	bpl.n	8007d9c <_printf_i+0x1ac>
 8007d72:	07df      	lsls	r7, r3, #31
 8007d74:	bf44      	itt	mi
 8007d76:	f043 0320 	orrmi.w	r3, r3, #32
 8007d7a:	6023      	strmi	r3, [r4, #0]
 8007d7c:	b91e      	cbnz	r6, 8007d86 <_printf_i+0x196>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	f023 0320 	bic.w	r3, r3, #32
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	2310      	movs	r3, #16
 8007d88:	e7b0      	b.n	8007cec <_printf_i+0xfc>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	f043 0320 	orr.w	r3, r3, #32
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	2378      	movs	r3, #120	; 0x78
 8007d94:	4828      	ldr	r0, [pc, #160]	; (8007e38 <_printf_i+0x248>)
 8007d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d9a:	e7e3      	b.n	8007d64 <_printf_i+0x174>
 8007d9c:	0659      	lsls	r1, r3, #25
 8007d9e:	bf48      	it	mi
 8007da0:	b2b6      	uxthmi	r6, r6
 8007da2:	e7e6      	b.n	8007d72 <_printf_i+0x182>
 8007da4:	4615      	mov	r5, r2
 8007da6:	e7bb      	b.n	8007d20 <_printf_i+0x130>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	6826      	ldr	r6, [r4, #0]
 8007dac:	6961      	ldr	r1, [r4, #20]
 8007dae:	1d18      	adds	r0, r3, #4
 8007db0:	6028      	str	r0, [r5, #0]
 8007db2:	0635      	lsls	r5, r6, #24
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	d501      	bpl.n	8007dbc <_printf_i+0x1cc>
 8007db8:	6019      	str	r1, [r3, #0]
 8007dba:	e002      	b.n	8007dc2 <_printf_i+0x1d2>
 8007dbc:	0670      	lsls	r0, r6, #25
 8007dbe:	d5fb      	bpl.n	8007db8 <_printf_i+0x1c8>
 8007dc0:	8019      	strh	r1, [r3, #0]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	6123      	str	r3, [r4, #16]
 8007dc6:	4615      	mov	r5, r2
 8007dc8:	e7ba      	b.n	8007d40 <_printf_i+0x150>
 8007dca:	682b      	ldr	r3, [r5, #0]
 8007dcc:	1d1a      	adds	r2, r3, #4
 8007dce:	602a      	str	r2, [r5, #0]
 8007dd0:	681d      	ldr	r5, [r3, #0]
 8007dd2:	6862      	ldr	r2, [r4, #4]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f7f8 f9fa 	bl	80001d0 <memchr>
 8007ddc:	b108      	cbz	r0, 8007de2 <_printf_i+0x1f2>
 8007dde:	1b40      	subs	r0, r0, r5
 8007de0:	6060      	str	r0, [r4, #4]
 8007de2:	6863      	ldr	r3, [r4, #4]
 8007de4:	6123      	str	r3, [r4, #16]
 8007de6:	2300      	movs	r3, #0
 8007de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dec:	e7a8      	b.n	8007d40 <_printf_i+0x150>
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	462a      	mov	r2, r5
 8007df2:	4649      	mov	r1, r9
 8007df4:	4640      	mov	r0, r8
 8007df6:	47d0      	blx	sl
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d0ab      	beq.n	8007d54 <_printf_i+0x164>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	079b      	lsls	r3, r3, #30
 8007e00:	d413      	bmi.n	8007e2a <_printf_i+0x23a>
 8007e02:	68e0      	ldr	r0, [r4, #12]
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	4298      	cmp	r0, r3
 8007e08:	bfb8      	it	lt
 8007e0a:	4618      	movlt	r0, r3
 8007e0c:	e7a4      	b.n	8007d58 <_printf_i+0x168>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4632      	mov	r2, r6
 8007e12:	4649      	mov	r1, r9
 8007e14:	4640      	mov	r0, r8
 8007e16:	47d0      	blx	sl
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d09b      	beq.n	8007d54 <_printf_i+0x164>
 8007e1c:	3501      	adds	r5, #1
 8007e1e:	68e3      	ldr	r3, [r4, #12]
 8007e20:	9903      	ldr	r1, [sp, #12]
 8007e22:	1a5b      	subs	r3, r3, r1
 8007e24:	42ab      	cmp	r3, r5
 8007e26:	dcf2      	bgt.n	8007e0e <_printf_i+0x21e>
 8007e28:	e7eb      	b.n	8007e02 <_printf_i+0x212>
 8007e2a:	2500      	movs	r5, #0
 8007e2c:	f104 0619 	add.w	r6, r4, #25
 8007e30:	e7f5      	b.n	8007e1e <_printf_i+0x22e>
 8007e32:	bf00      	nop
 8007e34:	080081c9 	.word	0x080081c9
 8007e38:	080081da 	.word	0x080081da

08007e3c <memmove>:
 8007e3c:	4288      	cmp	r0, r1
 8007e3e:	b510      	push	{r4, lr}
 8007e40:	eb01 0402 	add.w	r4, r1, r2
 8007e44:	d902      	bls.n	8007e4c <memmove+0x10>
 8007e46:	4284      	cmp	r4, r0
 8007e48:	4623      	mov	r3, r4
 8007e4a:	d807      	bhi.n	8007e5c <memmove+0x20>
 8007e4c:	1e43      	subs	r3, r0, #1
 8007e4e:	42a1      	cmp	r1, r4
 8007e50:	d008      	beq.n	8007e64 <memmove+0x28>
 8007e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e5a:	e7f8      	b.n	8007e4e <memmove+0x12>
 8007e5c:	4402      	add	r2, r0
 8007e5e:	4601      	mov	r1, r0
 8007e60:	428a      	cmp	r2, r1
 8007e62:	d100      	bne.n	8007e66 <memmove+0x2a>
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e6e:	e7f7      	b.n	8007e60 <memmove+0x24>

08007e70 <_free_r>:
 8007e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e72:	2900      	cmp	r1, #0
 8007e74:	d044      	beq.n	8007f00 <_free_r+0x90>
 8007e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e7a:	9001      	str	r0, [sp, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e82:	bfb8      	it	lt
 8007e84:	18e4      	addlt	r4, r4, r3
 8007e86:	f000 f913 	bl	80080b0 <__malloc_lock>
 8007e8a:	4a1e      	ldr	r2, [pc, #120]	; (8007f04 <_free_r+0x94>)
 8007e8c:	9801      	ldr	r0, [sp, #4]
 8007e8e:	6813      	ldr	r3, [r2, #0]
 8007e90:	b933      	cbnz	r3, 8007ea0 <_free_r+0x30>
 8007e92:	6063      	str	r3, [r4, #4]
 8007e94:	6014      	str	r4, [r2, #0]
 8007e96:	b003      	add	sp, #12
 8007e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e9c:	f000 b90e 	b.w	80080bc <__malloc_unlock>
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	d908      	bls.n	8007eb6 <_free_r+0x46>
 8007ea4:	6825      	ldr	r5, [r4, #0]
 8007ea6:	1961      	adds	r1, r4, r5
 8007ea8:	428b      	cmp	r3, r1
 8007eaa:	bf01      	itttt	eq
 8007eac:	6819      	ldreq	r1, [r3, #0]
 8007eae:	685b      	ldreq	r3, [r3, #4]
 8007eb0:	1949      	addeq	r1, r1, r5
 8007eb2:	6021      	streq	r1, [r4, #0]
 8007eb4:	e7ed      	b.n	8007e92 <_free_r+0x22>
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	b10b      	cbz	r3, 8007ec0 <_free_r+0x50>
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d9fa      	bls.n	8007eb6 <_free_r+0x46>
 8007ec0:	6811      	ldr	r1, [r2, #0]
 8007ec2:	1855      	adds	r5, r2, r1
 8007ec4:	42a5      	cmp	r5, r4
 8007ec6:	d10b      	bne.n	8007ee0 <_free_r+0x70>
 8007ec8:	6824      	ldr	r4, [r4, #0]
 8007eca:	4421      	add	r1, r4
 8007ecc:	1854      	adds	r4, r2, r1
 8007ece:	42a3      	cmp	r3, r4
 8007ed0:	6011      	str	r1, [r2, #0]
 8007ed2:	d1e0      	bne.n	8007e96 <_free_r+0x26>
 8007ed4:	681c      	ldr	r4, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	6053      	str	r3, [r2, #4]
 8007eda:	4421      	add	r1, r4
 8007edc:	6011      	str	r1, [r2, #0]
 8007ede:	e7da      	b.n	8007e96 <_free_r+0x26>
 8007ee0:	d902      	bls.n	8007ee8 <_free_r+0x78>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	6003      	str	r3, [r0, #0]
 8007ee6:	e7d6      	b.n	8007e96 <_free_r+0x26>
 8007ee8:	6825      	ldr	r5, [r4, #0]
 8007eea:	1961      	adds	r1, r4, r5
 8007eec:	428b      	cmp	r3, r1
 8007eee:	bf04      	itt	eq
 8007ef0:	6819      	ldreq	r1, [r3, #0]
 8007ef2:	685b      	ldreq	r3, [r3, #4]
 8007ef4:	6063      	str	r3, [r4, #4]
 8007ef6:	bf04      	itt	eq
 8007ef8:	1949      	addeq	r1, r1, r5
 8007efa:	6021      	streq	r1, [r4, #0]
 8007efc:	6054      	str	r4, [r2, #4]
 8007efe:	e7ca      	b.n	8007e96 <_free_r+0x26>
 8007f00:	b003      	add	sp, #12
 8007f02:	bd30      	pop	{r4, r5, pc}
 8007f04:	20001b30 	.word	0x20001b30

08007f08 <sbrk_aligned>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	4e0e      	ldr	r6, [pc, #56]	; (8007f44 <sbrk_aligned+0x3c>)
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	6831      	ldr	r1, [r6, #0]
 8007f10:	4605      	mov	r5, r0
 8007f12:	b911      	cbnz	r1, 8007f1a <sbrk_aligned+0x12>
 8007f14:	f000 f8bc 	bl	8008090 <_sbrk_r>
 8007f18:	6030      	str	r0, [r6, #0]
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 f8b7 	bl	8008090 <_sbrk_r>
 8007f22:	1c43      	adds	r3, r0, #1
 8007f24:	d00a      	beq.n	8007f3c <sbrk_aligned+0x34>
 8007f26:	1cc4      	adds	r4, r0, #3
 8007f28:	f024 0403 	bic.w	r4, r4, #3
 8007f2c:	42a0      	cmp	r0, r4
 8007f2e:	d007      	beq.n	8007f40 <sbrk_aligned+0x38>
 8007f30:	1a21      	subs	r1, r4, r0
 8007f32:	4628      	mov	r0, r5
 8007f34:	f000 f8ac 	bl	8008090 <_sbrk_r>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d101      	bne.n	8007f40 <sbrk_aligned+0x38>
 8007f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8007f40:	4620      	mov	r0, r4
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	20001b34 	.word	0x20001b34

08007f48 <_malloc_r>:
 8007f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4c:	1ccd      	adds	r5, r1, #3
 8007f4e:	f025 0503 	bic.w	r5, r5, #3
 8007f52:	3508      	adds	r5, #8
 8007f54:	2d0c      	cmp	r5, #12
 8007f56:	bf38      	it	cc
 8007f58:	250c      	movcc	r5, #12
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	db01      	blt.n	8007f64 <_malloc_r+0x1c>
 8007f60:	42a9      	cmp	r1, r5
 8007f62:	d905      	bls.n	8007f70 <_malloc_r+0x28>
 8007f64:	230c      	movs	r3, #12
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	2600      	movs	r6, #0
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f70:	4e2e      	ldr	r6, [pc, #184]	; (800802c <_malloc_r+0xe4>)
 8007f72:	f000 f89d 	bl	80080b0 <__malloc_lock>
 8007f76:	6833      	ldr	r3, [r6, #0]
 8007f78:	461c      	mov	r4, r3
 8007f7a:	bb34      	cbnz	r4, 8007fca <_malloc_r+0x82>
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4638      	mov	r0, r7
 8007f80:	f7ff ffc2 	bl	8007f08 <sbrk_aligned>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	4604      	mov	r4, r0
 8007f88:	d14d      	bne.n	8008026 <_malloc_r+0xde>
 8007f8a:	6834      	ldr	r4, [r6, #0]
 8007f8c:	4626      	mov	r6, r4
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	d140      	bne.n	8008014 <_malloc_r+0xcc>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	4631      	mov	r1, r6
 8007f96:	4638      	mov	r0, r7
 8007f98:	eb04 0803 	add.w	r8, r4, r3
 8007f9c:	f000 f878 	bl	8008090 <_sbrk_r>
 8007fa0:	4580      	cmp	r8, r0
 8007fa2:	d13a      	bne.n	800801a <_malloc_r+0xd2>
 8007fa4:	6821      	ldr	r1, [r4, #0]
 8007fa6:	3503      	adds	r5, #3
 8007fa8:	1a6d      	subs	r5, r5, r1
 8007faa:	f025 0503 	bic.w	r5, r5, #3
 8007fae:	3508      	adds	r5, #8
 8007fb0:	2d0c      	cmp	r5, #12
 8007fb2:	bf38      	it	cc
 8007fb4:	250c      	movcc	r5, #12
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f7ff ffa5 	bl	8007f08 <sbrk_aligned>
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	d02b      	beq.n	800801a <_malloc_r+0xd2>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	442b      	add	r3, r5
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	e00e      	b.n	8007fe8 <_malloc_r+0xa0>
 8007fca:	6822      	ldr	r2, [r4, #0]
 8007fcc:	1b52      	subs	r2, r2, r5
 8007fce:	d41e      	bmi.n	800800e <_malloc_r+0xc6>
 8007fd0:	2a0b      	cmp	r2, #11
 8007fd2:	d916      	bls.n	8008002 <_malloc_r+0xba>
 8007fd4:	1961      	adds	r1, r4, r5
 8007fd6:	42a3      	cmp	r3, r4
 8007fd8:	6025      	str	r5, [r4, #0]
 8007fda:	bf18      	it	ne
 8007fdc:	6059      	strne	r1, [r3, #4]
 8007fde:	6863      	ldr	r3, [r4, #4]
 8007fe0:	bf08      	it	eq
 8007fe2:	6031      	streq	r1, [r6, #0]
 8007fe4:	5162      	str	r2, [r4, r5]
 8007fe6:	604b      	str	r3, [r1, #4]
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f104 060b 	add.w	r6, r4, #11
 8007fee:	f000 f865 	bl	80080bc <__malloc_unlock>
 8007ff2:	f026 0607 	bic.w	r6, r6, #7
 8007ff6:	1d23      	adds	r3, r4, #4
 8007ff8:	1af2      	subs	r2, r6, r3
 8007ffa:	d0b6      	beq.n	8007f6a <_malloc_r+0x22>
 8007ffc:	1b9b      	subs	r3, r3, r6
 8007ffe:	50a3      	str	r3, [r4, r2]
 8008000:	e7b3      	b.n	8007f6a <_malloc_r+0x22>
 8008002:	6862      	ldr	r2, [r4, #4]
 8008004:	42a3      	cmp	r3, r4
 8008006:	bf0c      	ite	eq
 8008008:	6032      	streq	r2, [r6, #0]
 800800a:	605a      	strne	r2, [r3, #4]
 800800c:	e7ec      	b.n	8007fe8 <_malloc_r+0xa0>
 800800e:	4623      	mov	r3, r4
 8008010:	6864      	ldr	r4, [r4, #4]
 8008012:	e7b2      	b.n	8007f7a <_malloc_r+0x32>
 8008014:	4634      	mov	r4, r6
 8008016:	6876      	ldr	r6, [r6, #4]
 8008018:	e7b9      	b.n	8007f8e <_malloc_r+0x46>
 800801a:	230c      	movs	r3, #12
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	4638      	mov	r0, r7
 8008020:	f000 f84c 	bl	80080bc <__malloc_unlock>
 8008024:	e7a1      	b.n	8007f6a <_malloc_r+0x22>
 8008026:	6025      	str	r5, [r4, #0]
 8008028:	e7de      	b.n	8007fe8 <_malloc_r+0xa0>
 800802a:	bf00      	nop
 800802c:	20001b30 	.word	0x20001b30

08008030 <_realloc_r>:
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	4680      	mov	r8, r0
 8008036:	4614      	mov	r4, r2
 8008038:	460e      	mov	r6, r1
 800803a:	b921      	cbnz	r1, 8008046 <_realloc_r+0x16>
 800803c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	4611      	mov	r1, r2
 8008042:	f7ff bf81 	b.w	8007f48 <_malloc_r>
 8008046:	b92a      	cbnz	r2, 8008054 <_realloc_r+0x24>
 8008048:	f7ff ff12 	bl	8007e70 <_free_r>
 800804c:	4625      	mov	r5, r4
 800804e:	4628      	mov	r0, r5
 8008050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008054:	f000 f838 	bl	80080c8 <_malloc_usable_size_r>
 8008058:	4284      	cmp	r4, r0
 800805a:	4607      	mov	r7, r0
 800805c:	d802      	bhi.n	8008064 <_realloc_r+0x34>
 800805e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008062:	d812      	bhi.n	800808a <_realloc_r+0x5a>
 8008064:	4621      	mov	r1, r4
 8008066:	4640      	mov	r0, r8
 8008068:	f7ff ff6e 	bl	8007f48 <_malloc_r>
 800806c:	4605      	mov	r5, r0
 800806e:	2800      	cmp	r0, #0
 8008070:	d0ed      	beq.n	800804e <_realloc_r+0x1e>
 8008072:	42bc      	cmp	r4, r7
 8008074:	4622      	mov	r2, r4
 8008076:	4631      	mov	r1, r6
 8008078:	bf28      	it	cs
 800807a:	463a      	movcs	r2, r7
 800807c:	f7ff fbb8 	bl	80077f0 <memcpy>
 8008080:	4631      	mov	r1, r6
 8008082:	4640      	mov	r0, r8
 8008084:	f7ff fef4 	bl	8007e70 <_free_r>
 8008088:	e7e1      	b.n	800804e <_realloc_r+0x1e>
 800808a:	4635      	mov	r5, r6
 800808c:	e7df      	b.n	800804e <_realloc_r+0x1e>
	...

08008090 <_sbrk_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	; (80080ac <_sbrk_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7f8 fe7a 	bl	8000d94 <_sbrk>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_sbrk_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_sbrk_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20001b38 	.word	0x20001b38

080080b0 <__malloc_lock>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__malloc_lock+0x8>)
 80080b2:	f000 b811 	b.w	80080d8 <__retarget_lock_acquire_recursive>
 80080b6:	bf00      	nop
 80080b8:	20001b3c 	.word	0x20001b3c

080080bc <__malloc_unlock>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__malloc_unlock+0x8>)
 80080be:	f000 b80c 	b.w	80080da <__retarget_lock_release_recursive>
 80080c2:	bf00      	nop
 80080c4:	20001b3c 	.word	0x20001b3c

080080c8 <_malloc_usable_size_r>:
 80080c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080cc:	1f18      	subs	r0, r3, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bfbc      	itt	lt
 80080d2:	580b      	ldrlt	r3, [r1, r0]
 80080d4:	18c0      	addlt	r0, r0, r3
 80080d6:	4770      	bx	lr

080080d8 <__retarget_lock_acquire_recursive>:
 80080d8:	4770      	bx	lr

080080da <__retarget_lock_release_recursive>:
 80080da:	4770      	bx	lr

080080dc <_init>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr

080080e8 <_fini>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	bf00      	nop
 80080ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ee:	bc08      	pop	{r3}
 80080f0:	469e      	mov	lr, r3
 80080f2:	4770      	bx	lr
