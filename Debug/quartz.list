
quartz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb0  08005fb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a00  20000010  08005fc8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a10  08005fc8  00021a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acaa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003588  00000000  00000000  0003acea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0003e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  0003f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002461f  00000000  00000000  00040e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018aca  00000000  00000000  0006543f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1867  00000000  00000000  0007df09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f770  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea4  00000000  00000000  0015f7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005eb0 	.word	0x08005eb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005eb0 	.word	0x08005eb0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <UART_char>:
/*
 * @brief print any char to UART
 * @param char to print
 */
void UART_char(unsigned char c)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 10);
 80004de:	1df9      	adds	r1, r7, #7
 80004e0:	230a      	movs	r3, #10
 80004e2:	2201      	movs	r2, #1
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <UART_char+0x20>)
 80004e6:	f002 fa79 	bl	80029dc <HAL_UART_Transmit>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000002c 	.word	0x2000002c

080004f8 <UART_string>:
/*
 * @brief print any string to UART
 * @param char* to string
 */
void UART_string(char* s)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]

	for(; s[i]; i++)
 8000504:	e009      	b.n	800051a <UART_string+0x22>
		UART_char(s[i]);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ffe0 	bl	80004d4 <UART_char>
	for(; s[i]; i++)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1ef      	bne.n	8000506 <UART_string+0xe>
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 faae 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f826 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8a6 	bl	800068c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f874 	bl	800062c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000544:	f002 ff2c 	bl	80033a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01_ID */
  Task01_IDHandle = osThreadNew(Task01, NULL, &Task01_ID_attributes);
 8000548:	4a09      	ldr	r2, [pc, #36]	; (8000570 <main+0x40>)
 800054a:	2100      	movs	r1, #0
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <main+0x44>)
 800054e:	f002 ff71 	bl	8003434 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <main+0x48>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of Task02_ID */
  Task02_IDHandle = osThreadNew(Task02, NULL, &Task02_ID_attributes);
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <main+0x4c>)
 800055a:	2100      	movs	r1, #0
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <main+0x50>)
 800055e:	f002 ff69 	bl	8003434 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <main+0x54>)
 8000566:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000568:	f002 ff3e 	bl	80033e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x3c>
 800056e:	bf00      	nop
 8000570:	08005f18 	.word	0x08005f18
 8000574:	0800075d 	.word	0x0800075d
 8000578:	200000b0 	.word	0x200000b0
 800057c:	08005f3c 	.word	0x08005f3c
 8000580:	08000799 	.word	0x08000799
 8000584:	200000b4 	.word	0x200000b4

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	; 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fc82 	bl	8005ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ae:	f000 fd4b 	bl	8001048 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f90e 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d6:	230a      	movs	r3, #10
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fd82 	bl	80010f4 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f6:	f000 f8ef 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	2104      	movs	r1, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f982 	bl	800191c <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f8db 	bl	80007d8 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3758      	adds	r7, #88	; 0x58
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <MX_USART2_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000670:	f002 f966 	bl	8002940 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f8ad 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000002c 	.word	0x2000002c
 8000688:	40004400 	.word	0x40004400

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a24      	ldr	r2, [pc, #144]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000708:	4812      	ldr	r0, [pc, #72]	; (8000754 <MX_GPIO_Init+0xc8>)
 800070a:	f000 fc77 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000714:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <MX_GPIO_Init+0xcc>)
 8000726:	f000 fad7 	bl	8000cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_LED_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0xc8>)
 8000744:	f000 fac8 	bl	8000cd8 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	48000400 	.word	0x48000400
 8000758:	48000800 	.word	0x48000800

0800075c <Task01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01 */
void Task01(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		UART_string("Test Task01\n");
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <Task01+0x30>)
 8000766:	f7ff fec7 	bl	80004f8 <UART_string>
		HAL_GPIO_WritePin(LEDBANK, LEDPIN, HAL_GPIO_ReadPin(BUTTONBANK, BUTTONPIN));
 800076a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076e:	4808      	ldr	r0, [pc, #32]	; (8000790 <Task01+0x34>)
 8000770:	f000 fc2c 	bl	8000fcc <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <Task01+0x38>)
 800077e:	f000 fc3d 	bl	8000ffc <HAL_GPIO_WritePin>
		osDelay(500);
 8000782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000786:	f002 fee7 	bl	8003558 <osDelay>
		UART_string("Test Task01\n");
 800078a:	e7eb      	b.n	8000764 <Task01+0x8>
 800078c:	08005ee0 	.word	0x08005ee0
 8000790:	48000800 	.word	0x48000800
 8000794:	48000400 	.word	0x48000400

08000798 <Task02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02 */
void Task02(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02 */
  /* Infinite loop */
	for(;;)
	{
		UART_string("Test Task02\n");
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <Task02+0x18>)
 80007a2:	f7ff fea9 	bl	80004f8 <UART_string>
		osDelay(500);
 80007a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007aa:	f002 fed5 	bl	8003558 <osDelay>
		UART_string("Test Task02\n");
 80007ae:	e7f7      	b.n	80007a0 <Task02+0x8>
 80007b0:	08005ef0 	.word	0x08005ef0

080007b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c6:	f000 f985 	bl	8000ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40001000 	.word	0x40001000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_MspInit+0x4c>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_MspInit+0x4c>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_MspInit+0x4c>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6593      	str	r3, [r2, #88]	; 0x58
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	210f      	movs	r1, #15
 800081e:	f06f 0001 	mvn.w	r0, #1
 8000822:	f000 fa2f 	bl	8000c84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0a2      	sub	sp, #136	; 0x88
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2260      	movs	r2, #96	; 0x60
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f005 fb23 	bl	8005ea0 <memset>
  if(huart->Instance==USART2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <HAL_UART_MspInit+0xac>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d138      	bne.n	80008d6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4618      	mov	r0, r3
 8000872:	f001 faa9 	bl	8001dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ffac 	bl	80007d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_UART_MspInit+0xb0>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0xb0>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088a:	6593      	str	r3, [r2, #88]	; 0x58
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_UART_MspInit+0xb0>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_UART_MspInit+0xb0>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0xb0>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_UART_MspInit+0xb0>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b0:	230c      	movs	r3, #12
 80008b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c2:	2307      	movs	r3, #7
 80008c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f000 fa01 	bl	8000cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3788      	adds	r7, #136	; 0x88
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40004400 	.word	0x40004400
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <HAL_InitTick+0xe0>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a33      	ldr	r2, [pc, #204]	; (80009c8 <HAL_InitTick+0xe0>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <HAL_InitTick+0xe0>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090e:	f107 0210 	add.w	r2, r7, #16
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f001 f9c3 	bl	8001ca4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000928:	f001 f990 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 800092c:	6378      	str	r0, [r7, #52]	; 0x34
 800092e:	e004      	b.n	800093a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000930:	f001 f98c 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8000934:	4603      	mov	r3, r0
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800093a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800093c:	4a23      	ldr	r2, [pc, #140]	; (80009cc <HAL_InitTick+0xe4>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	0c9b      	lsrs	r3, r3, #18
 8000944:	3b01      	subs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <HAL_InitTick+0xe8>)
 800094a:	4a22      	ldr	r2, [pc, #136]	; (80009d4 <HAL_InitTick+0xec>)
 800094c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <HAL_InitTick+0xe8>)
 8000950:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000954:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000956:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <HAL_InitTick+0xe8>)
 8000958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_InitTick+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_InitTick+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <HAL_InitTick+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <HAL_InitTick+0xe8>)
 8000970:	f001 fd66 	bl	8002440 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800097a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800097e:	2b00      	cmp	r3, #0
 8000980:	d11b      	bne.n	80009ba <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <HAL_InitTick+0xe8>)
 8000984:	f001 fdbe 	bl	8002504 <HAL_TIM_Base_Start_IT>
 8000988:	4603      	mov	r3, r0
 800098a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800098e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000992:	2b00      	cmp	r3, #0
 8000994:	d111      	bne.n	80009ba <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000996:	2036      	movs	r0, #54	; 0x36
 8000998:	f000 f990 	bl	8000cbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d808      	bhi.n	80009b4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009a2:	2200      	movs	r2, #0
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	2036      	movs	r0, #54	; 0x36
 80009a8:	f000 f96c 	bl	8000c84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_InitTick+0xf0>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e002      	b.n	80009ba <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3738      	adds	r7, #56	; 0x38
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	431bde83 	.word	0x431bde83
 80009d0:	200000b8 	.word	0x200000b8
 80009d4:	40001000 	.word	0x40001000
 80009d8:	20000004 	.word	0x20000004

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <TIM6_DAC_IRQHandler+0x10>)
 8000a0e:	f001 fdcd 	bl	80025ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000b8 	.word	0x200000b8

08000a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a44:	f7ff ffea 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f005 f9e5 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a72:	f7ff fd5d 	bl	8000530 <main>

08000a76 <LoopForever>:

LoopForever:
    b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a84:	08005fb8 	.word	0x08005fb8
  ldr r2, =_sbss
 8000a88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a8c:	20001a10 	.word	0x20001a10

08000a90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_Init+0x3c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <HAL_Init+0x3c>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f000 f8df 	bl	8000c6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f7ff ff19 	bl	80008e8 <HAL_InitTick>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	e001      	b.n	8000ac6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac2:	f7ff fe8f 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000104 	.word	0x20000104

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000104 	.word	0x20000104

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff4c 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c96:	f7ff ff61 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000c9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	6978      	ldr	r0, [r7, #20]
 8000ca2:	f7ff ffb1 	bl	8000c08 <NVIC_EncodePriority>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff80 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff54 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e154      	b.n	8000f92 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	2101      	movs	r1, #1
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 8146 	beq.w	8000f8c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d005      	beq.n	8000d18 <HAL_GPIO_Init+0x40>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d130      	bne.n	8000d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 0201 	and.w	r2, r3, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d017      	beq.n	8000db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d123      	bne.n	8000e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	691a      	ldr	r2, [r3, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	6939      	ldr	r1, [r7, #16]
 8000e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0203 	and.w	r2, r3, #3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 80a0 	beq.w	8000f8c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4c:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <HAL_GPIO_Init+0x2d8>)
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e50:	4a57      	ldr	r2, [pc, #348]	; (8000fb0 <HAL_GPIO_Init+0x2d8>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6613      	str	r3, [r2, #96]	; 0x60
 8000e58:	4b55      	ldr	r3, [pc, #340]	; (8000fb0 <HAL_GPIO_Init+0x2d8>)
 8000e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e64:	4a53      	ldr	r2, [pc, #332]	; (8000fb4 <HAL_GPIO_Init+0x2dc>)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8e:	d019      	beq.n	8000ec4 <HAL_GPIO_Init+0x1ec>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d013      	beq.n	8000ec0 <HAL_GPIO_Init+0x1e8>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a48      	ldr	r2, [pc, #288]	; (8000fbc <HAL_GPIO_Init+0x2e4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d00d      	beq.n	8000ebc <HAL_GPIO_Init+0x1e4>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a47      	ldr	r2, [pc, #284]	; (8000fc0 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d007      	beq.n	8000eb8 <HAL_GPIO_Init+0x1e0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a46      	ldr	r2, [pc, #280]	; (8000fc4 <HAL_GPIO_Init+0x2ec>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d101      	bne.n	8000eb4 <HAL_GPIO_Init+0x1dc>
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e008      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e004      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	f002 0203 	and.w	r2, r2, #3
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed6:	4937      	ldr	r1, [pc, #220]	; (8000fb4 <HAL_GPIO_Init+0x2dc>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee4:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f08:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f32:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f5c:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f47f aea3 	bne.w	8000ce8 <HAL_GPIO_Init+0x10>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	40010400 	.word	0x40010400

08000fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e001      	b.n	8000fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001018:	e002      	b.n	8001020 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <HAL_PWREx_GetVoltageRange+0x18>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40007000 	.word	0x40007000

08001048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001056:	d130      	bne.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001064:	d038      	beq.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001070:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001074:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2232      	movs	r2, #50	; 0x32
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9b      	lsrs	r3, r3, #18
 8001088:	3301      	adds	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800108c:	e002      	b.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3b01      	subs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a0:	d102      	bne.n	80010a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f2      	bne.n	800108e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b4:	d110      	bne.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e00f      	b.n	80010da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c6:	d007      	beq.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010d0:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40007000 	.word	0x40007000
 80010ec:	20000000 	.word	0x20000000
 80010f0:	431bde83 	.word	0x431bde83

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	f000 bc02 	b.w	800190c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001108:	4b96      	ldr	r3, [pc, #600]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001112:	4b94      	ldr	r3, [pc, #592]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80e4 	beq.w	80012f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <HAL_RCC_OscConfig+0x4c>
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b0c      	cmp	r3, #12
 8001134:	f040 808b 	bne.w	800124e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b01      	cmp	r3, #1
 800113c:	f040 8087 	bne.w	800124e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001140:	4b88      	ldr	r3, [pc, #544]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_OscConfig+0x64>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e3d9      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	4b81      	ldr	r3, [pc, #516]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <HAL_RCC_OscConfig+0x7e>
 8001168:	4b7e      	ldr	r3, [pc, #504]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001170:	e005      	b.n	800117e <HAL_RCC_OscConfig+0x8a>
 8001172:	4b7c      	ldr	r3, [pc, #496]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800117e:	4293      	cmp	r3, r2
 8001180:	d223      	bcs.n	80011ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fdbe 	bl	8001d08 <RCC_SetFlashLatencyFromMSIRange>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e3ba      	b.n	800190c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001196:	4b73      	ldr	r3, [pc, #460]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a72      	ldr	r2, [pc, #456]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b70      	ldr	r3, [pc, #448]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	496d      	ldr	r1, [pc, #436]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b4:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	4968      	ldr	r1, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	e025      	b.n	8001216 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4960      	ldr	r1, [pc, #384]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e8:	4b5e      	ldr	r3, [pc, #376]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	495b      	ldr	r1, [pc, #364]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fd7e 	bl	8001d08 <RCC_SetFlashLatencyFromMSIRange>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e37a      	b.n	800190c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001216:	f000 fc81 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 800121a:	4602      	mov	r2, r0
 800121c:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	4950      	ldr	r1, [pc, #320]	; (8001368 <HAL_RCC_OscConfig+0x274>)
 8001228:	5ccb      	ldrb	r3, [r1, r3]
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_RCC_OscConfig+0x278>)
 8001234:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001236:	4b4e      	ldr	r3, [pc, #312]	; (8001370 <HAL_RCC_OscConfig+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fb54 	bl	80008e8 <HAL_InitTick>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d052      	beq.n	80012f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	e35e      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d032      	beq.n	80012bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001256:	4b43      	ldr	r3, [pc, #268]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001262:	f7ff fc4b 	bl	8000afc <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126a:	f7ff fc47 	bl	8000afc <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e347      	b.n	800190c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800127c:	4b39      	ldr	r3, [pc, #228]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001288:	4b36      	ldr	r3, [pc, #216]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a35      	ldr	r2, [pc, #212]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4930      	ldr	r1, [pc, #192]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	492b      	ldr	r1, [pc, #172]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]
 80012ba:	e01a      	b.n	80012f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a28      	ldr	r2, [pc, #160]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc18 	bl	8000afc <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc14 	bl	8000afc <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e314      	b.n	800190c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1dc>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d073      	beq.n	80013e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b08      	cmp	r3, #8
 8001302:	d005      	beq.n	8001310 <HAL_RCC_OscConfig+0x21c>
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b0c      	cmp	r3, #12
 8001308:	d10e      	bne.n	8001328 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d10b      	bne.n	8001328 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d063      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d15f      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e2f1      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x24c>
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e025      	b.n	800138c <HAL_RCC_OscConfig+0x298>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001348:	d114      	bne.n	8001374 <HAL_RCC_OscConfig+0x280>
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a02      	ldr	r2, [pc, #8]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e013      	b.n	800138c <HAL_RCC_OscConfig+0x298>
 8001364:	40021000 	.word	0x40021000
 8001368:	08005f60 	.word	0x08005f60
 800136c:	20000000 	.word	0x20000000
 8001370:	20000004 	.word	0x20000004
 8001374:	4ba0      	ldr	r3, [pc, #640]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a9f      	ldr	r2, [pc, #636]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b9d      	ldr	r3, [pc, #628]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a9c      	ldr	r2, [pc, #624]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fbb2 	bl	8000afc <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fbae 	bl	8000afc <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e2ae      	b.n	800190c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ae:	4b92      	ldr	r3, [pc, #584]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x2a8>
 80013ba:	e014      	b.n	80013e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fb9e 	bl	8000afc <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fb9a 	bl	8000afc <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e29a      	b.n	800190c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2d0>
 80013e2:	e000      	b.n	80013e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d060      	beq.n	80014b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_OscConfig+0x310>
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	d119      	bne.n	8001432 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d116      	bne.n	8001432 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001404:	4b7c      	ldr	r3, [pc, #496]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_OscConfig+0x328>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e277      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	4973      	ldr	r1, [pc, #460]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001430:	e040      	b.n	80014b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d023      	beq.n	8001482 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143a:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fb59 	bl	8000afc <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fb55 	bl	8000afc <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e255      	b.n	800190c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001460:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b62      	ldr	r3, [pc, #392]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	061b      	lsls	r3, r3, #24
 800147a:	495f      	ldr	r1, [pc, #380]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
 8001480:	e018      	b.n	80014b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a5c      	ldr	r2, [pc, #368]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fb35 	bl	8000afc <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fb31 	bl	8000afc <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e231      	b.n	800190c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a8:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f0      	bne.n	8001496 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d03c      	beq.n	800153a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01c      	beq.n	8001502 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c8:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	4a4a      	ldr	r2, [pc, #296]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fb10 	bl	8000afc <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fb0c 	bl	8000afc <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e20c      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80014f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ef      	beq.n	80014e0 <HAL_RCC_OscConfig+0x3ec>
 8001500:	e01b      	b.n	800153a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001508:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001512:	f7ff faf3 	bl	8000afc <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff faef 	bl	8000afc <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1ef      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800152c:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800152e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ef      	bne.n	800151a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80a6 	beq.w	8001694 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10d      	bne.n	8001574 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800155a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155c:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 800155e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001562:	6593      	str	r3, [r2, #88]	; 0x58
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001570:	2301      	movs	r3, #1
 8001572:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_RCC_OscConfig+0x508>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d118      	bne.n	80015b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_RCC_OscConfig+0x508>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_RCC_OscConfig+0x508>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158c:	f7ff fab6 	bl	8000afc <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001594:	f7ff fab2 	bl	8000afc <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1b2      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_RCC_OscConfig+0x508>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_RCC_OscConfig+0x4d8>
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80015bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ca:	e029      	b.n	8001620 <HAL_RCC_OscConfig+0x52c>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d115      	bne.n	8001600 <HAL_RCC_OscConfig+0x50c>
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <HAL_RCC_OscConfig+0x504>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f4:	e014      	b.n	8001620 <HAL_RCC_OscConfig+0x52c>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40007000 	.word	0x40007000
 8001600:	4b9a      	ldr	r3, [pc, #616]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001606:	4a99      	ldr	r2, [pc, #612]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001610:	4b96      	ldr	r3, [pc, #600]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	4a95      	ldr	r2, [pc, #596]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d016      	beq.n	8001656 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fa68 	bl	8000afc <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fa64 	bl	8000afc <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e162      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ed      	beq.n	8001630 <HAL_RCC_OscConfig+0x53c>
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff fa51 	bl	8000afc <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff fa4d 	bl	8000afc <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e14b      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001674:	4b7d      	ldr	r3, [pc, #500]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ed      	bne.n	800165e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001682:	7ffb      	ldrb	r3, [r7, #31]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001688:	4b78      	ldr	r3, [pc, #480]	; (800186c <HAL_RCC_OscConfig+0x778>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	4a77      	ldr	r2, [pc, #476]	; (800186c <HAL_RCC_OscConfig+0x778>)
 800168e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001692:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	2b00      	cmp	r3, #0
 800169e:	d03c      	beq.n	800171a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80016aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ae:	4a6f      	ldr	r2, [pc, #444]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff fa20 	bl	8000afc <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c0:	f7ff fa1c 	bl	8000afc <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e11c      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016d2:	4b66      	ldr	r3, [pc, #408]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80016d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ef      	beq.n	80016c0 <HAL_RCC_OscConfig+0x5cc>
 80016e0:	e01b      	b.n	800171a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016e2:	4b62      	ldr	r3, [pc, #392]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80016e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e8:	4a60      	ldr	r2, [pc, #384]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff fa03 	bl	8000afc <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016fa:	f7ff f9ff 	bl	8000afc <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0ff      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_RCC_OscConfig+0x778>)
 800170e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ef      	bne.n	80016fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80f3 	beq.w	800190a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	2b02      	cmp	r3, #2
 800172a:	f040 80c9 	bne.w	80018c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800172e:	4b4f      	ldr	r3, [pc, #316]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f003 0203 	and.w	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	429a      	cmp	r2, r3
 8001740:	d12c      	bne.n	800179c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	3b01      	subs	r3, #1
 800174e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d123      	bne.n	800179c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d11b      	bne.n	800179c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d113      	bne.n	800179c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d109      	bne.n	800179c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d06b      	beq.n	8001874 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d062      	beq.n	8001868 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017a2:	4b32      	ldr	r3, [pc, #200]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0ac      	b.n	800190c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2d      	ldr	r2, [pc, #180]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80017b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017be:	f7ff f99d 	bl	8000afc <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff f999 	bl	8000afc <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e099      	b.n	800190c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_RCC_OscConfig+0x778>)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_RCC_OscConfig+0x77c>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017f4:	3a01      	subs	r2, #1
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	4311      	orrs	r1, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017fe:	0212      	lsls	r2, r2, #8
 8001800:	4311      	orrs	r1, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001806:	0852      	lsrs	r2, r2, #1
 8001808:	3a01      	subs	r2, #1
 800180a:	0552      	lsls	r2, r2, #21
 800180c:	4311      	orrs	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001812:	0852      	lsrs	r2, r2, #1
 8001814:	3a01      	subs	r2, #1
 8001816:	0652      	lsls	r2, r2, #25
 8001818:	4311      	orrs	r1, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800181e:	06d2      	lsls	r2, r2, #27
 8001820:	430a      	orrs	r2, r1
 8001822:	4912      	ldr	r1, [pc, #72]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001824:	4313      	orrs	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x778>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_RCC_OscConfig+0x778>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_RCC_OscConfig+0x778>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_RCC_OscConfig+0x778>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001840:	f7ff f95c 	bl	8000afc <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff f958 	bl	8000afc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e058      	b.n	800190c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_RCC_OscConfig+0x778>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001866:	e050      	b.n	800190a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e04f      	b.n	800190c <HAL_RCC_OscConfig+0x818>
 800186c:	40021000 	.word	0x40021000
 8001870:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d144      	bne.n	800190a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a23      	ldr	r2, [pc, #140]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001896:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001898:	f7ff f930 	bl	8000afc <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff f92c 	bl	8000afc <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e02c      	b.n	800190c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x7ac>
 80018be:	e024      	b.n	800190a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d01f      	beq.n	8001906 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 80018cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff f913 	bl	8000afc <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff f90f 	bl	8000afc <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e00f      	b.n	800190c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4905      	ldr	r1, [pc, #20]	; (8001914 <HAL_RCC_OscConfig+0x820>)
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_RCC_OscConfig+0x824>)
 8001900:	4013      	ands	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
 8001904:	e001      	b.n	800190a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	feeefffc 	.word	0xfeeefffc

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0e7      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b75      	ldr	r3, [pc, #468]	; (8001b08 <HAL_RCC_ClockConfig+0x1ec>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d910      	bls.n	8001960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <HAL_RCC_ClockConfig+0x1ec>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 0207 	bic.w	r2, r3, #7
 8001946:	4970      	ldr	r1, [pc, #448]	; (8001b08 <HAL_RCC_ClockConfig+0x1ec>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b6e      	ldr	r3, [pc, #440]	; (8001b08 <HAL_RCC_ClockConfig+0x1ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cf      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d010      	beq.n	800198e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001978:	429a      	cmp	r2, r3
 800197a:	d908      	bls.n	800198e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4960      	ldr	r1, [pc, #384]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d04c      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	4b5a      	ldr	r3, [pc, #360]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d121      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0a6      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ba:	4b54      	ldr	r3, [pc, #336]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d115      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e09a      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e08e      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e2:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e086      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4943      	ldr	r1, [pc, #268]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a04:	f7ff f87a 	bl	8000afc <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff f876 	bl	8000afc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e06e      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d010      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d208      	bcs.n	8001a62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	492b      	ldr	r1, [pc, #172]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <HAL_RCC_ClockConfig+0x1ec>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d210      	bcs.n	8001a92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_ClockConfig+0x1ec>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 0207 	bic.w	r2, r3, #7
 8001a78:	4923      	ldr	r1, [pc, #140]	; (8001b08 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e036      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4918      	ldr	r1, [pc, #96]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4910      	ldr	r1, [pc, #64]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad0:	f000 f824 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	490b      	ldr	r1, [pc, #44]	; (8001b10 <HAL_RCC_ClockConfig+0x1f4>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001aee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1fc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fef7 	bl	80008e8 <HAL_InitTick>
 8001afa:	4603      	mov	r3, r0
 8001afc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001afe:	7afb      	ldrb	r3, [r7, #11]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	08005f60 	.word	0x08005f60
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2a:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b34:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x34>
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d121      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d11e      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e005      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b6c:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b78:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10d      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	e004      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ba2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d134      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d003      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bc0:	e005      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc4:	617b      	str	r3, [r7, #20]
      break;
 8001bc6:	e005      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bca:	617b      	str	r3, [r7, #20]
      break;
 8001bcc:	e002      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	617b      	str	r3, [r7, #20]
      break;
 8001bd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	fb03 f202 	mul.w	r2, r3, r2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	0e5b      	lsrs	r3, r3, #25
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	3301      	adds	r3, #1
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c14:	69bb      	ldr	r3, [r7, #24]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	08005f78 	.word	0x08005f78
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	007a1200 	.word	0x007a1200

08001c34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c50:	f7ff fff0 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4904      	ldr	r1, [pc, #16]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	08005f70 	.word	0x08005f70

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c7c:	f7ff ffda 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0adb      	lsrs	r3, r3, #11
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4904      	ldr	r1, [pc, #16]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08005f70 	.word	0x08005f70

08001ca4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_RCC_GetClockConfig+0x60>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0207 	and.w	r2, r3, #7
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40022000 	.word	0x40022000

08001d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d20:	f7ff f984 	bl	800102c <HAL_PWREx_GetVoltageRange>
 8001d24:	6178      	str	r0, [r7, #20]
 8001d26:	e014      	b.n	8001d52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6593      	str	r3, [r2, #88]	; 0x58
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d40:	f7ff f974 	bl	800102c <HAL_PWREx_GetVoltageRange>
 8001d44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d58:	d10b      	bne.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b80      	cmp	r3, #128	; 0x80
 8001d5e:	d919      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2ba0      	cmp	r3, #160	; 0xa0
 8001d64:	d902      	bls.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d66:	2302      	movs	r3, #2
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e013      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e010      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b80      	cmp	r3, #128	; 0x80
 8001d76:	d902      	bls.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d78:	2303      	movs	r3, #3
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e00a      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b80      	cmp	r3, #128	; 0x80
 8001d82:	d102      	bne.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d84:	2302      	movs	r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e004      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b70      	cmp	r3, #112	; 0x70
 8001d8e:	d101      	bne.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d90:	2301      	movs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 0207 	bic.w	r2, r3, #7
 8001d9c:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40022000 	.word	0x40022000

08001dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d031      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dec:	d01a      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001dee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001df2:	d814      	bhi.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001df8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dfc:	d10f      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0a:	e00c      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fa22 	bl	800225c <RCCEx_PLLSAI1_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e1c:	e003      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	74fb      	strb	r3, [r7, #19]
      break;
 8001e22:	e000      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e2c:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	494e      	ldr	r1, [pc, #312]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e42:	e001      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 809e 	beq.w	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e5a:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00d      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a3f      	ldr	r2, [pc, #252]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a39      	ldr	r2, [pc, #228]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e98:	f7fe fe30 	bl	8000afc <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e9e:	e009      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7fe fe2c 	bl	8000afc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	74fb      	strb	r3, [r7, #19]
        break;
 8001eb2:	e005      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb4:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d15a      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01e      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d019      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d016      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fdec 	bl	8000afc <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f26:	e00b      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe fde8 	bl	8000afc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d902      	bls.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	74fb      	strb	r3, [r7, #19]
            break;
 8001f3e:	e006      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ec      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	4904      	ldr	r1, [pc, #16]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f6a:	e009      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
 8001f70:	e006      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f80:	7c7b      	ldrb	r3, [r7, #17]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b8d      	ldr	r3, [pc, #564]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a8c      	ldr	r2, [pc, #560]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9e:	4b87      	ldr	r3, [pc, #540]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4983      	ldr	r1, [pc, #524]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc0:	4b7e      	ldr	r3, [pc, #504]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	f023 020c 	bic.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	497b      	ldr	r1, [pc, #492]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fe2:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	4972      	ldr	r1, [pc, #456]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002004:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	496a      	ldr	r1, [pc, #424]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002026:	4b65      	ldr	r3, [pc, #404]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	4961      	ldr	r1, [pc, #388]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002048:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4959      	ldr	r1, [pc, #356]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800206a:	4b54      	ldr	r3, [pc, #336]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4950      	ldr	r1, [pc, #320]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209a:	4948      	ldr	r1, [pc, #288]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	493f      	ldr	r1, [pc, #252]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d028      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020d0:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ee:	d106      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a31      	ldr	r2, [pc, #196]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020fa:	60d3      	str	r3, [r2, #12]
 80020fc:	e011      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002102:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002106:	d10c      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	2101      	movs	r1, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f8a4 	bl	800225c <RCCEx_PLLSAI1_Config>
 8002114:	4603      	mov	r3, r0
 8002116:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d028      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002134:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	491f      	ldr	r1, [pc, #124]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214c:	d106      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002158:	60d3      	str	r3, [r2, #12]
 800215a:	e011      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002164:	d10c      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3304      	adds	r3, #4
 800216a:	2101      	movs	r1, #1
 800216c:	4618      	mov	r0, r3
 800216e:	f000 f875 	bl	800225c <RCCEx_PLLSAI1_Config>
 8002172:	4603      	mov	r3, r0
 8002174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d02b      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	4908      	ldr	r1, [pc, #32]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021aa:	d109      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a02      	ldr	r2, [pc, #8]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b6:	60d3      	str	r3, [r2, #12]
 80021b8:	e014      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2101      	movs	r1, #1
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 f843 	bl	800225c <RCCEx_PLLSAI1_Config>
 80021d6:	4603      	mov	r3, r0
 80021d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01c      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	4916      	ldr	r1, [pc, #88]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800220e:	d10c      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	2102      	movs	r1, #2
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f820 	bl	800225c <RCCEx_PLLSAI1_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800224c:	7cbb      	ldrb	r3, [r7, #18]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000

0800225c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800226a:	4b74      	ldr	r3, [pc, #464]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d018      	beq.n	80022a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002276:	4b71      	ldr	r3, [pc, #452]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0203 	and.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d10d      	bne.n	80022a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
       ||
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800228e:	4b6b      	ldr	r3, [pc, #428]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
       ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d047      	beq.n	8002332 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	e044      	b.n	8002332 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d018      	beq.n	80022e2 <RCCEx_PLLSAI1_Config+0x86>
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d825      	bhi.n	8002300 <RCCEx_PLLSAI1_Config+0xa4>
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d002      	beq.n	80022be <RCCEx_PLLSAI1_Config+0x62>
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d009      	beq.n	80022d0 <RCCEx_PLLSAI1_Config+0x74>
 80022bc:	e020      	b.n	8002300 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022be:	4b5f      	ldr	r3, [pc, #380]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11d      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ce:	e01a      	b.n	8002306 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022d0:	4b5a      	ldr	r3, [pc, #360]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d116      	bne.n	800230a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e0:	e013      	b.n	800230a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022e2:	4b56      	ldr	r3, [pc, #344]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ee:	4b53      	ldr	r3, [pc, #332]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022fe:	e006      	b.n	800230e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
      break;
 8002304:	e004      	b.n	8002310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002306:	bf00      	nop
 8002308:	e002      	b.n	8002310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800230e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002316:	4b49      	ldr	r3, [pc, #292]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	430b      	orrs	r3, r1
 800232c:	4943      	ldr	r1, [pc, #268]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d17c      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002338:	4b40      	ldr	r3, [pc, #256]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a3f      	ldr	r2, [pc, #252]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 800233e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe fbda 	bl	8000afc <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800234a:	e009      	b.n	8002360 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800234c:	f7fe fbd6 	bl	8000afc <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d902      	bls.n	8002360 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	73fb      	strb	r3, [r7, #15]
        break;
 800235e:	e005      	b.n	800236c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ef      	bne.n	800234c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d15f      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d110      	bne.n	800239a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002380:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6892      	ldr	r2, [r2, #8]
 8002388:	0211      	lsls	r1, r2, #8
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68d2      	ldr	r2, [r2, #12]
 800238e:	06d2      	lsls	r2, r2, #27
 8002390:	430a      	orrs	r2, r1
 8002392:	492a      	ldr	r1, [pc, #168]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002394:	4313      	orrs	r3, r2
 8002396:	610b      	str	r3, [r1, #16]
 8002398:	e027      	b.n	80023ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d112      	bne.n	80023c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023a0:	4b26      	ldr	r3, [pc, #152]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	0211      	lsls	r1, r2, #8
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6912      	ldr	r2, [r2, #16]
 80023b6:	0852      	lsrs	r2, r2, #1
 80023b8:	3a01      	subs	r2, #1
 80023ba:	0552      	lsls	r2, r2, #21
 80023bc:	430a      	orrs	r2, r1
 80023be:	491f      	ldr	r1, [pc, #124]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	610b      	str	r3, [r1, #16]
 80023c4:	e011      	b.n	80023ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6892      	ldr	r2, [r2, #8]
 80023d6:	0211      	lsls	r1, r2, #8
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6952      	ldr	r2, [r2, #20]
 80023dc:	0852      	lsrs	r2, r2, #1
 80023de:	3a01      	subs	r2, #1
 80023e0:	0652      	lsls	r2, r2, #25
 80023e2:	430a      	orrs	r2, r1
 80023e4:	4915      	ldr	r1, [pc, #84]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe fb81 	bl	8000afc <HAL_GetTick>
 80023fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023fc:	e009      	b.n	8002412 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023fe:	f7fe fb7d 	bl	8000afc <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d902      	bls.n	8002412 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	73fb      	strb	r3, [r7, #15]
          break;
 8002410:	e005      	b.n	800241e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ef      	beq.n	80023fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <RCCEx_PLLSAI1_Config+0x1e0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e049      	b.n	80024e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f841 	bl	80024ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 f9dc 	bl	800283c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d001      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e03b      	b.n	8002594 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d009      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0x4e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002546:	d004      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0x4e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d115      	bne.n	800257e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800255a:	4013      	ands	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b06      	cmp	r3, #6
 8002562:	d015      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x8c>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256a:	d011      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	e008      	b.n	8002590 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e000      	b.n	8002592 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40014000 	.word	0x40014000
 80025a8:	00010007 	.word	0x00010007

080025ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0202 	mvn.w	r2, #2
 80025d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f905 	bl	80027fe <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8f7 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f908 	bl	8002812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b04      	cmp	r3, #4
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0204 	mvn.w	r2, #4
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8db 	bl	80027fe <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f8cd 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f8de 	bl	8002812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0208 	mvn.w	r2, #8
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2204      	movs	r2, #4
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8b1 	bl	80027fe <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8a3 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f8b4 	bl	8002812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0210 	mvn.w	r2, #16
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2208      	movs	r2, #8
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f887 	bl	80027fe <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f879 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f88a 	bl	8002812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10e      	bne.n	8002730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d107      	bne.n	8002730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0201 	mvn.w	r2, #1
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe f842 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b80      	cmp	r3, #128	; 0x80
 800273c:	d10e      	bne.n	800275c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d107      	bne.n	800275c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8de 	bl	8002918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276a:	d10e      	bne.n	800278a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	d107      	bne.n	800278a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f8d1 	bl	800292c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d10e      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d107      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f838 	bl	8002826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d10e      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d107      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f06f 0220 	mvn.w	r2, #32
 80027da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f891 	bl	8002904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <TIM_Base_SetConfig+0xbc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_Base_SetConfig+0x20>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285a:	d108      	bne.n	800286e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <TIM_Base_SetConfig+0xbc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00b      	beq.n	800288e <TIM_Base_SetConfig+0x52>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d007      	beq.n	800288e <TIM_Base_SetConfig+0x52>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <TIM_Base_SetConfig+0xc0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d003      	beq.n	800288e <TIM_Base_SetConfig+0x52>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <TIM_Base_SetConfig+0xc4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d108      	bne.n	80028a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <TIM_Base_SetConfig+0xbc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_Base_SetConfig+0xa0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <TIM_Base_SetConfig+0xc0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0xa0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <TIM_Base_SetConfig+0xc4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d103      	bne.n	80028e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	615a      	str	r2, [r3, #20]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40014000 	.word	0x40014000
 8002900:	40014400 	.word	0x40014400

08002904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e040      	b.n	80029d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fd ff66 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8c0 	bl	8002b04 <UART_SetConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e022      	b.n	80029d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fb0e 	bl	8002fb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fb95 	bl	80030fc <UART_CheckIdleState>
 80029d2:	4603      	mov	r3, r0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 8082 	bne.w	8002afa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_UART_Transmit+0x26>
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07a      	b.n	8002afc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x38>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e073      	b.n	8002afc <HAL_UART_Transmit+0x120>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2221      	movs	r2, #33	; 0x21
 8002a28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe f867 	bl	8000afc <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a48:	d108      	bne.n	8002a5c <HAL_UART_Transmit+0x80>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e003      	b.n	8002a64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a6c:	e02d      	b.n	8002aca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fb88 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e039      	b.n	8002afc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	881a      	ldrh	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	e008      	b.n	8002ab8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	b292      	uxth	r2, r2
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1cb      	bne.n	8002a6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fb54 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e005      	b.n	8002afc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b08:	b08a      	sub	sp, #40	; 0x28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b9e      	ldr	r3, [pc, #632]	; (8002dac <UART_SetConfig+0x2a8>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a93      	ldr	r2, [pc, #588]	; (8002db0 <UART_SetConfig+0x2ac>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b80:	430a      	orrs	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a8a      	ldr	r2, [pc, #552]	; (8002db4 <UART_SetConfig+0x2b0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d126      	bne.n	8002bdc <UART_SetConfig+0xd8>
 8002b8e:	4b8a      	ldr	r3, [pc, #552]	; (8002db8 <UART_SetConfig+0x2b4>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d81b      	bhi.n	8002bd4 <UART_SetConfig+0xd0>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <UART_SetConfig+0xa0>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc5 	.word	0x08002bc5
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bcd 	.word	0x08002bcd
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bba:	e0ab      	b.n	8002d14 <UART_SetConfig+0x210>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bc2:	e0a7      	b.n	8002d14 <UART_SetConfig+0x210>
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bca:	e0a3      	b.n	8002d14 <UART_SetConfig+0x210>
 8002bcc:	2308      	movs	r3, #8
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bd2:	e09f      	b.n	8002d14 <UART_SetConfig+0x210>
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bda:	e09b      	b.n	8002d14 <UART_SetConfig+0x210>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a76      	ldr	r2, [pc, #472]	; (8002dbc <UART_SetConfig+0x2b8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d138      	bne.n	8002c58 <UART_SetConfig+0x154>
 8002be6:	4b74      	ldr	r3, [pc, #464]	; (8002db8 <UART_SetConfig+0x2b4>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d82d      	bhi.n	8002c50 <UART_SetConfig+0x14c>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <UART_SetConfig+0xf8>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c31 	.word	0x08002c31
 8002c00:	08002c51 	.word	0x08002c51
 8002c04:	08002c51 	.word	0x08002c51
 8002c08:	08002c51 	.word	0x08002c51
 8002c0c:	08002c41 	.word	0x08002c41
 8002c10:	08002c51 	.word	0x08002c51
 8002c14:	08002c51 	.word	0x08002c51
 8002c18:	08002c51 	.word	0x08002c51
 8002c1c:	08002c39 	.word	0x08002c39
 8002c20:	08002c51 	.word	0x08002c51
 8002c24:	08002c51 	.word	0x08002c51
 8002c28:	08002c51 	.word	0x08002c51
 8002c2c:	08002c49 	.word	0x08002c49
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c36:	e06d      	b.n	8002d14 <UART_SetConfig+0x210>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c3e:	e069      	b.n	8002d14 <UART_SetConfig+0x210>
 8002c40:	2304      	movs	r3, #4
 8002c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c46:	e065      	b.n	8002d14 <UART_SetConfig+0x210>
 8002c48:	2308      	movs	r3, #8
 8002c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c4e:	e061      	b.n	8002d14 <UART_SetConfig+0x210>
 8002c50:	2310      	movs	r3, #16
 8002c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c56:	e05d      	b.n	8002d14 <UART_SetConfig+0x210>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <UART_SetConfig+0x2bc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d125      	bne.n	8002cae <UART_SetConfig+0x1aa>
 8002c62:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <UART_SetConfig+0x2b4>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c6c:	2b30      	cmp	r3, #48	; 0x30
 8002c6e:	d016      	beq.n	8002c9e <UART_SetConfig+0x19a>
 8002c70:	2b30      	cmp	r3, #48	; 0x30
 8002c72:	d818      	bhi.n	8002ca6 <UART_SetConfig+0x1a2>
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d00a      	beq.n	8002c8e <UART_SetConfig+0x18a>
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d814      	bhi.n	8002ca6 <UART_SetConfig+0x1a2>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <UART_SetConfig+0x182>
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d008      	beq.n	8002c96 <UART_SetConfig+0x192>
 8002c84:	e00f      	b.n	8002ca6 <UART_SetConfig+0x1a2>
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8c:	e042      	b.n	8002d14 <UART_SetConfig+0x210>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c94:	e03e      	b.n	8002d14 <UART_SetConfig+0x210>
 8002c96:	2304      	movs	r3, #4
 8002c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c9c:	e03a      	b.n	8002d14 <UART_SetConfig+0x210>
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca4:	e036      	b.n	8002d14 <UART_SetConfig+0x210>
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cac:	e032      	b.n	8002d14 <UART_SetConfig+0x210>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3f      	ldr	r2, [pc, #252]	; (8002db0 <UART_SetConfig+0x2ac>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d12a      	bne.n	8002d0e <UART_SetConfig+0x20a>
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <UART_SetConfig+0x2b4>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cc6:	d01a      	beq.n	8002cfe <UART_SetConfig+0x1fa>
 8002cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ccc:	d81b      	bhi.n	8002d06 <UART_SetConfig+0x202>
 8002cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd2:	d00c      	beq.n	8002cee <UART_SetConfig+0x1ea>
 8002cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd8:	d815      	bhi.n	8002d06 <UART_SetConfig+0x202>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <UART_SetConfig+0x1e2>
 8002cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce2:	d008      	beq.n	8002cf6 <UART_SetConfig+0x1f2>
 8002ce4:	e00f      	b.n	8002d06 <UART_SetConfig+0x202>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cec:	e012      	b.n	8002d14 <UART_SetConfig+0x210>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cf4:	e00e      	b.n	8002d14 <UART_SetConfig+0x210>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfc:	e00a      	b.n	8002d14 <UART_SetConfig+0x210>
 8002cfe:	2308      	movs	r3, #8
 8002d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d04:	e006      	b.n	8002d14 <UART_SetConfig+0x210>
 8002d06:	2310      	movs	r3, #16
 8002d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0c:	e002      	b.n	8002d14 <UART_SetConfig+0x210>
 8002d0e:	2310      	movs	r3, #16
 8002d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <UART_SetConfig+0x2ac>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	f040 808a 	bne.w	8002e34 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d824      	bhi.n	8002d72 <UART_SetConfig+0x26e>
 8002d28:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <UART_SetConfig+0x22c>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d55 	.word	0x08002d55
 8002d34:	08002d73 	.word	0x08002d73
 8002d38:	08002d5d 	.word	0x08002d5d
 8002d3c:	08002d73 	.word	0x08002d73
 8002d40:	08002d63 	.word	0x08002d63
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d73 	.word	0x08002d73
 8002d4c:	08002d73 	.word	0x08002d73
 8002d50:	08002d6b 	.word	0x08002d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d54:	f7fe ff7a 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8002d58:	61f8      	str	r0, [r7, #28]
        break;
 8002d5a:	e010      	b.n	8002d7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <UART_SetConfig+0x2c0>)
 8002d5e:	61fb      	str	r3, [r7, #28]
        break;
 8002d60:	e00d      	b.n	8002d7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d62:	f7fe fedb 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8002d66:	61f8      	str	r0, [r7, #28]
        break;
 8002d68:	e009      	b.n	8002d7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6e:	61fb      	str	r3, [r7, #28]
        break;
 8002d70:	e005      	b.n	8002d7e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8109 	beq.w	8002f98 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d305      	bcc.n	8002da2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d912      	bls.n	8002dc8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002da8:	e0f6      	b.n	8002f98 <UART_SetConfig+0x494>
 8002daa:	bf00      	nop
 8002dac:	efff69f3 	.word	0xefff69f3
 8002db0:	40008000 	.word	0x40008000
 8002db4:	40013800 	.word	0x40013800
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40004400 	.word	0x40004400
 8002dc0:	40004800 	.word	0x40004800
 8002dc4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	461c      	mov	r4, r3
 8002dce:	4615      	mov	r5, r2
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	022b      	lsls	r3, r5, #8
 8002dda:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002dde:	0222      	lsls	r2, r4, #8
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	6849      	ldr	r1, [r1, #4]
 8002de4:	0849      	lsrs	r1, r1, #1
 8002de6:	2000      	movs	r0, #0
 8002de8:	4688      	mov	r8, r1
 8002dea:	4681      	mov	r9, r0
 8002dec:	eb12 0a08 	adds.w	sl, r2, r8
 8002df0:	eb43 0b09 	adc.w	fp, r3, r9
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e02:	4650      	mov	r0, sl
 8002e04:	4659      	mov	r1, fp
 8002e06:	f7fd f9e3 	bl	80001d0 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4613      	mov	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e18:	d308      	bcc.n	8002e2c <UART_SetConfig+0x328>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e20:	d204      	bcs.n	8002e2c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	e0b5      	b.n	8002f98 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e32:	e0b1      	b.n	8002f98 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3c:	d15d      	bne.n	8002efa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d827      	bhi.n	8002e96 <UART_SetConfig+0x392>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <UART_SetConfig+0x348>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002e97 	.word	0x08002e97
 8002e5c:	08002e87 	.word	0x08002e87
 8002e60:	08002e97 	.word	0x08002e97
 8002e64:	08002e97 	.word	0x08002e97
 8002e68:	08002e97 	.word	0x08002e97
 8002e6c:	08002e8f 	.word	0x08002e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e70:	f7fe feec 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8002e74:	61f8      	str	r0, [r7, #28]
        break;
 8002e76:	e014      	b.n	8002ea2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e78:	f7fe fefe 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002e7c:	61f8      	str	r0, [r7, #28]
        break;
 8002e7e:	e010      	b.n	8002ea2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e80:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <UART_SetConfig+0x4b0>)
 8002e82:	61fb      	str	r3, [r7, #28]
        break;
 8002e84:	e00d      	b.n	8002ea2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e86:	f7fe fe49 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8002e8a:	61f8      	str	r0, [r7, #28]
        break;
 8002e8c:	e009      	b.n	8002ea2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	61fb      	str	r3, [r7, #28]
        break;
 8002e94:	e005      	b.n	8002ea2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d077      	beq.n	8002f98 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005a      	lsls	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0f      	cmp	r3, #15
 8002ec2:	d916      	bls.n	8002ef2 <UART_SetConfig+0x3ee>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eca:	d212      	bcs.n	8002ef2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f023 030f 	bic.w	r3, r3, #15
 8002ed4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	8afb      	ldrh	r3, [r7, #22]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	8afa      	ldrh	r2, [r7, #22]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	e052      	b.n	8002f98 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ef8:	e04e      	b.n	8002f98 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d827      	bhi.n	8002f52 <UART_SetConfig+0x44e>
 8002f02:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <UART_SetConfig+0x404>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f2d 	.word	0x08002f2d
 8002f0c:	08002f35 	.word	0x08002f35
 8002f10:	08002f3d 	.word	0x08002f3d
 8002f14:	08002f53 	.word	0x08002f53
 8002f18:	08002f43 	.word	0x08002f43
 8002f1c:	08002f53 	.word	0x08002f53
 8002f20:	08002f53 	.word	0x08002f53
 8002f24:	08002f53 	.word	0x08002f53
 8002f28:	08002f4b 	.word	0x08002f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f7fe fe8e 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8002f30:	61f8      	str	r0, [r7, #28]
        break;
 8002f32:	e014      	b.n	8002f5e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f34:	f7fe fea0 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002f38:	61f8      	str	r0, [r7, #28]
        break;
 8002f3a:	e010      	b.n	8002f5e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <UART_SetConfig+0x4b0>)
 8002f3e:	61fb      	str	r3, [r7, #28]
        break;
 8002f40:	e00d      	b.n	8002f5e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f42:	f7fe fdeb 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8002f46:	61f8      	str	r0, [r7, #28]
        break;
 8002f48:	e009      	b.n	8002f5e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4e:	61fb      	str	r3, [r7, #28]
        break;
 8002f50:	e005      	b.n	8002f5e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d019      	beq.n	8002f98 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	085a      	lsrs	r2, r3, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	441a      	add	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d909      	bls.n	8002f92 <UART_SetConfig+0x48e>
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d205      	bcs.n	8002f92 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	e002      	b.n	8002f98 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fa4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	00f42400 	.word	0x00f42400

08002fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01a      	beq.n	80030ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b6:	d10a      	bne.n	80030ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af02      	add	r7, sp, #8
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800310c:	f7fd fcf6 	bl	8000afc <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b08      	cmp	r3, #8
 800311e:	d10e      	bne.n	800313e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f82d 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e023      	b.n	8003186 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d10e      	bne.n	800316a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800314c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f817 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e00d      	b.n	8003186 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b09c      	sub	sp, #112	; 0x70
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319e:	e0a5      	b.n	80032ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	f000 80a1 	beq.w	80032ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031aa:	f7fd fca7 	bl	8000afc <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d302      	bcc.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80031ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d13e      	bne.n	800323e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031d4:	667b      	str	r3, [r7, #100]	; 0x64
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e6      	bne.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3308      	adds	r3, #8
 80031f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	663b      	str	r3, [r7, #96]	; 0x60
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003212:	64ba      	str	r2, [r7, #72]	; 0x48
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e5      	bne.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e067      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d04f      	beq.n	80032ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325a:	d147      	bne.n	80032ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003264:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800327a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
 8003286:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800328a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e6      	bne.n	8003266 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3308      	adds	r3, #8
 800329e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	613b      	str	r3, [r7, #16]
   return(result);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3308      	adds	r3, #8
 80032b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032b8:	623a      	str	r2, [r7, #32]
 80032ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	69f9      	ldr	r1, [r7, #28]
 80032be:	6a3a      	ldr	r2, [r7, #32]
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e5      	bne.n	8003298 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e010      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	429a      	cmp	r2, r3
 8003308:	f43f af4a 	beq.w	80031a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3770      	adds	r7, #112	; 0x70
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <__NVIC_SetPriority>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db0a      	blt.n	8003342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <__NVIC_SetPriority+0x4c>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	440b      	add	r3, r1
 800333c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003340:	e00a      	b.n	8003358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <__NVIC_SetPriority+0x50>)
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3b04      	subs	r3, #4
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	440b      	add	r3, r1
 8003356:	761a      	strb	r2, [r3, #24]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000e100 	.word	0xe000e100
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <SysTick_Handler+0x1c>)
 8003372:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003374:	f001 fcfe 	bl	8004d74 <xTaskGetSchedulerState>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d001      	beq.n	8003382 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800337e:	f002 fae3 	bl	8005948 <xPortSysTickHandler>
  }
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000e010 	.word	0xe000e010

0800338c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003390:	2100      	movs	r1, #0
 8003392:	f06f 0004 	mvn.w	r0, #4
 8003396:	f7ff ffbf 	bl	8003318 <__NVIC_SetPriority>
#endif
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033a6:	f3ef 8305 	mrs	r3, IPSR
 80033aa:	603b      	str	r3, [r7, #0]
  return(result);
 80033ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80033b2:	f06f 0305 	mvn.w	r3, #5
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	e00c      	b.n	80033d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <osKernelInitialize+0x44>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <osKernelInitialize+0x44>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	e002      	b.n	80033d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033d4:	687b      	ldr	r3, [r7, #4]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000108 	.word	0x20000108

080033e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ee:	f3ef 8305 	mrs	r3, IPSR
 80033f2:	603b      	str	r3, [r7, #0]
  return(result);
 80033f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <osKernelStart+0x1a>
    stat = osErrorISR;
 80033fa:	f06f 0305 	mvn.w	r3, #5
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	e010      	b.n	8003424 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <osKernelStart+0x48>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d109      	bne.n	800341e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800340a:	f7ff ffbf 	bl	800338c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <osKernelStart+0x48>)
 8003410:	2202      	movs	r2, #2
 8003412:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003414:	f001 f866 	bl	80044e4 <vTaskStartScheduler>
      stat = osOK;
 8003418:	2300      	movs	r3, #0
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	e002      	b.n	8003424 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003424:	687b      	ldr	r3, [r7, #4]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000108 	.word	0x20000108

08003434 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b08e      	sub	sp, #56	; 0x38
 8003438:	af04      	add	r7, sp, #16
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003444:	f3ef 8305 	mrs	r3, IPSR
 8003448:	617b      	str	r3, [r7, #20]
  return(result);
 800344a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800344c:	2b00      	cmp	r3, #0
 800344e:	d17e      	bne.n	800354e <osThreadNew+0x11a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d07b      	beq.n	800354e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800345a:	2318      	movs	r3, #24
 800345c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d045      	beq.n	80034fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <osThreadNew+0x48>
        name = attr->name;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <osThreadNew+0x6e>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b38      	cmp	r3, #56	; 0x38
 8003494:	d805      	bhi.n	80034a2 <osThreadNew+0x6e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <osThreadNew+0x72>
        return (NULL);
 80034a2:	2300      	movs	r3, #0
 80034a4:	e054      	b.n	8003550 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00e      	beq.n	80034dc <osThreadNew+0xa8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b5b      	cmp	r3, #91	; 0x5b
 80034c4:	d90a      	bls.n	80034dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <osThreadNew+0xa8>
        mem = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e010      	b.n	80034fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10c      	bne.n	80034fe <osThreadNew+0xca>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <osThreadNew+0xca>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <osThreadNew+0xca>
          mem = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e001      	b.n	80034fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d110      	bne.n	8003526 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800350c:	9202      	str	r2, [sp, #8]
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6a3a      	ldr	r2, [r7, #32]
 8003518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fe0c 	bl	8004138 <xTaskCreateStatic>
 8003520:	4603      	mov	r3, r0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	e013      	b.n	800354e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d110      	bne.n	800354e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	b29a      	uxth	r2, r3
 8003530:	f107 0310 	add.w	r3, r7, #16
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fe57 	bl	80041f2 <xTaskCreate>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d001      	beq.n	800354e <osThreadNew+0x11a>
            hTask = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800354e:	693b      	ldr	r3, [r7, #16]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003560:	f3ef 8305 	mrs	r3, IPSR
 8003564:	60bb      	str	r3, [r7, #8]
  return(result);
 8003566:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <osDelay+0x1c>
    stat = osErrorISR;
 800356c:	f06f 0305 	mvn.w	r3, #5
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e007      	b.n	8003584 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <osDelay+0x2c>
      vTaskDelay(ticks);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 ff7c 	bl	800447c <vTaskDelay>
    }
  }

  return (stat);
 8003584:	68fb      	ldr	r3, [r7, #12]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a07      	ldr	r2, [pc, #28]	; (80035bc <vApplicationGetIdleTaskMemory+0x2c>)
 80035a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4a06      	ldr	r2, [pc, #24]	; (80035c0 <vApplicationGetIdleTaskMemory+0x30>)
 80035a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	601a      	str	r2, [r3, #0]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	2000010c 	.word	0x2000010c
 80035c0:	20000168 	.word	0x20000168

080035c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a07      	ldr	r2, [pc, #28]	; (80035f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80035d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <vApplicationGetTimerTaskMemory+0x30>)
 80035da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e2:	601a      	str	r2, [r3, #0]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20000368 	.word	0x20000368
 80035f4:	200003c4 	.word	0x200003c4

080035f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f103 0208 	add.w	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f103 0208 	add.w	r2, r3, #8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f103 0208 	add.w	r2, r3, #8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	601a      	str	r2, [r3, #0]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d103      	bne.n	80036ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e00c      	b.n	80036d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3308      	adds	r3, #8
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e002      	b.n	80036c8 <vListInsert+0x2e>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d2f6      	bcs.n	80036c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6852      	ldr	r2, [r2, #4]
 800372c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d103      	bne.n	8003740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	1e5a      	subs	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800378a:	f002 f84b 	bl	8005824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	68f9      	ldr	r1, [r7, #12]
 8003798:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	441a      	add	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	3b01      	subs	r3, #1
 80037bc:	68f9      	ldr	r1, [r7, #12]
 80037be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	441a      	add	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	22ff      	movs	r2, #255	; 0xff
 80037d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d114      	bne.n	800380a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01a      	beq.n	800381e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3310      	adds	r3, #16
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 f903 	bl	80049f8 <xTaskRemoveFromEventList>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <xQueueGenericReset+0xcc>)
 80037fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	e009      	b.n	800381e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3310      	adds	r3, #16
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fef2 	bl	80035f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff feed 	bl	80035f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800381e:	f002 f831 	bl	8005884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003822:	2301      	movs	r3, #1
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	e000ed04 	.word	0xe000ed04

08003830 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08e      	sub	sp, #56	; 0x38
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003872:	bf00      	nop
 8003874:	e7fe      	b.n	8003874 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <xQueueGenericCreateStatic+0x52>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <xQueueGenericCreateStatic+0x56>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <xQueueGenericCreateStatic+0x58>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	623b      	str	r3, [r7, #32]
}
 800389e:	bf00      	nop
 80038a0:	e7fe      	b.n	80038a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <xQueueGenericCreateStatic+0x7e>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <xQueueGenericCreateStatic+0x82>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <xQueueGenericCreateStatic+0x84>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	61fb      	str	r3, [r7, #28]
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038ce:	2350      	movs	r3, #80	; 0x50
 80038d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b50      	cmp	r3, #80	; 0x50
 80038d6:	d00a      	beq.n	80038ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	61bb      	str	r3, [r7, #24]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003902:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f805 	bl	8003920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003918:	4618      	mov	r0, r3
 800391a:	3730      	adds	r7, #48	; 0x30
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e002      	b.n	8003942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800394e:	2101      	movs	r1, #1
 8003950:	69b8      	ldr	r0, [r7, #24]
 8003952:	f7ff ff05 	bl	8003760 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08e      	sub	sp, #56	; 0x38
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003976:	2300      	movs	r3, #0
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <xQueueGenericSend+0x32>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <xQueueGenericSend+0x40>
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <xQueueGenericSend+0x44>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <xQueueGenericSend+0x46>
 80039ac:	2300      	movs	r3, #0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <xQueueGenericSend+0x60>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d103      	bne.n	80039d6 <xQueueGenericSend+0x6e>
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <xQueueGenericSend+0x72>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <xQueueGenericSend+0x74>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	623b      	str	r3, [r7, #32]
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039f6:	f001 f9bd 	bl	8004d74 <xTaskGetSchedulerState>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <xQueueGenericSend+0x9e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <xQueueGenericSend+0xa2>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <xQueueGenericSend+0xa4>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <xQueueGenericSend+0xbe>
	__asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	61fb      	str	r3, [r7, #28]
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a26:	f001 fefd 	bl	8005824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <xQueueGenericSend+0xd4>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d129      	bne.n	8003a90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a42:	f000 fa0b 	bl	8003e5c <prvCopyDataToQueue>
 8003a46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	3324      	adds	r3, #36	; 0x24
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 ffcf 	bl	80049f8 <xTaskRemoveFromEventList>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a60:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <xQueueGenericSend+0x1f8>)
 8003a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	e00a      	b.n	8003a88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a78:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <xQueueGenericSend+0x1f8>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a88:	f001 fefc 	bl	8005884 <vPortExitCritical>
				return pdPASS;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e063      	b.n	8003b58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a96:	f001 fef5 	bl	8005884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e05c      	b.n	8003b58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 f809 	bl	8004ac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ab2:	f001 fee7 	bl	8005884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ab6:	f000 fd7b 	bl	80045b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aba:	f001 feb3 	bl	8005824 <vPortEnterCritical>
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d103      	bne.n	8003ad4 <xQueueGenericSend+0x16c>
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ada:	b25b      	sxtb	r3, r3
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d103      	bne.n	8003aea <xQueueGenericSend+0x182>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aea:	f001 fecb 	bl	8005884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aee:	1d3a      	adds	r2, r7, #4
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fff8 	bl	8004aec <xTaskCheckForTimeOut>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d124      	bne.n	8003b4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b04:	f000 faa2 	bl	800404c <prvIsQueueFull>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d018      	beq.n	8003b40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	3310      	adds	r3, #16
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 ff1e 	bl	8004958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b1e:	f000 fa2d 	bl	8003f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b22:	f000 fd53 	bl	80045cc <xTaskResumeAll>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f47f af7c 	bne.w	8003a26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <xQueueGenericSend+0x1f8>)
 8003b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	e772      	b.n	8003a26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b42:	f000 fa1b 	bl	8003f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b46:	f000 fd41 	bl	80045cc <xTaskResumeAll>
 8003b4a:	e76c      	b.n	8003a26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4e:	f000 fa15 	bl	8003f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b52:	f000 fd3b 	bl	80045cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3738      	adds	r7, #56	; 0x38
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b090      	sub	sp, #64	; 0x40
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <xQueueGenericSendFromISR+0x3c>
 8003b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <xQueueGenericSendFromISR+0x40>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <xQueueGenericSendFromISR+0x42>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d103      	bne.n	8003bce <xQueueGenericSendFromISR+0x6a>
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <xQueueGenericSendFromISR+0x6e>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <xQueueGenericSendFromISR+0x70>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	623b      	str	r3, [r7, #32]
}
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bee:	f001 fefb 	bl	80059e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	61fa      	str	r2, [r7, #28]
 8003c08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <xQueueGenericSendFromISR+0xbc>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d12f      	bne.n	8003c80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c36:	f000 f911 	bl	8003e5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d112      	bne.n	8003c6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d016      	beq.n	8003c7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fed1 	bl	80049f8 <xTaskRemoveFromEventList>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e007      	b.n	8003c7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c6e:	3301      	adds	r3, #1
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	b25a      	sxtb	r2, r3
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c7e:	e001      	b.n	8003c84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3740      	adds	r7, #64	; 0x40
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <xQueueReceive+0x30>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	623b      	str	r3, [r7, #32]
}
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <xQueueReceive+0x3e>
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <xQueueReceive+0x42>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueReceive+0x44>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xQueueReceive+0x5e>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	61fb      	str	r3, [r7, #28]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cfa:	f001 f83b 	bl	8004d74 <xTaskGetSchedulerState>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <xQueueReceive+0x6e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <xQueueReceive+0x72>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <xQueueReceive+0x74>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <xQueueReceive+0x8e>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	61bb      	str	r3, [r7, #24]
}
 8003d26:	bf00      	nop
 8003d28:	e7fe      	b.n	8003d28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d2a:	f001 fd7b 	bl	8005824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01f      	beq.n	8003d7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3e:	f000 f8f7 	bl	8003f30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00f      	beq.n	8003d72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	3310      	adds	r3, #16
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fe4e 	bl	80049f8 <xTaskRemoveFromEventList>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d62:	4b3d      	ldr	r3, [pc, #244]	; (8003e58 <xQueueReceive+0x1bc>)
 8003d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d72:	f001 fd87 	bl	8005884 <vPortExitCritical>
				return pdPASS;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e069      	b.n	8003e4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d80:	f001 fd80 	bl	8005884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e062      	b.n	8003e4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d8e:	f107 0310 	add.w	r3, r7, #16
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fe94 	bl	8004ac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d9c:	f001 fd72 	bl	8005884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003da0:	f000 fc06 	bl	80045b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003da4:	f001 fd3e 	bl	8005824 <vPortEnterCritical>
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dae:	b25b      	sxtb	r3, r3
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d103      	bne.n	8003dbe <xQueueReceive+0x122>
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc4:	b25b      	sxtb	r3, r3
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d103      	bne.n	8003dd4 <xQueueReceive+0x138>
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd4:	f001 fd56 	bl	8005884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dd8:	1d3a      	adds	r2, r7, #4
 8003dda:	f107 0310 	add.w	r3, r7, #16
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fe83 	bl	8004aec <xTaskCheckForTimeOut>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d123      	bne.n	8003e34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dee:	f000 f917 	bl	8004020 <prvIsQueueEmpty>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d017      	beq.n	8003e28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	3324      	adds	r3, #36	; 0x24
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fda9 	bl	8004958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e08:	f000 f8b8 	bl	8003f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e0c:	f000 fbde 	bl	80045cc <xTaskResumeAll>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d189      	bne.n	8003d2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <xQueueReceive+0x1bc>)
 8003e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	e780      	b.n	8003d2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e2a:	f000 f8a7 	bl	8003f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e2e:	f000 fbcd 	bl	80045cc <xTaskResumeAll>
 8003e32:	e77a      	b.n	8003d2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e36:	f000 f8a1 	bl	8003f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e3a:	f000 fbc7 	bl	80045cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e40:	f000 f8ee 	bl	8004020 <prvIsQueueEmpty>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f43f af6f 	beq.w	8003d2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3730      	adds	r7, #48	; 0x30
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d14d      	bne.n	8003f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 ff92 	bl	8004db0 <xTaskPriorityDisinherit>
 8003e8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	e043      	b.n	8003f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d119      	bne.n	8003ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6858      	ldr	r0, [r3, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	f001 ffec 	bl	8005e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d32b      	bcc.n	8003f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	e026      	b.n	8003f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68d8      	ldr	r0, [r3, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	f001 ffd2 	bl	8005e84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	425b      	negs	r3, r3
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d207      	bcs.n	8003f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	425b      	negs	r3, r3
 8003f06:	441a      	add	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d105      	bne.n	8003f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f26:	697b      	ldr	r3, [r7, #20]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d018      	beq.n	8003f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	441a      	add	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d303      	bcc.n	8003f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68d9      	ldr	r1, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6838      	ldr	r0, [r7, #0]
 8003f70:	f001 ff88 	bl	8005e84 <memcpy>
	}
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f84:	f001 fc4e 	bl	8005824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f90:	e011      	b.n	8003fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d012      	beq.n	8003fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3324      	adds	r3, #36	; 0x24
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fd2a 	bl	80049f8 <xTaskRemoveFromEventList>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003faa:	f000 fe01 	bl	8004bb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	dce9      	bgt.n	8003f92 <prvUnlockQueue+0x16>
 8003fbe:	e000      	b.n	8003fc2 <prvUnlockQueue+0x46>
					break;
 8003fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	22ff      	movs	r2, #255	; 0xff
 8003fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fca:	f001 fc5b 	bl	8005884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fce:	f001 fc29 	bl	8005824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fda:	e011      	b.n	8004000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d012      	beq.n	800400a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3310      	adds	r3, #16
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fd05 	bl	80049f8 <xTaskRemoveFromEventList>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ff4:	f000 fddc 	bl	8004bb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ff8:	7bbb      	ldrb	r3, [r7, #14]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004004:	2b00      	cmp	r3, #0
 8004006:	dce9      	bgt.n	8003fdc <prvUnlockQueue+0x60>
 8004008:	e000      	b.n	800400c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800400a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	22ff      	movs	r2, #255	; 0xff
 8004010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004014:	f001 fc36 	bl	8005884 <vPortExitCritical>
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004028:	f001 fbfc 	bl	8005824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e001      	b.n	800403e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800403e:	f001 fc21 	bl	8005884 <vPortExitCritical>

	return xReturn;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004054:	f001 fbe6 	bl	8005824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	429a      	cmp	r2, r3
 8004062:	d102      	bne.n	800406a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e001      	b.n	800406e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800406e:	f001 fc09 	bl	8005884 <vPortExitCritical>

	return xReturn;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e014      	b.n	80040b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800408c:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <vQueueAddToRegistry+0x50>)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004098:	490c      	ldr	r1, [pc, #48]	; (80040cc <vQueueAddToRegistry+0x50>)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <vQueueAddToRegistry+0x50>)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040ae:	e006      	b.n	80040be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3301      	adds	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b07      	cmp	r3, #7
 80040ba:	d9e7      	bls.n	800408c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	200007c4 	.word	0x200007c4

080040d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040e0:	f001 fba0 	bl	8005824 <vPortEnterCritical>
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ea:	b25b      	sxtb	r3, r3
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d103      	bne.n	80040fa <vQueueWaitForMessageRestricted+0x2a>
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004100:	b25b      	sxtb	r3, r3
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d103      	bne.n	8004110 <vQueueWaitForMessageRestricted+0x40>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004110:	f001 fbb8 	bl	8005884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d106      	bne.n	800412a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	3324      	adds	r3, #36	; 0x24
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fc3b 	bl	80049a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800412a:	6978      	ldr	r0, [r7, #20]
 800412c:	f7ff ff26 	bl	8003f7c <prvUnlockQueue>
	}
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	; 0x38
 800413c:	af04      	add	r7, sp, #16
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xTaskCreateStatic+0x2a>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	623b      	str	r3, [r7, #32]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <xTaskCreateStatic+0x46>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	61fb      	str	r3, [r7, #28]
}
 800417a:	bf00      	nop
 800417c:	e7fe      	b.n	800417c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800417e:	235c      	movs	r3, #92	; 0x5c
 8004180:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b5c      	cmp	r3, #92	; 0x5c
 8004186:	d00a      	beq.n	800419e <xTaskCreateStatic+0x66>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	61bb      	str	r3, [r7, #24]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800419e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01e      	beq.n	80041e4 <xTaskCreateStatic+0xac>
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01b      	beq.n	80041e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041be:	2300      	movs	r3, #0
 80041c0:	9303      	str	r3, [sp, #12]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	9302      	str	r3, [sp, #8]
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f850 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041de:	f000 f8dd 	bl	800439c <prvAddNewTaskToReadyList>
 80041e2:	e001      	b.n	80041e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041e8:	697b      	ldr	r3, [r7, #20]
	}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b08c      	sub	sp, #48	; 0x30
 80041f6:	af04      	add	r7, sp, #16
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fc2e 	bl	8005a68 <pvPortMalloc>
 800420c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004214:	205c      	movs	r0, #92	; 0x5c
 8004216:	f001 fc27 	bl	8005a68 <pvPortMalloc>
 800421a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
 8004228:	e005      	b.n	8004236 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f001 fce8 	bl	8005c00 <vPortFree>
 8004230:	e001      	b.n	8004236 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d017      	beq.n	800426c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	2300      	movs	r3, #0
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f80e 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004260:	69f8      	ldr	r0, [r7, #28]
 8004262:	f000 f89b 	bl	800439c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e002      	b.n	8004272 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
 8004270:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004272:	69bb      	ldr	r3, [r7, #24]
	}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	461a      	mov	r2, r3
 8004294:	21a5      	movs	r1, #165	; 0xa5
 8004296:	f001 fe03 	bl	8005ea0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042a4:	3b01      	subs	r3, #1
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f023 0307 	bic.w	r3, r3, #7
 80042b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	617b      	str	r3, [r7, #20]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01f      	beq.n	800431a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e012      	b.n	8004306 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	7819      	ldrb	r1, [r3, #0]
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	3334      	adds	r3, #52	; 0x34
 80042f0:	460a      	mov	r2, r1
 80042f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d006      	beq.n	800430e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	3301      	adds	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d9e9      	bls.n	80042e0 <prvInitialiseNewTask+0x64>
 800430c:	e000      	b.n	8004310 <prvInitialiseNewTask+0x94>
			{
				break;
 800430e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004318:	e003      	b.n	8004322 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	2b37      	cmp	r3, #55	; 0x37
 8004326:	d901      	bls.n	800432c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004328:	2337      	movs	r3, #55	; 0x37
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004336:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	2200      	movs	r2, #0
 800433c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	3304      	adds	r3, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f978 	bl	8003638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	3318      	adds	r3, #24
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f973 	bl	8003638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004356:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004366:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	2200      	movs	r2, #0
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	69b8      	ldr	r0, [r7, #24]
 800437c:	f001 f928 	bl	80055d0 <pxPortInitialiseStack>
 8004380:	4602      	mov	r2, r0
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004392:	bf00      	nop
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043a4:	f001 fa3e 	bl	8005824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <prvAddNewTaskToReadyList+0xc4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	4a2c      	ldr	r2, [pc, #176]	; (8004460 <prvAddNewTaskToReadyList+0xc4>)
 80043b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043b2:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043ba:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043c0:	4b27      	ldr	r3, [pc, #156]	; (8004460 <prvAddNewTaskToReadyList+0xc4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d110      	bne.n	80043ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043c8:	f000 fc16 	bl	8004bf8 <prvInitialiseTaskLists>
 80043cc:	e00d      	b.n	80043ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043ce:	4b26      	ldr	r3, [pc, #152]	; (8004468 <prvAddNewTaskToReadyList+0xcc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043d6:	4b23      	ldr	r3, [pc, #140]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d802      	bhi.n	80043ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043e4:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <prvAddNewTaskToReadyList+0xd0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <prvAddNewTaskToReadyList+0xd0>)
 80043f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <prvAddNewTaskToReadyList+0xd0>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <prvAddNewTaskToReadyList+0xd4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d903      	bls.n	8004410 <prvAddNewTaskToReadyList+0x74>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <prvAddNewTaskToReadyList+0xd4>)
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <prvAddNewTaskToReadyList+0xd8>)
 800441e:	441a      	add	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f7ff f913 	bl	8003652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800442c:	f001 fa2a 	bl	8005884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <prvAddNewTaskToReadyList+0xcc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <prvAddNewTaskToReadyList+0xc8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	429a      	cmp	r2, r3
 8004444:	d207      	bcs.n	8004456 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <prvAddNewTaskToReadyList+0xdc>)
 8004448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000cd8 	.word	0x20000cd8
 8004464:	20000804 	.word	0x20000804
 8004468:	20000ce4 	.word	0x20000ce4
 800446c:	20000cf4 	.word	0x20000cf4
 8004470:	20000ce0 	.word	0x20000ce0
 8004474:	20000808 	.word	0x20000808
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d017      	beq.n	80044be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <vTaskDelay+0x60>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <vTaskDelay+0x30>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60bb      	str	r3, [r7, #8]
}
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044ac:	f000 f880 	bl	80045b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044b0:	2100      	movs	r1, #0
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fcea 	bl	8004e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044b8:	f000 f888 	bl	80045cc <xTaskResumeAll>
 80044bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d107      	bne.n	80044d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <vTaskDelay+0x64>)
 80044c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000d00 	.word	0x20000d00
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044f2:	463a      	mov	r2, r7
 80044f4:	1d39      	adds	r1, r7, #4
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff f848 	bl	8003590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	9202      	str	r2, [sp, #8]
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	2300      	movs	r3, #0
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	2300      	movs	r3, #0
 8004510:	460a      	mov	r2, r1
 8004512:	4921      	ldr	r1, [pc, #132]	; (8004598 <vTaskStartScheduler+0xb4>)
 8004514:	4821      	ldr	r0, [pc, #132]	; (800459c <vTaskStartScheduler+0xb8>)
 8004516:	f7ff fe0f 	bl	8004138 <xTaskCreateStatic>
 800451a:	4603      	mov	r3, r0
 800451c:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <vTaskStartScheduler+0xbc>)
 800451e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004520:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <vTaskStartScheduler+0xbc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e001      	b.n	8004532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004538:	f000 fcfc 	bl	8004f34 <xTimerCreateTimerTask>
 800453c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d116      	bne.n	8004572 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	613b      	str	r3, [r7, #16]
}
 8004556:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004558:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <vTaskStartScheduler+0xc0>)
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <vTaskStartScheduler+0xc4>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <vTaskStartScheduler+0xc8>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800456c:	f001 f8b8 	bl	80056e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004570:	e00e      	b.n	8004590 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d10a      	bne.n	8004590 <vTaskStartScheduler+0xac>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60fb      	str	r3, [r7, #12]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <vTaskStartScheduler+0xaa>
}
 8004590:	bf00      	nop
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	08005f00 	.word	0x08005f00
 800459c:	08004bc9 	.word	0x08004bc9
 80045a0:	20000cfc 	.word	0x20000cfc
 80045a4:	20000cf8 	.word	0x20000cf8
 80045a8:	20000ce4 	.word	0x20000ce4
 80045ac:	20000cdc 	.word	0x20000cdc

080045b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <vTaskSuspendAll+0x18>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a03      	ldr	r2, [pc, #12]	; (80045c8 <vTaskSuspendAll+0x18>)
 80045bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	20000d00 	.word	0x20000d00

080045cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045da:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <xTaskResumeAll+0x118>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	603b      	str	r3, [r7, #0]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045f8:	f001 f914 	bl	8005824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045fc:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <xTaskResumeAll+0x118>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3b01      	subs	r3, #1
 8004602:	4a38      	ldr	r2, [pc, #224]	; (80046e4 <xTaskResumeAll+0x118>)
 8004604:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004606:	4b37      	ldr	r3, [pc, #220]	; (80046e4 <xTaskResumeAll+0x118>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d162      	bne.n	80046d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800460e:	4b36      	ldr	r3, [pc, #216]	; (80046e8 <xTaskResumeAll+0x11c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d05e      	beq.n	80046d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004616:	e02f      	b.n	8004678 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004618:	4b34      	ldr	r3, [pc, #208]	; (80046ec <xTaskResumeAll+0x120>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3318      	adds	r3, #24
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff f871 	bl	800370c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff f86c 	bl	800370c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <xTaskResumeAll+0x124>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d903      	bls.n	8004648 <xTaskResumeAll+0x7c>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <xTaskResumeAll+0x124>)
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4a27      	ldr	r2, [pc, #156]	; (80046f4 <xTaskResumeAll+0x128>)
 8004656:	441a      	add	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7fe fff7 	bl	8003652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <xTaskResumeAll+0x12c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004672:	4b22      	ldr	r3, [pc, #136]	; (80046fc <xTaskResumeAll+0x130>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004678:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <xTaskResumeAll+0x120>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1cb      	bne.n	8004618 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004686:	f000 fb55 	bl	8004d34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <xTaskResumeAll+0x134>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d010      	beq.n	80046b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004696:	f000 f847 	bl	8004728 <xTaskIncrementTick>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <xTaskResumeAll+0x130>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f1      	bne.n	8004696 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <xTaskResumeAll+0x134>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <xTaskResumeAll+0x130>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <xTaskResumeAll+0x138>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046d4:	f001 f8d6 	bl	8005884 <vPortExitCritical>

	return xAlreadyYielded;
 80046d8:	68bb      	ldr	r3, [r7, #8]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000d00 	.word	0x20000d00
 80046e8:	20000cd8 	.word	0x20000cd8
 80046ec:	20000c98 	.word	0x20000c98
 80046f0:	20000ce0 	.word	0x20000ce0
 80046f4:	20000808 	.word	0x20000808
 80046f8:	20000804 	.word	0x20000804
 80046fc:	20000cec 	.word	0x20000cec
 8004700:	20000ce8 	.word	0x20000ce8
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <xTaskGetTickCount+0x1c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004714:	687b      	ldr	r3, [r7, #4]
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000cdc 	.word	0x20000cdc

08004728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004732:	4b4f      	ldr	r3, [pc, #316]	; (8004870 <xTaskIncrementTick+0x148>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f040 808f 	bne.w	800485a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800473c:	4b4d      	ldr	r3, [pc, #308]	; (8004874 <xTaskIncrementTick+0x14c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004744:	4a4b      	ldr	r2, [pc, #300]	; (8004874 <xTaskIncrementTick+0x14c>)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d120      	bne.n	8004792 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004750:	4b49      	ldr	r3, [pc, #292]	; (8004878 <xTaskIncrementTick+0x150>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <xTaskIncrementTick+0x48>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	603b      	str	r3, [r7, #0]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xTaskIncrementTick+0x46>
 8004770:	4b41      	ldr	r3, [pc, #260]	; (8004878 <xTaskIncrementTick+0x150>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b41      	ldr	r3, [pc, #260]	; (800487c <xTaskIncrementTick+0x154>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a3f      	ldr	r2, [pc, #252]	; (8004878 <xTaskIncrementTick+0x150>)
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4a3f      	ldr	r2, [pc, #252]	; (800487c <xTaskIncrementTick+0x154>)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <xTaskIncrementTick+0x158>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	4a3d      	ldr	r2, [pc, #244]	; (8004880 <xTaskIncrementTick+0x158>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	f000 fad1 	bl	8004d34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004792:	4b3c      	ldr	r3, [pc, #240]	; (8004884 <xTaskIncrementTick+0x15c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d349      	bcc.n	8004830 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800479c:	4b36      	ldr	r3, [pc, #216]	; (8004878 <xTaskIncrementTick+0x150>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <xTaskIncrementTick+0x15c>)
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	601a      	str	r2, [r3, #0]
					break;
 80047ae:	e03f      	b.n	8004830 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b0:	4b31      	ldr	r3, [pc, #196]	; (8004878 <xTaskIncrementTick+0x150>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d203      	bcs.n	80047d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047c8:	4a2e      	ldr	r2, [pc, #184]	; (8004884 <xTaskIncrementTick+0x15c>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047ce:	e02f      	b.n	8004830 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe ff99 	bl	800370c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	3318      	adds	r3, #24
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe ff90 	bl	800370c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	4b25      	ldr	r3, [pc, #148]	; (8004888 <xTaskIncrementTick+0x160>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d903      	bls.n	8004800 <xTaskIncrementTick+0xd8>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <xTaskIncrementTick+0x160>)
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <xTaskIncrementTick+0x164>)
 800480e:	441a      	add	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7fe ff1b 	bl	8003652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <xTaskIncrementTick+0x168>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	429a      	cmp	r2, r3
 8004828:	d3b8      	bcc.n	800479c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800482a:	2301      	movs	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800482e:	e7b5      	b.n	800479c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <xTaskIncrementTick+0x168>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	4915      	ldr	r1, [pc, #84]	; (800488c <xTaskIncrementTick+0x164>)
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d901      	bls.n	800484c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004848:	2301      	movs	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <xTaskIncrementTick+0x16c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004854:	2301      	movs	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e004      	b.n	8004864 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800485a:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <xTaskIncrementTick+0x170>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <xTaskIncrementTick+0x170>)
 8004862:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004864:	697b      	ldr	r3, [r7, #20]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000d00 	.word	0x20000d00
 8004874:	20000cdc 	.word	0x20000cdc
 8004878:	20000c90 	.word	0x20000c90
 800487c:	20000c94 	.word	0x20000c94
 8004880:	20000cf0 	.word	0x20000cf0
 8004884:	20000cf8 	.word	0x20000cf8
 8004888:	20000ce0 	.word	0x20000ce0
 800488c:	20000808 	.word	0x20000808
 8004890:	20000804 	.word	0x20000804
 8004894:	20000cec 	.word	0x20000cec
 8004898:	20000ce8 	.word	0x20000ce8

0800489c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048a2:	4b28      	ldr	r3, [pc, #160]	; (8004944 <vTaskSwitchContext+0xa8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048aa:	4b27      	ldr	r3, [pc, #156]	; (8004948 <vTaskSwitchContext+0xac>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048b0:	e041      	b.n	8004936 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80048b2:	4b25      	ldr	r3, [pc, #148]	; (8004948 <vTaskSwitchContext+0xac>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b8:	4b24      	ldr	r3, [pc, #144]	; (800494c <vTaskSwitchContext+0xb0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e010      	b.n	80048e2 <vTaskSwitchContext+0x46>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <vTaskSwitchContext+0x40>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	607b      	str	r3, [r7, #4]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <vTaskSwitchContext+0x3e>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	491b      	ldr	r1, [pc, #108]	; (8004950 <vTaskSwitchContext+0xb4>)
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0e4      	beq.n	80048c0 <vTaskSwitchContext+0x24>
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4a13      	ldr	r2, [pc, #76]	; (8004950 <vTaskSwitchContext+0xb4>)
 8004902:	4413      	add	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	605a      	str	r2, [r3, #4]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	3308      	adds	r3, #8
 8004918:	429a      	cmp	r2, r3
 800491a:	d104      	bne.n	8004926 <vTaskSwitchContext+0x8a>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a09      	ldr	r2, [pc, #36]	; (8004954 <vTaskSwitchContext+0xb8>)
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4a06      	ldr	r2, [pc, #24]	; (800494c <vTaskSwitchContext+0xb0>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6013      	str	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000d00 	.word	0x20000d00
 8004948:	20000cec 	.word	0x20000cec
 800494c:	20000ce0 	.word	0x20000ce0
 8004950:	20000808 	.word	0x20000808
 8004954:	20000804 	.word	0x20000804

08004958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	60fb      	str	r3, [r7, #12]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <vTaskPlaceOnEventList+0x44>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3318      	adds	r3, #24
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fe fe87 	bl	800369a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800498c:	2101      	movs	r1, #1
 800498e:	6838      	ldr	r0, [r7, #0]
 8004990:	f000 fa7c 	bl	8004e8c <prvAddCurrentTaskToDelayedList>
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000804 	.word	0x20000804

080049a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	617b      	str	r3, [r7, #20]
}
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3318      	adds	r3, #24
 80049ce:	4619      	mov	r1, r3
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7fe fe3e 	bl	8003652 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
 80049e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	68b8      	ldr	r0, [r7, #8]
 80049e6:	f000 fa51 	bl	8004e8c <prvAddCurrentTaskToDelayedList>
	}
 80049ea:	bf00      	nop
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000804 	.word	0x20000804

080049f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60fb      	str	r3, [r7, #12]
}
 8004a20:	bf00      	nop
 8004a22:	e7fe      	b.n	8004a22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	3318      	adds	r3, #24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe fe6f 	bl	800370c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a2e:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <xTaskRemoveFromEventList+0xb0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d11d      	bne.n	8004a72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fe66 	bl	800370c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a44:	4b19      	ldr	r3, [pc, #100]	; (8004aac <xTaskRemoveFromEventList+0xb4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d903      	bls.n	8004a54 <xTaskRemoveFromEventList+0x5c>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	4a16      	ldr	r2, [pc, #88]	; (8004aac <xTaskRemoveFromEventList+0xb4>)
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <xTaskRemoveFromEventList+0xb8>)
 8004a62:	441a      	add	r2, r3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f7fe fdf1 	bl	8003652 <vListInsertEnd>
 8004a70:	e005      	b.n	8004a7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3318      	adds	r3, #24
 8004a76:	4619      	mov	r1, r3
 8004a78:	480e      	ldr	r0, [pc, #56]	; (8004ab4 <xTaskRemoveFromEventList+0xbc>)
 8004a7a:	f7fe fdea 	bl	8003652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <xTaskRemoveFromEventList+0xc0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d905      	bls.n	8004a98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <xTaskRemoveFromEventList+0xc4>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e001      	b.n	8004a9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a9c:	697b      	ldr	r3, [r7, #20]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000d00 	.word	0x20000d00
 8004aac:	20000ce0 	.word	0x20000ce0
 8004ab0:	20000808 	.word	0x20000808
 8004ab4:	20000c98 	.word	0x20000c98
 8004ab8:	20000804 	.word	0x20000804
 8004abc:	20000cec 	.word	0x20000cec

08004ac0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <vTaskInternalSetTimeOutState+0x24>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <vTaskInternalSetTimeOutState+0x28>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	605a      	str	r2, [r3, #4]
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000cf0 	.word	0x20000cf0
 8004ae8:	20000cdc 	.word	0x20000cdc

08004aec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	613b      	str	r3, [r7, #16]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60fb      	str	r3, [r7, #12]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b2e:	f000 fe79 	bl	8005824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b32:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <xTaskCheckForTimeOut+0xbc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d102      	bne.n	8004b52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e023      	b.n	8004b9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <xTaskCheckForTimeOut+0xc0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d007      	beq.n	8004b6e <xTaskCheckForTimeOut+0x82>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d302      	bcc.n	8004b6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	e015      	b.n	8004b9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d20b      	bcs.n	8004b90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff9b 	bl	8004ac0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e004      	b.n	8004b9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b96:	2301      	movs	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b9a:	f000 fe73 	bl	8005884 <vPortExitCritical>

	return xReturn;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3720      	adds	r7, #32
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000cdc 	.word	0x20000cdc
 8004bac:	20000cf0 	.word	0x20000cf0

08004bb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <vTaskMissedYield+0x14>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
}
 8004bba:	bf00      	nop
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	20000cec 	.word	0x20000cec

08004bc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bd0:	f000 f852 	bl	8004c78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <prvIdleTask+0x28>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d9f9      	bls.n	8004bd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <prvIdleTask+0x2c>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bec:	e7f0      	b.n	8004bd0 <prvIdleTask+0x8>
 8004bee:	bf00      	nop
 8004bf0:	20000808 	.word	0x20000808
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	e00c      	b.n	8004c1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4a12      	ldr	r2, [pc, #72]	; (8004c58 <prvInitialiseTaskLists+0x60>)
 8004c10:	4413      	add	r3, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe fcf0 	bl	80035f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b37      	cmp	r3, #55	; 0x37
 8004c22:	d9ef      	bls.n	8004c04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c24:	480d      	ldr	r0, [pc, #52]	; (8004c5c <prvInitialiseTaskLists+0x64>)
 8004c26:	f7fe fce7 	bl	80035f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c2a:	480d      	ldr	r0, [pc, #52]	; (8004c60 <prvInitialiseTaskLists+0x68>)
 8004c2c:	f7fe fce4 	bl	80035f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c30:	480c      	ldr	r0, [pc, #48]	; (8004c64 <prvInitialiseTaskLists+0x6c>)
 8004c32:	f7fe fce1 	bl	80035f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c36:	480c      	ldr	r0, [pc, #48]	; (8004c68 <prvInitialiseTaskLists+0x70>)
 8004c38:	f7fe fcde 	bl	80035f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c3c:	480b      	ldr	r0, [pc, #44]	; (8004c6c <prvInitialiseTaskLists+0x74>)
 8004c3e:	f7fe fcdb 	bl	80035f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <prvInitialiseTaskLists+0x78>)
 8004c44:	4a05      	ldr	r2, [pc, #20]	; (8004c5c <prvInitialiseTaskLists+0x64>)
 8004c46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <prvInitialiseTaskLists+0x7c>)
 8004c4a:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <prvInitialiseTaskLists+0x68>)
 8004c4c:	601a      	str	r2, [r3, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000808 	.word	0x20000808
 8004c5c:	20000c68 	.word	0x20000c68
 8004c60:	20000c7c 	.word	0x20000c7c
 8004c64:	20000c98 	.word	0x20000c98
 8004c68:	20000cac 	.word	0x20000cac
 8004c6c:	20000cc4 	.word	0x20000cc4
 8004c70:	20000c90 	.word	0x20000c90
 8004c74:	20000c94 	.word	0x20000c94

08004c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c7e:	e019      	b.n	8004cb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c80:	f000 fdd0 	bl	8005824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <prvCheckTasksWaitingTermination+0x50>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fd3b 	bl	800370c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <prvCheckTasksWaitingTermination+0x54>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ccc <prvCheckTasksWaitingTermination+0x54>)
 8004c9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <prvCheckTasksWaitingTermination+0x58>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <prvCheckTasksWaitingTermination+0x58>)
 8004ca8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004caa:	f000 fdeb 	bl	8005884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f810 	bl	8004cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <prvCheckTasksWaitingTermination+0x58>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e1      	bne.n	8004c80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000cac 	.word	0x20000cac
 8004ccc:	20000cd8 	.word	0x20000cd8
 8004cd0:	20000cc0 	.word	0x20000cc0

08004cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 ff88 	bl	8005c00 <vPortFree>
				vPortFree( pxTCB );
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 ff85 	bl	8005c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cf6:	e018      	b.n	8004d2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d103      	bne.n	8004d0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 ff7c 	bl	8005c00 <vPortFree>
	}
 8004d08:	e00f      	b.n	8004d2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d00a      	beq.n	8004d2a <prvDeleteTCB+0x56>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60fb      	str	r3, [r7, #12]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <prvDeleteTCB+0x54>
	}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <prvResetNextTaskUnblockTime+0x38>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <prvResetNextTaskUnblockTime+0x3c>)
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d4c:	e008      	b.n	8004d60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <prvResetNextTaskUnblockTime+0x38>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a04      	ldr	r2, [pc, #16]	; (8004d70 <prvResetNextTaskUnblockTime+0x3c>)
 8004d5e:	6013      	str	r3, [r2, #0]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000c90 	.word	0x20000c90
 8004d70:	20000cf8 	.word	0x20000cf8

08004d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <xTaskGetSchedulerState+0x34>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d82:	2301      	movs	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	e008      	b.n	8004d9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <xTaskGetSchedulerState+0x38>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d90:	2302      	movs	r3, #2
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e001      	b.n	8004d9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d9a:	687b      	ldr	r3, [r7, #4]
	}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000ce4 	.word	0x20000ce4
 8004dac:	20000d00 	.word	0x20000d00

08004db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d056      	beq.n	8004e74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004dc6:	4b2e      	ldr	r3, [pc, #184]	; (8004e80 <xTaskPriorityDisinherit+0xd0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d00a      	beq.n	8004de6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60fb      	str	r3, [r7, #12]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	60bb      	str	r3, [r7, #8]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e08:	1e5a      	subs	r2, r3, #1
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d02c      	beq.n	8004e74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d128      	bne.n	8004e74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe fc70 	bl	800370c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e44:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <xTaskPriorityDisinherit+0xd4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d903      	bls.n	8004e54 <xTaskPriorityDisinherit+0xa4>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <xTaskPriorityDisinherit+0xd4>)
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4a09      	ldr	r2, [pc, #36]	; (8004e88 <xTaskPriorityDisinherit+0xd8>)
 8004e62:	441a      	add	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7fe fbf1 	bl	8003652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e74:	697b      	ldr	r3, [r7, #20]
	}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000804 	.word	0x20000804
 8004e84:	20000ce0 	.word	0x20000ce0
 8004e88:	20000808 	.word	0x20000808

08004e8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e96:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <prvAddCurrentTaskToDelayedList+0x90>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e9c:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fc32 	bl	800370c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d10a      	bne.n	8004ec6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4819      	ldr	r0, [pc, #100]	; (8004f24 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ec0:	f7fe fbc7 	bl	8003652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ec4:	e026      	b.n	8004f14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d209      	bcs.n	8004ef2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fe fbd5 	bl	800369a <vListInsert>
}
 8004ef0:	e010      	b.n	8004f14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef2:	4b0e      	ldr	r3, [pc, #56]	; (8004f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f7fe fbcb 	bl	800369a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d202      	bcs.n	8004f14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f0e:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000cdc 	.word	0x20000cdc
 8004f20:	20000804 	.word	0x20000804
 8004f24:	20000cc4 	.word	0x20000cc4
 8004f28:	20000c94 	.word	0x20000c94
 8004f2c:	20000c90 	.word	0x20000c90
 8004f30:	20000cf8 	.word	0x20000cf8

08004f34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f3e:	f000 fb07 	bl	8005550 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <xTimerCreateTimerTask+0x80>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d021      	beq.n	8004f8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f52:	1d3a      	adds	r2, r7, #4
 8004f54:	f107 0108 	add.w	r1, r7, #8
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe fb31 	bl	80035c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	9202      	str	r2, [sp, #8]
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2300      	movs	r3, #0
 8004f72:	460a      	mov	r2, r1
 8004f74:	4910      	ldr	r1, [pc, #64]	; (8004fb8 <xTimerCreateTimerTask+0x84>)
 8004f76:	4811      	ldr	r0, [pc, #68]	; (8004fbc <xTimerCreateTimerTask+0x88>)
 8004f78:	f7ff f8de 	bl	8004138 <xTaskCreateStatic>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4a10      	ldr	r2, [pc, #64]	; (8004fc0 <xTimerCreateTimerTask+0x8c>)
 8004f80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f82:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <xTimerCreateTimerTask+0x8c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	613b      	str	r3, [r7, #16]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004faa:	697b      	ldr	r3, [r7, #20]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000d34 	.word	0x20000d34
 8004fb8:	08005f08 	.word	0x08005f08
 8004fbc:	080050f9 	.word	0x080050f9
 8004fc0:	20000d38 	.word	0x20000d38

08004fc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	623b      	str	r3, [r7, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ff2:	4b1a      	ldr	r3, [pc, #104]	; (800505c <xTimerGenericCommand+0x98>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d02a      	beq.n	8005050 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b05      	cmp	r3, #5
 800500a:	dc18      	bgt.n	800503e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800500c:	f7ff feb2 	bl	8004d74 <xTaskGetSchedulerState>
 8005010:	4603      	mov	r3, r0
 8005012:	2b02      	cmp	r3, #2
 8005014:	d109      	bne.n	800502a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <xTimerGenericCommand+0x98>)
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	f107 0110 	add.w	r1, r7, #16
 800501e:	2300      	movs	r3, #0
 8005020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005022:	f7fe fca1 	bl	8003968 <xQueueGenericSend>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24
 8005028:	e012      	b.n	8005050 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800502a:	4b0c      	ldr	r3, [pc, #48]	; (800505c <xTimerGenericCommand+0x98>)
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	f107 0110 	add.w	r1, r7, #16
 8005032:	2300      	movs	r3, #0
 8005034:	2200      	movs	r2, #0
 8005036:	f7fe fc97 	bl	8003968 <xQueueGenericSend>
 800503a:	6278      	str	r0, [r7, #36]	; 0x24
 800503c:	e008      	b.n	8005050 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <xTimerGenericCommand+0x98>)
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f107 0110 	add.w	r1, r7, #16
 8005046:	2300      	movs	r3, #0
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	f7fe fd8b 	bl	8003b64 <xQueueGenericSendFromISR>
 800504e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005052:	4618      	mov	r0, r3
 8005054:	3728      	adds	r7, #40	; 0x28
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000d34 	.word	0x20000d34

08005060 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <prvProcessExpiredTimer+0x94>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	3304      	adds	r3, #4
 8005078:	4618      	mov	r0, r3
 800507a:	f7fe fb47 	bl	800370c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d022      	beq.n	80050d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	18d1      	adds	r1, r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	6978      	ldr	r0, [r7, #20]
 800509a:	f000 f8d1 	bl	8005240 <prvInsertTimerInActiveList>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01f      	beq.n	80050e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050a4:	2300      	movs	r3, #0
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	2100      	movs	r1, #0
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff ff88 	bl	8004fc4 <xTimerGenericCommand>
 80050b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d113      	bne.n	80050e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60fb      	str	r3, [r7, #12]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	4798      	blx	r3
}
 80050ec:	bf00      	nop
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000d2c 	.word	0x20000d2c

080050f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005100:	f107 0308 	add.w	r3, r7, #8
 8005104:	4618      	mov	r0, r3
 8005106:	f000 f857 	bl	80051b8 <prvGetNextExpireTime>
 800510a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4619      	mov	r1, r3
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f803 	bl	800511c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005116:	f000 f8d5 	bl	80052c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800511a:	e7f1      	b.n	8005100 <prvTimerTask+0x8>

0800511c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005126:	f7ff fa43 	bl	80045b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800512a:	f107 0308 	add.w	r3, r7, #8
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f866 	bl	8005200 <prvSampleTimeNow>
 8005134:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d130      	bne.n	800519e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <prvProcessTimerOrBlockTask+0x3c>
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	429a      	cmp	r2, r3
 8005148:	d806      	bhi.n	8005158 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800514a:	f7ff fa3f 	bl	80045cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff85 	bl	8005060 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005156:	e024      	b.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <prvProcessTimerOrBlockTask+0x90>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <prvProcessTimerOrBlockTask+0x50>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <prvProcessTimerOrBlockTask+0x52>
 800516c:	2300      	movs	r3, #0
 800516e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <prvProcessTimerOrBlockTask+0x94>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	4619      	mov	r1, r3
 800517e:	f7fe ffa7 	bl	80040d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005182:	f7ff fa23 	bl	80045cc <xTaskResumeAll>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <prvProcessTimerOrBlockTask+0x98>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
}
 800519c:	e001      	b.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800519e:	f7ff fa15 	bl	80045cc <xTaskResumeAll>
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000d30 	.word	0x20000d30
 80051b0:	20000d34 	.word	0x20000d34
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <prvGetNextExpireTime+0x44>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <prvGetNextExpireTime+0x16>
 80051ca:	2201      	movs	r2, #1
 80051cc:	e000      	b.n	80051d0 <prvGetNextExpireTime+0x18>
 80051ce:	2200      	movs	r2, #0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <prvGetNextExpireTime+0x44>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e001      	b.n	80051ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000d2c 	.word	0x20000d2c

08005200 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005208:	f7ff fa7e 	bl	8004708 <xTaskGetTickCount>
 800520c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <prvSampleTimeNow+0x3c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	429a      	cmp	r2, r3
 8005216:	d205      	bcs.n	8005224 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005218:	f000 f936 	bl	8005488 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e002      	b.n	800522a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800522a:	4a04      	ldr	r2, [pc, #16]	; (800523c <prvSampleTimeNow+0x3c>)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005230:	68fb      	ldr	r3, [r7, #12]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000d3c 	.word	0x20000d3c

08005240 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d812      	bhi.n	800528c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	429a      	cmp	r2, r3
 8005272:	d302      	bcc.n	800527a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e01b      	b.n	80052b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800527a:	4b10      	ldr	r3, [pc, #64]	; (80052bc <prvInsertTimerInActiveList+0x7c>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3304      	adds	r3, #4
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f7fe fa08 	bl	800369a <vListInsert>
 800528a:	e012      	b.n	80052b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d206      	bcs.n	80052a2 <prvInsertTimerInActiveList+0x62>
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e007      	b.n	80052b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <prvInsertTimerInActiveList+0x80>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7fe f9f4 	bl	800369a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052b2:	697b      	ldr	r3, [r7, #20]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000d30 	.word	0x20000d30
 80052c0:	20000d2c 	.word	0x20000d2c

080052c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08e      	sub	sp, #56	; 0x38
 80052c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052ca:	e0ca      	b.n	8005462 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da18      	bge.n	8005304 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	3304      	adds	r3, #4
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	61fb      	str	r3, [r7, #28]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052fa:	6850      	ldr	r0, [r2, #4]
 80052fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052fe:	6892      	ldr	r2, [r2, #8]
 8005300:	4611      	mov	r1, r2
 8005302:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f2c0 80aa 	blt.w	8005460 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	3304      	adds	r3, #4
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe f9f5 	bl	800370c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005322:	463b      	mov	r3, r7
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ff6b 	bl	8005200 <prvSampleTimeNow>
 800532a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b09      	cmp	r3, #9
 8005330:	f200 8097 	bhi.w	8005462 <prvProcessReceivedCommands+0x19e>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <prvProcessReceivedCommands+0x78>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005365 	.word	0x08005365
 8005340:	08005365 	.word	0x08005365
 8005344:	08005365 	.word	0x08005365
 8005348:	080053d9 	.word	0x080053d9
 800534c:	080053ed 	.word	0x080053ed
 8005350:	08005437 	.word	0x08005437
 8005354:	08005365 	.word	0x08005365
 8005358:	08005365 	.word	0x08005365
 800535c:	080053d9 	.word	0x080053d9
 8005360:	080053ed 	.word	0x080053ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	b2da      	uxtb	r2, r3
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	18d1      	adds	r1, r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005384:	f7ff ff5c 	bl	8005240 <prvInsertTimerInActiveList>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d069      	beq.n	8005462 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005394:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d05e      	beq.n	8005462 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	441a      	add	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	2300      	movs	r3, #0
 80053b2:	2100      	movs	r1, #0
 80053b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b6:	f7ff fe05 	bl	8004fc4 <xTimerGenericCommand>
 80053ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d14f      	bne.n	8005462 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	61bb      	str	r3, [r7, #24]
}
 80053d4:	bf00      	nop
 80053d6:	e7fe      	b.n	80053d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80053ea:	e03a      	b.n	8005462 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	617b      	str	r3, [r7, #20]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	18d1      	adds	r1, r2, r3
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005430:	f7ff ff06 	bl	8005240 <prvInsertTimerInActiveList>
					break;
 8005434:	e015      	b.n	8005462 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d103      	bne.n	800544c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005446:	f000 fbdb 	bl	8005c00 <vPortFree>
 800544a:	e00a      	b.n	8005462 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800545e:	e000      	b.n	8005462 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005460:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005462:	4b08      	ldr	r3, [pc, #32]	; (8005484 <prvProcessReceivedCommands+0x1c0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	1d39      	adds	r1, r7, #4
 8005468:	2200      	movs	r2, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fc16 	bl	8003c9c <xQueueReceive>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	f47f af2a 	bne.w	80052cc <prvProcessReceivedCommands+0x8>
	}
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3730      	adds	r7, #48	; 0x30
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000d34 	.word	0x20000d34

08005488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800548e:	e048      	b.n	8005522 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005490:	4b2d      	ldr	r3, [pc, #180]	; (8005548 <prvSwitchTimerLists+0xc0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549a:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <prvSwitchTimerLists+0xc0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe f92f 	bl	800370c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02e      	beq.n	8005522 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4413      	add	r3, r2
 80054cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d90e      	bls.n	80054f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054e2:	4b19      	ldr	r3, [pc, #100]	; (8005548 <prvSwitchTimerLists+0xc0>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7fe f8d4 	bl	800369a <vListInsert>
 80054f2:	e016      	b.n	8005522 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	2100      	movs	r1, #0
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fd60 	bl	8004fc4 <xTimerGenericCommand>
 8005504:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	603b      	str	r3, [r7, #0]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <prvSwitchTimerLists+0xc0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1b1      	bne.n	8005490 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <prvSwitchTimerLists+0xc0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <prvSwitchTimerLists+0xc4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a04      	ldr	r2, [pc, #16]	; (8005548 <prvSwitchTimerLists+0xc0>)
 8005538:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800553a:	4a04      	ldr	r2, [pc, #16]	; (800554c <prvSwitchTimerLists+0xc4>)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000d2c 	.word	0x20000d2c
 800554c:	20000d30 	.word	0x20000d30

08005550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005556:	f000 f965 	bl	8005824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800555a:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d120      	bne.n	80055a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005562:	4814      	ldr	r0, [pc, #80]	; (80055b4 <prvCheckForValidListAndQueue+0x64>)
 8005564:	f7fe f848 	bl	80035f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005568:	4813      	ldr	r0, [pc, #76]	; (80055b8 <prvCheckForValidListAndQueue+0x68>)
 800556a:	f7fe f845 	bl	80035f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <prvCheckForValidListAndQueue+0x6c>)
 8005570:	4a10      	ldr	r2, [pc, #64]	; (80055b4 <prvCheckForValidListAndQueue+0x64>)
 8005572:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <prvCheckForValidListAndQueue+0x70>)
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <prvCheckForValidListAndQueue+0x68>)
 8005578:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800557a:	2300      	movs	r3, #0
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <prvCheckForValidListAndQueue+0x74>)
 8005580:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <prvCheckForValidListAndQueue+0x78>)
 8005582:	2110      	movs	r1, #16
 8005584:	200a      	movs	r0, #10
 8005586:	f7fe f953 	bl	8003830 <xQueueGenericCreateStatic>
 800558a:	4603      	mov	r3, r0
 800558c:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800558e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <prvCheckForValidListAndQueue+0x60>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	490b      	ldr	r1, [pc, #44]	; (80055cc <prvCheckForValidListAndQueue+0x7c>)
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fd6c 	bl	800407c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055a4:	f000 f96e 	bl	8005884 <vPortExitCritical>
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000d34 	.word	0x20000d34
 80055b4:	20000d04 	.word	0x20000d04
 80055b8:	20000d18 	.word	0x20000d18
 80055bc:	20000d2c 	.word	0x20000d2c
 80055c0:	20000d30 	.word	0x20000d30
 80055c4:	20000de0 	.word	0x20000de0
 80055c8:	20000d40 	.word	0x20000d40
 80055cc:	08005f10 	.word	0x08005f10

080055d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b04      	subs	r3, #4
 80055e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 0201 	bic.w	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3b04      	subs	r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005600:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <pxPortInitialiseStack+0x64>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3b14      	subs	r3, #20
 800560a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3b04      	subs	r3, #4
 8005616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f06f 0202 	mvn.w	r2, #2
 800561e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b20      	subs	r3, #32
 8005624:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	08005639 	.word	0x08005639

08005638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <prvTaskExitError+0x54>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d00a      	beq.n	8005662 <prvTaskExitError+0x2a>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60fb      	str	r3, [r7, #12]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <prvTaskExitError+0x28>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60bb      	str	r3, [r7, #8]
}
 8005674:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005676:	bf00      	nop
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0fc      	beq.n	8005678 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c

08005690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <pxCurrentTCBConst2>)
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	f380 8809 	msr	PSP, r0
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	4770      	bx	lr
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst2>:
 80056b0:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056b8:	4808      	ldr	r0, [pc, #32]	; (80056dc <prvPortStartFirstTask+0x24>)
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f380 8808 	msr	MSP, r0
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f380 8814 	msr	CONTROL, r0
 80056ca:	b662      	cpsie	i
 80056cc:	b661      	cpsie	f
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	df00      	svc	0
 80056d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056da:	bf00      	nop
 80056dc:	e000ed08 	.word	0xe000ed08

080056e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056e6:	4b46      	ldr	r3, [pc, #280]	; (8005800 <xPortStartScheduler+0x120>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a46      	ldr	r2, [pc, #280]	; (8005804 <xPortStartScheduler+0x124>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d10a      	bne.n	8005706 <xPortStartScheduler+0x26>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	613b      	str	r3, [r7, #16]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005706:	4b3e      	ldr	r3, [pc, #248]	; (8005800 <xPortStartScheduler+0x120>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <xPortStartScheduler+0x128>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10a      	bne.n	8005726 <xPortStartScheduler+0x46>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	60fb      	str	r3, [r7, #12]
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <xPortStartScheduler+0x12c>)
 8005728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	22ff      	movs	r2, #255	; 0xff
 8005736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005748:	b2da      	uxtb	r2, r3
 800574a:	4b31      	ldr	r3, [pc, #196]	; (8005810 <xPortStartScheduler+0x130>)
 800574c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800574e:	4b31      	ldr	r3, [pc, #196]	; (8005814 <xPortStartScheduler+0x134>)
 8005750:	2207      	movs	r2, #7
 8005752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005754:	e009      	b.n	800576a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005756:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <xPortStartScheduler+0x134>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3b01      	subs	r3, #1
 800575c:	4a2d      	ldr	r2, [pc, #180]	; (8005814 <xPortStartScheduler+0x134>)
 800575e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	b2db      	uxtb	r3, r3
 8005768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b80      	cmp	r3, #128	; 0x80
 8005774:	d0ef      	beq.n	8005756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005776:	4b27      	ldr	r3, [pc, #156]	; (8005814 <xPortStartScheduler+0x134>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1c3 0307 	rsb	r3, r3, #7
 800577e:	2b04      	cmp	r3, #4
 8005780:	d00a      	beq.n	8005798 <xPortStartScheduler+0xb8>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60bb      	str	r3, [r7, #8]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <xPortStartScheduler+0x134>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <xPortStartScheduler+0x134>)
 80057a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057a2:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <xPortStartScheduler+0x134>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057aa:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <xPortStartScheduler+0x134>)
 80057ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <xPortStartScheduler+0x138>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a17      	ldr	r2, [pc, #92]	; (8005818 <xPortStartScheduler+0x138>)
 80057bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <xPortStartScheduler+0x138>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a14      	ldr	r2, [pc, #80]	; (8005818 <xPortStartScheduler+0x138>)
 80057c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057ce:	f000 f8dd 	bl	800598c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <xPortStartScheduler+0x13c>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057d8:	f000 f8fc 	bl	80059d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <xPortStartScheduler+0x140>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0f      	ldr	r2, [pc, #60]	; (8005820 <xPortStartScheduler+0x140>)
 80057e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057e8:	f7ff ff66 	bl	80056b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057ec:	f7ff f856 	bl	800489c <vTaskSwitchContext>
	prvTaskExitError();
 80057f0:	f7ff ff22 	bl	8005638 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	e000ed00 	.word	0xe000ed00
 8005804:	410fc271 	.word	0x410fc271
 8005808:	410fc270 	.word	0x410fc270
 800580c:	e000e400 	.word	0xe000e400
 8005810:	20000e30 	.word	0x20000e30
 8005814:	20000e34 	.word	0x20000e34
 8005818:	e000ed20 	.word	0xe000ed20
 800581c:	2000000c 	.word	0x2000000c
 8005820:	e000ef34 	.word	0xe000ef34

08005824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	607b      	str	r3, [r7, #4]
}
 800583c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800583e:	4b0f      	ldr	r3, [pc, #60]	; (800587c <vPortEnterCritical+0x58>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3301      	adds	r3, #1
 8005844:	4a0d      	ldr	r2, [pc, #52]	; (800587c <vPortEnterCritical+0x58>)
 8005846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <vPortEnterCritical+0x58>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d10f      	bne.n	8005870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <vPortEnterCritical+0x5c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <vPortEnterCritical+0x4c>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	603b      	str	r3, [r7, #0]
}
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <vPortEnterCritical+0x4a>
	}
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	2000000c 	.word	0x2000000c
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800588a:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <vPortExitCritical+0x50>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <vPortExitCritical+0x24>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	607b      	str	r3, [r7, #4]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <vPortExitCritical+0x50>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <vPortExitCritical+0x50>)
 80058b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058b2:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <vPortExitCritical+0x50>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d105      	bne.n	80058c6 <vPortExitCritical+0x42>
 80058ba:	2300      	movs	r3, #0
 80058bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f383 8811 	msr	BASEPRI, r3
}
 80058c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	2000000c 	.word	0x2000000c
	...

080058e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058e0:	f3ef 8009 	mrs	r0, PSP
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	4b15      	ldr	r3, [pc, #84]	; (8005940 <pxCurrentTCBConst>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	f01e 0f10 	tst.w	lr, #16
 80058f0:	bf08      	it	eq
 80058f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fa:	6010      	str	r0, [r2, #0]
 80058fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005904:	f380 8811 	msr	BASEPRI, r0
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f7fe ffc4 	bl	800489c <vTaskSwitchContext>
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f380 8811 	msr	BASEPRI, r0
 800591c:	bc09      	pop	{r0, r3}
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005926:	f01e 0f10 	tst.w	lr, #16
 800592a:	bf08      	it	eq
 800592c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005930:	f380 8809 	msr	PSP, r0
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst>:
 8005940:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	607b      	str	r3, [r7, #4]
}
 8005960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005962:	f7fe fee1 	bl	8004728 <xTaskIncrementTick>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <xPortSysTickHandler+0x40>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	f383 8811 	msr	BASEPRI, r3
}
 800597e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortSetupTimerInterrupt+0x34>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <vPortSetupTimerInterrupt+0x38>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <vPortSetupTimerInterrupt+0x3c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <vPortSetupTimerInterrupt+0x40>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	099b      	lsrs	r3, r3, #6
 80059a8:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <vPortSetupTimerInterrupt+0x44>)
 80059aa:	3b01      	subs	r3, #1
 80059ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <vPortSetupTimerInterrupt+0x34>)
 80059b0:	2207      	movs	r2, #7
 80059b2:	601a      	str	r2, [r3, #0]
}
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e000e010 	.word	0xe000e010
 80059c4:	e000e018 	.word	0xe000e018
 80059c8:	20000000 	.word	0x20000000
 80059cc:	10624dd3 	.word	0x10624dd3
 80059d0:	e000e014 	.word	0xe000e014

080059d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059e4 <vPortEnableVFP+0x10>
 80059d8:	6801      	ldr	r1, [r0, #0]
 80059da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059de:	6001      	str	r1, [r0, #0]
 80059e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059e2:	bf00      	nop
 80059e4:	e000ed88 	.word	0xe000ed88

080059e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059ee:	f3ef 8305 	mrs	r3, IPSR
 80059f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b0f      	cmp	r3, #15
 80059f8:	d914      	bls.n	8005a24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059fa:	4a17      	ldr	r2, [pc, #92]	; (8005a58 <vPortValidateInterruptPriority+0x70>)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a04:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <vPortValidateInterruptPriority+0x74>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	7afa      	ldrb	r2, [r7, #11]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d20a      	bcs.n	8005a24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a24:	4b0e      	ldr	r3, [pc, #56]	; (8005a60 <vPortValidateInterruptPriority+0x78>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <vPortValidateInterruptPriority+0x7c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d90a      	bls.n	8005a4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	603b      	str	r3, [r7, #0]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <vPortValidateInterruptPriority+0x60>
	}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	e000e3f0 	.word	0xe000e3f0
 8005a5c:	20000e30 	.word	0x20000e30
 8005a60:	e000ed0c 	.word	0xe000ed0c
 8005a64:	20000e34 	.word	0x20000e34

08005a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a74:	f7fe fd9c 	bl	80045b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a78:	4b5b      	ldr	r3, [pc, #364]	; (8005be8 <pvPortMalloc+0x180>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a80:	f000 f920 	bl	8005cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a84:	4b59      	ldr	r3, [pc, #356]	; (8005bec <pvPortMalloc+0x184>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 8093 	bne.w	8005bb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01d      	beq.n	8005ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a98:	2208      	movs	r2, #8
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d014      	beq.n	8005ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f023 0307 	bic.w	r3, r3, #7
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	617b      	str	r3, [r7, #20]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d06e      	beq.n	8005bb8 <pvPortMalloc+0x150>
 8005ada:	4b45      	ldr	r3, [pc, #276]	; (8005bf0 <pvPortMalloc+0x188>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d869      	bhi.n	8005bb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ae4:	4b43      	ldr	r3, [pc, #268]	; (8005bf4 <pvPortMalloc+0x18c>)
 8005ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ae8:	4b42      	ldr	r3, [pc, #264]	; (8005bf4 <pvPortMalloc+0x18c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aee:	e004      	b.n	8005afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <pvPortMalloc+0xa4>
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f1      	bne.n	8005af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b0c:	4b36      	ldr	r3, [pc, #216]	; (8005be8 <pvPortMalloc+0x180>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d050      	beq.n	8005bb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	4413      	add	r3, r2
 8005b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	2308      	movs	r3, #8
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d91f      	bls.n	8005b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <pvPortMalloc+0xf8>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	613b      	str	r3, [r7, #16]
}
 8005b5c:	bf00      	nop
 8005b5e:	e7fe      	b.n	8005b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	1ad2      	subs	r2, r2, r3
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b72:	69b8      	ldr	r0, [r7, #24]
 8005b74:	f000 f908 	bl	8005d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b78:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <pvPortMalloc+0x188>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <pvPortMalloc+0x188>)
 8005b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b86:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <pvPortMalloc+0x188>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <pvPortMalloc+0x190>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d203      	bcs.n	8005b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b92:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <pvPortMalloc+0x188>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <pvPortMalloc+0x190>)
 8005b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <pvPortMalloc+0x184>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <pvPortMalloc+0x194>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <pvPortMalloc+0x194>)
 8005bb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bb8:	f7fe fd08 	bl	80045cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <pvPortMalloc+0x174>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60fb      	str	r3, [r7, #12]
}
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <pvPortMalloc+0x172>
	return pvReturn;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3728      	adds	r7, #40	; 0x28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200019f8 	.word	0x200019f8
 8005bec:	20001a0c 	.word	0x20001a0c
 8005bf0:	200019fc 	.word	0x200019fc
 8005bf4:	200019f0 	.word	0x200019f0
 8005bf8:	20001a00 	.word	0x20001a00
 8005bfc:	20001a04 	.word	0x20001a04

08005c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d04d      	beq.n	8005cae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c12:	2308      	movs	r3, #8
 8005c14:	425b      	negs	r3, r3
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <vPortFree+0xb8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <vPortFree+0x44>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60fb      	str	r3, [r7, #12]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <vPortFree+0x62>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	60bb      	str	r3, [r7, #8]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <vPortFree+0xb8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01e      	beq.n	8005cae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11a      	bne.n	8005cae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <vPortFree+0xb8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c88:	f7fe fc92 	bl	80045b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <vPortFree+0xbc>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4413      	add	r3, r2
 8005c96:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <vPortFree+0xbc>)
 8005c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c9a:	6938      	ldr	r0, [r7, #16]
 8005c9c:	f000 f874 	bl	8005d88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <vPortFree+0xc0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	4a06      	ldr	r2, [pc, #24]	; (8005cc0 <vPortFree+0xc0>)
 8005ca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005caa:	f7fe fc8f 	bl	80045cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cae:	bf00      	nop
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20001a0c 	.word	0x20001a0c
 8005cbc:	200019fc 	.word	0x200019fc
 8005cc0:	20001a08 	.word	0x20001a08

08005cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cd0:	4b27      	ldr	r3, [pc, #156]	; (8005d70 <prvHeapInit+0xac>)
 8005cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3307      	adds	r3, #7
 8005ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0307 	bic.w	r3, r3, #7
 8005cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	4a1f      	ldr	r2, [pc, #124]	; (8005d70 <prvHeapInit+0xac>)
 8005cf4:	4413      	add	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <prvHeapInit+0xb0>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <prvHeapInit+0xb0>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d10:	2208      	movs	r2, #8
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0307 	bic.w	r3, r3, #7
 8005d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <prvHeapInit+0xb4>)
 8005d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <prvHeapInit+0xb4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d2e:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <prvHeapInit+0xb4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	1ad2      	subs	r2, r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <prvHeapInit+0xb4>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <prvHeapInit+0xb8>)
 8005d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <prvHeapInit+0xbc>)
 8005d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <prvHeapInit+0xc0>)
 8005d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d62:	601a      	str	r2, [r3, #0]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	20000e38 	.word	0x20000e38
 8005d74:	200019f0 	.word	0x200019f0
 8005d78:	200019f8 	.word	0x200019f8
 8005d7c:	20001a00 	.word	0x20001a00
 8005d80:	200019fc 	.word	0x200019fc
 8005d84:	20001a0c 	.word	0x20001a0c

08005d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d90:	4b28      	ldr	r3, [pc, #160]	; (8005e34 <prvInsertBlockIntoFreeList+0xac>)
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e002      	b.n	8005d9c <prvInsertBlockIntoFreeList+0x14>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d8f7      	bhi.n	8005d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4413      	add	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d108      	bne.n	8005dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	441a      	add	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d118      	bne.n	8005e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <prvInsertBlockIntoFreeList+0xb0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d00d      	beq.n	8005e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	441a      	add	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e008      	b.n	8005e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvInsertBlockIntoFreeList+0xb0>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	e003      	b.n	8005e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d002      	beq.n	8005e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	200019f0 	.word	0x200019f0
 8005e38:	200019f8 	.word	0x200019f8

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4d0d      	ldr	r5, [pc, #52]	; (8005e74 <__libc_init_array+0x38>)
 8005e40:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e42:	1b64      	subs	r4, r4, r5
 8005e44:	10a4      	asrs	r4, r4, #2
 8005e46:	2600      	movs	r6, #0
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	4d0b      	ldr	r5, [pc, #44]	; (8005e7c <__libc_init_array+0x40>)
 8005e4e:	4c0c      	ldr	r4, [pc, #48]	; (8005e80 <__libc_init_array+0x44>)
 8005e50:	f000 f82e 	bl	8005eb0 <_init>
 8005e54:	1b64      	subs	r4, r4, r5
 8005e56:	10a4      	asrs	r4, r4, #2
 8005e58:	2600      	movs	r6, #0
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	08005fb0 	.word	0x08005fb0
 8005e78:	08005fb0 	.word	0x08005fb0
 8005e7c:	08005fb0 	.word	0x08005fb0
 8005e80:	08005fb4 	.word	0x08005fb4

08005e84 <memcpy>:
 8005e84:	440a      	add	r2, r1
 8005e86:	4291      	cmp	r1, r2
 8005e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e8c:	d100      	bne.n	8005e90 <memcpy+0xc>
 8005e8e:	4770      	bx	lr
 8005e90:	b510      	push	{r4, lr}
 8005e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e9a:	4291      	cmp	r1, r2
 8005e9c:	d1f9      	bne.n	8005e92 <memcpy+0xe>
 8005e9e:	bd10      	pop	{r4, pc}

08005ea0 <memset>:
 8005ea0:	4402      	add	r2, r0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <memset+0xa>
 8005ea8:	4770      	bx	lr
 8005eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005eae:	e7f9      	b.n	8005ea4 <memset+0x4>

08005eb0 <_init>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr

08005ebc <_fini>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr
