
quartz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800856c  0800856c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008574  08008574  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800857c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae0  20000078  080085f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b58  080085f4  00021b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edb9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004186  00000000  00000000  0003ee61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00042fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001818  00000000  00000000  000449b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dda  00000000  00000000  000461d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e755  00000000  00000000  0006dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2917  00000000  00000000  0008c6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f016  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb4  00000000  00000000  0017f068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800842c 	.word	0x0800842c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800842c 	.word	0x0800842c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <UART_char>:
/*
 * @brief print any char to UART
 * @param char to print
 */
void UART_char(unsigned char c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 10);
 800057e:	1df9      	adds	r1, r7, #7
 8000580:	230a      	movs	r3, #10
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <UART_char+0x20>)
 8000586:	f004 f881 	bl	800468c <HAL_UART_Transmit>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200001b8 	.word	0x200001b8

08000598 <UART_int>:
/*
 * @brief print any int to UART
 * @param int to print
 */
void UART_int(unsigned int value)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	char text[8];

	HAL_UART_Transmit(&huart2, (uint8_t*) text, sprintf(text, "%d", value), 100);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4908      	ldr	r1, [pc, #32]	; (80005c8 <UART_int+0x30>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f007 fadf 	bl	8007b6c <siprintf>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	f107 0108 	add.w	r1, r7, #8
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <UART_int+0x34>)
 80005ba:	f004 f867 	bl	800468c <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08008444 	.word	0x08008444
 80005cc:	200001b8 	.word	0x200001b8

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e6:	4b4d      	ldr	r3, [pc, #308]	; (800071c <MX_ADC1_Init+0x14c>)
 80005e8:	4a4d      	ldr	r2, [pc, #308]	; (8000720 <MX_ADC1_Init+0x150>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <MX_ADC1_Init+0x14c>)
 80005ee:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 80005f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f4:	4b49      	ldr	r3, [pc, #292]	; (800071c <MX_ADC1_Init+0x14c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b48      	ldr	r3, [pc, #288]	; (800071c <MX_ADC1_Init+0x14c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000600:	4b46      	ldr	r3, [pc, #280]	; (800071c <MX_ADC1_Init+0x14c>)
 8000602:	2201      	movs	r2, #1
 8000604:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <MX_ADC1_Init+0x14c>)
 8000608:	2204      	movs	r2, #4
 800060a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060c:	4b43      	ldr	r3, [pc, #268]	; (800071c <MX_ADC1_Init+0x14c>)
 800060e:	2200      	movs	r2, #0
 8000610:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000612:	4b42      	ldr	r3, [pc, #264]	; (800071c <MX_ADC1_Init+0x14c>)
 8000614:	2201      	movs	r2, #1
 8000616:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000618:	4b40      	ldr	r3, [pc, #256]	; (800071c <MX_ADC1_Init+0x14c>)
 800061a:	2206      	movs	r2, #6
 800061c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <MX_ADC1_Init+0x14c>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000626:	4b3d      	ldr	r3, [pc, #244]	; (800071c <MX_ADC1_Init+0x14c>)
 8000628:	2200      	movs	r2, #0
 800062a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <MX_ADC1_Init+0x14c>)
 800062e:	2200      	movs	r2, #0
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <MX_ADC1_Init+0x14c>)
 8000634:	2201      	movs	r2, #1
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <MX_ADC1_Init+0x14c>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000640:	4b36      	ldr	r3, [pc, #216]	; (800071c <MX_ADC1_Init+0x14c>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	4834      	ldr	r0, [pc, #208]	; (800071c <MX_ADC1_Init+0x14c>)
 800064a:	f000 ffdf 	bl	800160c <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000654:	f000 fc04 	bl	8000e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <MX_ADC1_Init+0x154>)
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2306      	movs	r3, #6
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000660:	2306      	movs	r3, #6
 8000662:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000664:	237f      	movs	r3, #127	; 0x7f
 8000666:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000668:	2304      	movs	r3, #4
 800066a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4829      	ldr	r0, [pc, #164]	; (800071c <MX_ADC1_Init+0x14c>)
 8000676:	f001 f9b3 	bl	80019e0 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000680:	f000 fbee 	bl	8000e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_ADC1_Init+0x158>)
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000688:	230c      	movs	r3, #12
 800068a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <MX_ADC1_Init+0x14c>)
 8000692:	f001 f9a5 	bl	80019e0 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800069c:	f000 fbe0 	bl	8000e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_ADC1_Init+0x15c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006a4:	2312      	movs	r3, #18
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	481b      	ldr	r0, [pc, #108]	; (800071c <MX_ADC1_Init+0x14c>)
 80006ae:	f001 f997 	bl	80019e0 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80006b8:	f000 fbd2 	bl	8000e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_ADC1_Init+0x160>)
 80006be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006c0:	2318      	movs	r3, #24
 80006c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_ADC1_Init+0x14c>)
 80006ca:	f001 f989 	bl	80019e0 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80006d4:	f000 fbc4 	bl	8000e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_ADC1_Init+0x164>)
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC1_Init+0x14c>)
 80006e8:	f001 f97a 	bl	80019e0 <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80006f2:	f000 fbb5 	bl	8000e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_ADC1_Init+0x168>)
 80006f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006fa:	f44f 7383 	mov.w	r3, #262	; 0x106
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC1_Init+0x14c>)
 8000706:	f001 f96b 	bl	80019e0 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000710:	f000 fba6 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000094 	.word	0x20000094
 8000720:	50040000 	.word	0x50040000
 8000724:	14f00020 	.word	0x14f00020
 8000728:	19200040 	.word	0x19200040
 800072c:	10c00010 	.word	0x10c00010
 8000730:	0c900008 	.word	0x0c900008
 8000734:	08600004 	.word	0x08600004
 8000738:	04300002 	.word	0x04300002

0800073c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0a2      	sub	sp, #136	; 0x88
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2260      	movs	r2, #96	; 0x60
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f007 f9fd 	bl	8007b5c <memset>
  if(adcHandle->Instance==ADC1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a47      	ldr	r2, [pc, #284]	; (8000884 <HAL_ADC_MspInit+0x148>)
 8000768:	4293      	cmp	r3, r2
 800076a:	f040 8087 	bne.w	800087c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800076e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000772:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000782:	2308      	movs	r3, #8
 8000784:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f003 f96b 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80007a8:	f000 fb5a 	bl	8000e60 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b0:	4a35      	ldr	r2, [pc, #212]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b8:	4b33      	ldr	r3, [pc, #204]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	4b30      	ldr	r3, [pc, #192]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d0:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	4a29      	ldr	r2, [pc, #164]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <HAL_ADC_MspInit+0x14c>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = A5___V_IS_RC_Pin|A4___IS_Pin|A3___ADC_U_Pin|A2___ADC_V_Pin;
 80007f4:	230f      	movs	r3, #15
 80007f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007f8:	230b      	movs	r3, #11
 80007fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000800:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000804:	4619      	mov	r1, r3
 8000806:	4821      	ldr	r0, [pc, #132]	; (800088c <HAL_ADC_MspInit+0x150>)
 8000808:	f002 f8be 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0___ADC_VDD_2_Pin|A1___ADC_W_Pin;
 800080c:	2303      	movs	r3, #3
 800080e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000810:	230b      	movs	r3, #11
 8000812:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800081c:	4619      	mov	r1, r3
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f002 f8b1 	bl	8002988 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_ADC_MspInit+0x154>)
 8000828:	4a1a      	ldr	r2, [pc, #104]	; (8000894 <HAL_ADC_MspInit+0x158>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_ADC_MspInit+0x154>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_ADC_MspInit+0x154>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_ADC_MspInit+0x154>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_ADC_MspInit+0x154>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_ADC_MspInit+0x154>)
 8000846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_ADC_MspInit+0x154>)
 800084e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000852:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_ADC_MspInit+0x154>)
 8000856:	2220      	movs	r2, #32
 8000858:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_ADC_MspInit+0x154>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <HAL_ADC_MspInit+0x154>)
 8000862:	f001 fe99 	bl	8002598 <HAL_DMA_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800086c:	f000 faf8 	bl	8000e60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_ADC_MspInit+0x154>)
 8000874:	64da      	str	r2, [r3, #76]	; 0x4c
 8000876:	4a06      	ldr	r2, [pc, #24]	; (8000890 <HAL_ADC_MspInit+0x154>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800087c:	bf00      	nop
 800087e:	3788      	adds	r7, #136	; 0x88
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	50040000 	.word	0x50040000
 8000888:	40021000 	.word	0x40021000
 800088c:	48000800 	.word	0x48000800
 8000890:	200000f8 	.word	0x200000f8
 8000894:	40020008 	.word	0x40020008

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_DMA_Init+0x38>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <MX_DMA_Init+0x38>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6493      	str	r3, [r2, #72]	; 0x48
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_DMA_Init+0x38>)
 80008ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2105      	movs	r1, #5
 80008ba:	200b      	movs	r0, #11
 80008bc:	f001 fe42 	bl	8002544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008c0:	200b      	movs	r0, #11
 80008c2:	f001 fe5b 	bl	800257c <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Task01_ID */
	Task01_IDHandle = osThreadNew(Task01, NULL, &Task01_ID_attributes);
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <MX_FREERTOS_Init+0x38>)
 80008da:	2100      	movs	r1, #0
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_FREERTOS_Init+0x3c>)
 80008de:	f004 fc01 	bl	80050e4 <osThreadNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <MX_FREERTOS_Init+0x40>)
 80008e6:	6013      	str	r3, [r2, #0]

	/* creation of Task02_ID */
	Task02_IDHandle = osThreadNew(Task02, NULL, &Task02_ID_attributes);
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <MX_FREERTOS_Init+0x44>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_FREERTOS_Init+0x48>)
 80008ee:	f004 fbf9 	bl	80050e4 <osThreadNew>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <MX_FREERTOS_Init+0x4c>)
 80008f6:	6013      	str	r3, [r2, #0]

	/* creation of Task03_ID */
	Task03_IDHandle = osThreadNew(Task03, NULL, &Task03_ID_attributes);
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <MX_FREERTOS_Init+0x50>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <MX_FREERTOS_Init+0x54>)
 80008fe:	f004 fbf1 	bl	80050e4 <osThreadNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <MX_FREERTOS_Init+0x58>)
 8000906:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08008484 	.word	0x08008484
 8000910:	08000931 	.word	0x08000931
 8000914:	20000144 	.word	0x20000144
 8000918:	080084a8 	.word	0x080084a8
 800091c:	08000ba9 	.word	0x08000ba9
 8000920:	20000148 	.word	0x20000148
 8000924:	080084cc 	.word	0x080084cc
 8000928:	08000c31 	.word	0x08000c31
 800092c:	2000014c 	.word	0x2000014c

08000930 <Task01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task01 */
void Task01(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task01 */
	state_t state = step0;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]

	/* Infinite loop */
	for(;;)
	{
		switch(state)
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	2b05      	cmp	r3, #5
 8000940:	f200 80de 	bhi.w	8000b00 <Task01+0x1d0>
 8000944:	a201      	add	r2, pc, #4	; (adr r2, 800094c <Task01+0x1c>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	08000965 	.word	0x08000965
 8000950:	080009a7 	.word	0x080009a7
 8000954:	080009ed 	.word	0x080009ed
 8000958:	08000a31 	.word	0x08000a31
 800095c:	08000a75 	.word	0x08000a75
 8000960:	08000abb 	.word	0x08000abb
		{
			case step0:
//				UART_string("\nStep0");
//				UART_string("\nHigh: U \nLow: W \nInhibit: V");
				HAL_GPIO_WritePin(INUBANK, INUPIN, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096a:	488b      	ldr	r0, [pc, #556]	; (8000b98 <Task01+0x268>)
 800096c:	f002 f99e 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INWBANK, INWPIN, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f002 f997 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHVBANK, INHWPIN, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f002 f991 	bl	8002cac <HAL_GPIO_WritePin>

				//uninhibit high and low
				HAL_GPIO_WritePin(INHUBANK, INHUPIN, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000990:	4881      	ldr	r0, [pc, #516]	; (8000b98 <Task01+0x268>)
 8000992:	f002 f98b 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHWBANK, INHWPIN, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	2108      	movs	r1, #8
 800099a:	487f      	ldr	r0, [pc, #508]	; (8000b98 <Task01+0x268>)
 800099c:	f002 f986 	bl	8002cac <HAL_GPIO_WritePin>
				state = step1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
				break;
 80009a4:	e0bf      	b.n	8000b26 <Task01+0x1f6>

			case step1:
//				UART_string("\nStep1");
//				UART_string("\nHigh: V \nLow: W \nInhibit: U");
				HAL_GPIO_WritePin(INVBANK, INVPIN, 1);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f002 f97c 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INWBANK, INWPIN, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f002 f975 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHUBANK, INHUPIN, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c8:	4873      	ldr	r0, [pc, #460]	; (8000b98 <Task01+0x268>)
 80009ca:	f002 f96f 	bl	8002cac <HAL_GPIO_WritePin>

				//uninhibit high and low
				HAL_GPIO_WritePin(INHVBANK, INHVPIN, 1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f002 f968 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHWBANK, INHWPIN, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2108      	movs	r1, #8
 80009e0:	486d      	ldr	r0, [pc, #436]	; (8000b98 <Task01+0x268>)
 80009e2:	f002 f963 	bl	8002cac <HAL_GPIO_WritePin>
				state = step2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	73fb      	strb	r3, [r7, #15]
				break;
 80009ea:	e09c      	b.n	8000b26 <Task01+0x1f6>

			case step2:
//				UART_string("\nStep2");
//				UART_string("\nHigh: V \nLow: U \nInhibit: W");
				HAL_GPIO_WritePin(INVBANK, INVPIN, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f002 f959 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INUBANK, INUPIN, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a00:	4865      	ldr	r0, [pc, #404]	; (8000b98 <Task01+0x268>)
 8000a02:	f002 f953 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHWBANK, INHWPIN, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2108      	movs	r1, #8
 8000a0a:	4863      	ldr	r0, [pc, #396]	; (8000b98 <Task01+0x268>)
 8000a0c:	f002 f94e 	bl	8002cac <HAL_GPIO_WritePin>

				//uninhibit high and low
				HAL_GPIO_WritePin(INHVBANK, INHVPIN, 1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f002 f947 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHUBANK, INHUPIN, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a24:	485c      	ldr	r0, [pc, #368]	; (8000b98 <Task01+0x268>)
 8000a26:	f002 f941 	bl	8002cac <HAL_GPIO_WritePin>
				state = step3;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	73fb      	strb	r3, [r7, #15]
				break;
 8000a2e:	e07a      	b.n	8000b26 <Task01+0x1f6>

			case step3:
//				UART_string("\nStep3");
//				UART_string("\nHigh: W \nLow: U \nInhibit: V");
				HAL_GPIO_WritePin(INWBANK, INWPIN, 1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f002 f937 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INUBANK, INUPIN, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a44:	4854      	ldr	r0, [pc, #336]	; (8000b98 <Task01+0x268>)
 8000a46:	f002 f931 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHVBANK, INHVPIN, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f002 f92a 	bl	8002cac <HAL_GPIO_WritePin>

				//uninhibit high and low
				HAL_GPIO_WritePin(INHWBANK, INHWPIN, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	484e      	ldr	r0, [pc, #312]	; (8000b98 <Task01+0x268>)
 8000a5e:	f002 f925 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHUBANK, INHUPIN, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a68:	484b      	ldr	r0, [pc, #300]	; (8000b98 <Task01+0x268>)
 8000a6a:	f002 f91f 	bl	8002cac <HAL_GPIO_WritePin>
				state = step4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	73fb      	strb	r3, [r7, #15]
				break;
 8000a72:	e058      	b.n	8000b26 <Task01+0x1f6>

			case step4:
//				UART_string("\nStep4");
//				UART_string("\nHigh: W \nLow: V \nInhibit: U");
				HAL_GPIO_WritePin(INWBANK, INWPIN, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f002 f915 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INVBANK, INVPIN, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f002 f90e 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHUBANK, INHUPIN, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a96:	4840      	ldr	r0, [pc, #256]	; (8000b98 <Task01+0x268>)
 8000a98:	f002 f908 	bl	8002cac <HAL_GPIO_WritePin>

				//uninhibit high and low
				HAL_GPIO_WritePin(INHWBANK, INHWPIN, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	483d      	ldr	r0, [pc, #244]	; (8000b98 <Task01+0x268>)
 8000aa2:	f002 f903 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHVBANK, INHVPIN, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f002 f8fc 	bl	8002cac <HAL_GPIO_WritePin>
				state = step5;
 8000ab4:	2305      	movs	r3, #5
 8000ab6:	73fb      	strb	r3, [r7, #15]
				break;
 8000ab8:	e035      	b.n	8000b26 <Task01+0x1f6>

			case step5:
//				UART_string("\nStep5");
//				UART_string("\nHigh: U \nLow: V \nInhibit: W");
				HAL_GPIO_WritePin(INUBANK, INUPIN, 1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	4835      	ldr	r0, [pc, #212]	; (8000b98 <Task01+0x268>)
 8000ac2:	f002 f8f3 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INVBANK, INVPIN, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f002 f8ec 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHUBANK, INHUPIN, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ada:	482f      	ldr	r0, [pc, #188]	; (8000b98 <Task01+0x268>)
 8000adc:	f002 f8e6 	bl	8002cac <HAL_GPIO_WritePin>

				//uninhibit high and low
				HAL_GPIO_WritePin(INHUBANK, INHUPIN, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	482c      	ldr	r0, [pc, #176]	; (8000b98 <Task01+0x268>)
 8000ae8:	f002 f8e0 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHVBANK, INHVPIN, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f002 f8d9 	bl	8002cac <HAL_GPIO_WritePin>
				state = step0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
				break;
 8000afe:	e012      	b.n	8000b26 <Task01+0x1f6>

			default:
//				UART_string("Inhibit all");
				HAL_GPIO_WritePin(INHUBANK, INHUPIN, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b06:	4824      	ldr	r0, [pc, #144]	; (8000b98 <Task01+0x268>)
 8000b08:	f002 f8d0 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHVBANK, INHVPIN, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f002 f8c9 	bl	8002cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INHWBANK, INHWPIN, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	481e      	ldr	r0, [pc, #120]	; (8000b98 <Task01+0x268>)
 8000b20:	f002 f8c4 	bl	8002cac <HAL_GPIO_WritePin>
				break;
 8000b24:	bf00      	nop
		}
		UART_char('\n');
 8000b26:	200a      	movs	r0, #10
 8000b28:	f7ff fd24 	bl	8000574 <UART_char>

		// determines torque
		osDelay(dutyCycle);
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <Task01+0x26c>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fb69 	bl	8005208 <osDelay>
		HAL_GPIO_WritePin(INHUBANK, INHUPIN, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	4816      	ldr	r0, [pc, #88]	; (8000b98 <Task01+0x268>)
 8000b3e:	f002 f8b5 	bl	8002cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INHVBANK, INHVPIN, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f002 f8ae 	bl	8002cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INHWBANK, INHWPIN, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2108      	movs	r1, #8
 8000b54:	4810      	ldr	r0, [pc, #64]	; (8000b98 <Task01+0x268>)
 8000b56:	f002 f8a9 	bl	8002cac <HAL_GPIO_WritePin>

		// determines speed
		osDelay(dutyCycleLength - dutyCycle);
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <Task01+0x270>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <Task01+0x26c>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fb4e 	bl	8005208 <osDelay>

		if(button == 1)
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <Task01+0x274>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	f47f aee3 	bne.w	800093c <Task01+0xc>
		{
			if(dutyCycleLength > 200)
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <Task01+0x270>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	2bc8      	cmp	r3, #200	; 0xc8
 8000b7c:	d906      	bls.n	8000b8c <Task01+0x25c>
			{
				dutyCycleLength -= 100;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <Task01+0x270>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	3b64      	subs	r3, #100	; 0x64
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <Task01+0x270>)
 8000b88:	801a      	strh	r2, [r3, #0]
 8000b8a:	e6d7      	b.n	800093c <Task01+0xc>
			}
			else
			{
				dutyCycleLength = 1000;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <Task01+0x270>)
 8000b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b92:	801a      	strh	r2, [r3, #0]
		switch(state)
 8000b94:	e6d2      	b.n	800093c <Task01+0xc>
 8000b96:	bf00      	nop
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	20000002 	.word	0x20000002
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000140 	.word	0x20000140

08000ba8 <Task02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task02 */
void Task02(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task02 */
	/* Infinite loop */
	for(;;)
	{
		UART_int(adc_values[0]);
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <Task02+0x80>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fcef 	bl	8000598 <UART_int>
		UART_char('\t');
 8000bba:	2009      	movs	r0, #9
 8000bbc:	f7ff fcda 	bl	8000574 <UART_char>

		UART_int(adc_values[1]);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <Task02+0x80>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fce7 	bl	8000598 <UART_int>
		UART_char('\t');
 8000bca:	2009      	movs	r0, #9
 8000bcc:	f7ff fcd2 	bl	8000574 <UART_char>

		UART_int(adc_values[2]);
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <Task02+0x80>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fcdf 	bl	8000598 <UART_int>
		UART_char('\t');
 8000bda:	2009      	movs	r0, #9
 8000bdc:	f7ff fcca 	bl	8000574 <UART_char>

		UART_int(adc_values[3]);
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <Task02+0x80>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fcd7 	bl	8000598 <UART_int>
		UART_char('\t');
 8000bea:	2009      	movs	r0, #9
 8000bec:	f7ff fcc2 	bl	8000574 <UART_char>

		UART_int(adc_values[4]);
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <Task02+0x80>)
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fccf 	bl	8000598 <UART_int>
		UART_char('\t');
 8000bfa:	2009      	movs	r0, #9
 8000bfc:	f7ff fcba 	bl	8000574 <UART_char>

		UART_int(adc_values[5]);
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <Task02+0x80>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fcc7 	bl	8000598 <UART_int>
		UART_char('\t');
 8000c0a:	2009      	movs	r0, #9
 8000c0c:	f7ff fcb2 	bl	8000574 <UART_char>

		UART_int(dutyCycleLength);
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <Task02+0x84>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fcbf 	bl	8000598 <UART_int>
		UART_char('\n');
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f7ff fcaa 	bl	8000574 <UART_char>
		osDelay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f004 faf1 	bl	8005208 <osDelay>
		UART_int(adc_values[0]);
 8000c26:	e7c3      	b.n	8000bb0 <Task02+0x8>
 8000c28:	20000150 	.word	0x20000150
 8000c2c:	20000000 	.word	0x20000000

08000c30 <Task03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task03 */
void Task03(void *argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task03 */
	/* Infinite loop */
	for(;;)
	{
		button = HAL_GPIO_ReadPin(BUTTONBANK, BUTTONPIN);
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <Task03+0x24>)
 8000c3e:	f002 f81d 	bl	8002c7c <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <Task03+0x28>)
 8000c48:	701a      	strb	r2, [r3, #0]
		osDelay(50);
 8000c4a:	2032      	movs	r0, #50	; 0x32
 8000c4c:	f004 fadc 	bl	8005208 <osDelay>
		button = HAL_GPIO_ReadPin(BUTTONBANK, BUTTONPIN);
 8000c50:	e7f2      	b.n	8000c38 <Task03+0x8>
 8000c52:	bf00      	nop
 8000c54:	48000800 	.word	0x48000800
 8000c58:	20000140 	.word	0x20000140

08000c5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a36      	ldr	r2, [pc, #216]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a30      	ldr	r2, [pc, #192]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a2a      	ldr	r2, [pc, #168]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a24      	ldr	r2, [pc, #144]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_GPIO_Init+0xf4>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6___INHU_Pin|Green_LED_Pin|D11___INU_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f24a 4108 	movw	r1, #41992	; 0xa408
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <MX_GPIO_Init+0xf8>)
 8000cda:	f001 ffe7 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D9___INW_Pin|D10___INV_Pin|D5___INHV_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 4109 	mov.w	r1, #35072	; 0x8900
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f001 ffe0 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4815      	ldr	r0, [pc, #84]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000d04:	f001 fe40 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PB3 */
  GPIO_InitStruct.Pin = D6___INHU_Pin|Green_LED_Pin|D11___INU_Pin|GPIO_PIN_3;
 8000d08:	f24a 4308 	movw	r3, #41992	; 0xa408
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <MX_GPIO_Init+0xf8>)
 8000d22:	f001 fe31 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D9___INW_Pin|D10___INV_Pin|D5___INHV_Pin;
 8000d26:	f44f 4309 	mov.w	r3, #35072	; 0x8900
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f001 fe21 	bl	8002988 <HAL_GPIO_Init>

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f000 fa4c 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f818 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f7ff ff78 	bl	8000c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6c:	f7ff fd94 	bl	8000898 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d70:	f000 f990 	bl	8001094 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d74:	f7ff fc2c 	bl	80005d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	// Start ADC in DMA mode
	HAL_ADC_Start_DMA(&hadc1, adc_values, 6);
 8000d78:	2206      	movs	r2, #6
 8000d7a:	4905      	ldr	r1, [pc, #20]	; (8000d90 <main+0x34>)
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <main+0x38>)
 8000d7e:	f000 fd8d 	bl	800189c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d82:	f004 f965 	bl	8005050 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d86:	f7ff fda5 	bl	80008d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d8a:	f004 f985 	bl	8005098 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000d8e:	e7fe      	b.n	8000d8e <main+0x32>
 8000d90:	20000150 	.word	0x20000150
 8000d94:	20000094 	.word	0x20000094

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b096      	sub	sp, #88	; 0x58
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2244      	movs	r2, #68	; 0x44
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f006 fed8 	bl	8007b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dbe:	f001 ff9b 	bl	8002cf8 <HAL_PWREx_ControlVoltageScaling>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dc8:	f000 f84a 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dde:	2302      	movs	r3, #2
 8000de0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000de6:	230a      	movs	r3, #10
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 ffd2 	bl	8002da4 <HAL_RCC_OscConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e06:	f000 f82b 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2104      	movs	r1, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fbd2 	bl	80035cc <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e2e:	f000 f817 	bl	8000e60 <Error_Handler>
  }
}
 8000e32:	bf00      	nop
 8000e34:	3758      	adds	r7, #88	; 0x58
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e4e:	f000 f9f5 	bl	800123c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40001000 	.word	0x40001000

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e68:	e7fe      	b.n	8000e68 <Error_Handler+0x8>
	...

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	f06f 0001 	mvn.w	r0, #1
 8000eaa:	f001 fb4b 	bl	8002544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000eca:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <HAL_InitTick+0xe0>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	4a33      	ldr	r2, [pc, #204]	; (8000f9c <HAL_InitTick+0xe0>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <HAL_InitTick+0xe0>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee2:	f107 0210 	add.w	r2, r7, #16
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fd31 	bl	8003954 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d103      	bne.n	8000f04 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000efc:	f002 fcfe 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8000f00:	6378      	str	r0, [r7, #52]	; 0x34
 8000f02:	e004      	b.n	8000f0e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f04:	f002 fcfa 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <HAL_InitTick+0xe4>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9b      	lsrs	r3, r3, #18
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_InitTick+0xe8>)
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_InitTick+0xec>)
 8000f20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_InitTick+0xe8>)
 8000f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <HAL_InitTick+0xe8>)
 8000f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_InitTick+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_InitTick+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_InitTick+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <HAL_InitTick+0xe8>)
 8000f44:	f003 f8d4 	bl	80040f0 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d11b      	bne.n	8000f8e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <HAL_InitTick+0xe8>)
 8000f58:	f003 f92c 	bl	80041b4 <HAL_TIM_Base_Start_IT>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d111      	bne.n	8000f8e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f6a:	2036      	movs	r0, #54	; 0x36
 8000f6c:	f001 fb06 	bl	800257c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d808      	bhi.n	8000f88 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f76:	2200      	movs	r2, #0
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	2036      	movs	r0, #54	; 0x36
 8000f7c:	f001 fae2 	bl	8002544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_InitTick+0xf0>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e002      	b.n	8000f8e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3738      	adds	r7, #56	; 0x38
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	20000168 	.word	0x20000168
 8000fa8:	40001000 	.word	0x40001000
 8000fac:	20000008 	.word	0x20000008

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA1_Channel1_IRQHandler+0x10>)
 8000fe2:	f001 fbf1 	bl	80027c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000f8 	.word	0x200000f8

08000ff0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM6_DAC_IRQHandler+0x10>)
 8000ff6:	f003 f931 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000168 	.word	0x20000168

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f006 fd5a 	bl	8007aec <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20010000 	.word	0x20010000
 8001064:	00000400 	.word	0x00000400
 8001068:	200001b4 	.word	0x200001b4
 800106c:	20001b58 	.word	0x20001b58

08001070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_USART2_UART_Init+0x58>)
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <MX_USART2_UART_Init+0x5c>)
 800109c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010d8:	f003 fa8a 	bl	80045f0 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010e2:	f7ff febd 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001b8 	.word	0x200001b8
 80010f0:	40004400 	.word	0x40004400

080010f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0a2      	sub	sp, #136	; 0x88
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2260      	movs	r2, #96	; 0x60
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f006 fd21 	bl	8007b5c <memset>
  if(uartHandle->Instance==USART2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <HAL_UART_MspInit+0xac>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d138      	bne.n	8001196 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001124:	2302      	movs	r3, #2
 8001126:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001128:	2300      	movs	r3, #0
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fca1 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800113c:	f7ff fe90 	bl	8000e60 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_UART_MspInit+0xb0>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_UART_MspInit+0xb0>)
 8001146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114a:	6593      	str	r3, [r2, #88]	; 0x58
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_UART_MspInit+0xb0>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_UART_MspInit+0xb0>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_UART_MspInit+0xb0>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_UART_MspInit+0xb0>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001170:	230c      	movs	r3, #12
 8001172:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001182:	2307      	movs	r3, #7
 8001184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f001 fbf9 	bl	8002988 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3788      	adds	r7, #136	; 0x88
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40021000 	.word	0x40021000

080011a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ac:	f7ff ff60 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	; (80011e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <LoopForever+0xe>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	; (80011f4 <LoopForever+0x16>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f006 fc8f 	bl	8007af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011da:	f7ff fdbf 	bl	8000d5c <main>

080011de <LoopForever>:

LoopForever:
    b LoopForever
 80011de:	e7fe      	b.n	80011de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011ec:	0800857c 	.word	0x0800857c
  ldr r2, =_sbss
 80011f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011f4:	20001b58 	.word	0x20001b58

080011f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC1_IRQHandler>
	...

080011fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_Init+0x3c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_Init+0x3c>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001212:	2003      	movs	r0, #3
 8001214:	f001 f98b 	bl	800252e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001218:	200f      	movs	r0, #15
 800121a:	f7ff fe4f 	bl	8000ebc <HAL_InitTick>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	e001      	b.n	800122e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800122a:	f7ff fe1f 	bl	8000e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800122e:	79fb      	ldrb	r3, [r7, #7]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40022000 	.word	0x40022000

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000000c 	.word	0x2000000c
 8001260:	2000023c 	.word	0x2000023c

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2000023c 	.word	0x2000023c

0800127c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	609a      	str	r2, [r3, #8]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3360      	adds	r3, #96	; 0x60
 80012f6:	461a      	mov	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <LL_ADC_SetOffset+0x44>)
 8001306:	4013      	ands	r3, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	4313      	orrs	r3, r2
 8001314:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	03fff000 	.word	0x03fff000

0800132c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3360      	adds	r3, #96	; 0x60
 800133a:	461a      	mov	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3360      	adds	r3, #96	; 0x60
 8001368:	461a      	mov	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	431a      	orrs	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001382:	bf00      	nop
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3330      	adds	r3, #48	; 0x30
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	4413      	add	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	211f      	movs	r1, #31
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	401a      	ands	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	0e9b      	lsrs	r3, r3, #26
 80013ec:	f003 011f 	and.w	r1, r3, #31
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	431a      	orrs	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3314      	adds	r3, #20
 800141c:	461a      	mov	r2, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	0e5b      	lsrs	r3, r3, #25
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	4413      	add	r3, r2
 800142a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	0d1b      	lsrs	r3, r3, #20
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	2107      	movs	r1, #7
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	401a      	ands	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	0d1b      	lsrs	r3, r3, #20
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	431a      	orrs	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147c:	43db      	mvns	r3, r3
 800147e:	401a      	ands	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0318 	and.w	r3, r3, #24
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001488:	40d9      	lsrs	r1, r3
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	400b      	ands	r3, r1
 800148e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001492:	431a      	orrs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	0007ffff 	.word	0x0007ffff

080014ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6093      	str	r3, [r2, #8]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e4:	d101      	bne.n	80014ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800150c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001534:	d101      	bne.n	800153a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <LL_ADC_IsEnabled+0x18>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <LL_ADC_IsEnabled+0x1a>
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015aa:	f043 0204 	orr.w	r2, r3, #4
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d101      	bne.n	80015d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d101      	bne.n	80015fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e12c      	b.n	8001880 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff f881 	bl	800073c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff3f 	bl	80014d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff25 	bl	80014ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff5a 	bl	8001520 <LL_ADC_IsInternalRegulatorEnabled>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d115      	bne.n	800169e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff3e 	bl	80014f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800167c:	4b82      	ldr	r3, [pc, #520]	; (8001888 <HAL_ADC_Init+0x27c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	4a82      	ldr	r2, [pc, #520]	; (800188c <HAL_ADC_Init+0x280>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	099b      	lsrs	r3, r3, #6
 800168a:	3301      	adds	r3, #1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001690:	e002      	b.n	8001698 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff3c 	bl	8001520 <LL_ADC_IsInternalRegulatorEnabled>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10d      	bne.n	80016ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f043 0210 	orr.w	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff75 	bl	80015be <LL_ADC_REG_IsConversionOngoing>
 80016d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 80c5 	bne.w	800186e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 80c1 	bne.w	800186e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016f4:	f043 0202 	orr.w	r2, r3, #2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff35 	bl	8001570 <LL_ADC_IsEnabled>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10b      	bne.n	8001724 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800170c:	4860      	ldr	r0, [pc, #384]	; (8001890 <HAL_ADC_Init+0x284>)
 800170e:	f7ff ff2f 	bl	8001570 <LL_ADC_IsEnabled>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4619      	mov	r1, r3
 800171e:	485d      	ldr	r0, [pc, #372]	; (8001894 <HAL_ADC_Init+0x288>)
 8001720:	f7ff fdac 	bl	800127c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7e5b      	ldrb	r3, [r3, #25]
 8001728:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001734:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800173a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001742:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d106      	bne.n	8001760 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	3b01      	subs	r3, #1
 8001758:	045b      	lsls	r3, r3, #17
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	4b45      	ldr	r3, [pc, #276]	; (8001898 <HAL_ADC_Init+0x28c>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	69b9      	ldr	r1, [r7, #24]
 800178c:	430b      	orrs	r3, r1
 800178e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff12 	bl	80015be <LL_ADC_REG_IsConversionOngoing>
 800179a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff1f 	bl	80015e4 <LL_ADC_INJ_IsConversionOngoing>
 80017a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d13d      	bne.n	800182a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d13a      	bne.n	800182a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017d0:	f023 0302 	bic.w	r3, r3, #2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	69b9      	ldr	r1, [r7, #24]
 80017da:	430b      	orrs	r3, r1
 80017dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d118      	bne.n	800181a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017fe:	4311      	orrs	r1, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001804:	4311      	orrs	r1, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800180a:	430a      	orrs	r2, r1
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	e007      	b.n	800182a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d10c      	bne.n	800184c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f023 010f 	bic.w	r1, r3, #15
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
 800184a:	e007      	b.n	800185c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 020f 	bic.w	r2, r2, #15
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001860:	f023 0303 	bic.w	r3, r3, #3
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
 800186c:	e007      	b.n	800187e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001872:	f043 0210 	orr.w	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800187e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000004 	.word	0x20000004
 800188c:	053e2d63 	.word	0x053e2d63
 8001890:	50040000 	.word	0x50040000
 8001894:	50040300 	.word	0x50040300
 8001898:	fff0c007 	.word	0xfff0c007

0800189c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fe86 	bl	80015be <LL_ADC_REG_IsConversionOngoing>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d167      	bne.n	8001988 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_Start_DMA+0x2a>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e063      	b.n	800198e <HAL_ADC_Start_DMA+0xf2>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fc66 	bl	80021a0 <ADC_Enable>
 80018d4:	4603      	mov	r3, r0
 80018d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d14f      	bne.n	800197e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f023 0206 	bic.w	r2, r3, #6
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	659a      	str	r2, [r3, #88]	; 0x58
 800190a:	e002      	b.n	8001912 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a20      	ldr	r2, [pc, #128]	; (8001998 <HAL_ADC_Start_DMA+0xfc>)
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a1f      	ldr	r2, [pc, #124]	; (800199c <HAL_ADC_Start_DMA+0x100>)
 8001920:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_ADC_Start_DMA+0x104>)
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	221c      	movs	r2, #28
 8001930:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0210 	orr.w	r2, r2, #16
 8001948:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3340      	adds	r3, #64	; 0x40
 8001964:	4619      	mov	r1, r3
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f000 fecd 	bl	8002708 <HAL_DMA_Start_IT>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fe0d 	bl	8001596 <LL_ADC_REG_StartConversion>
 800197c:	e006      	b.n	800198c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001986:	e001      	b.n	800198c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001988:	2302      	movs	r3, #2
 800198a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800198c:	7dfb      	ldrb	r3, [r7, #23]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	080022ad 	.word	0x080022ad
 800199c:	08002385 	.word	0x08002385
 80019a0:	080023a1 	.word	0x080023a1

080019a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0b6      	sub	sp, #216	; 0xd8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x22>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e3b9      	b.n	8002176 <HAL_ADC_ConfigChannel+0x796>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fdd5 	bl	80015be <LL_ADC_REG_IsConversionOngoing>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 839e 	bne.w	8002158 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d824      	bhi.n	8001a6e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	3b02      	subs	r3, #2
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d81b      	bhi.n	8001a66 <HAL_ADC_ConfigChannel+0x86>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <HAL_ADC_ConfigChannel+0x54>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a4d 	.word	0x08001a4d
 8001a3c:	08001a55 	.word	0x08001a55
 8001a40:	08001a5d 	.word	0x08001a5d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	220c      	movs	r2, #12
 8001a48:	605a      	str	r2, [r3, #4]
          break;
 8001a4a:	e011      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2212      	movs	r2, #18
 8001a50:	605a      	str	r2, [r3, #4]
          break;
 8001a52:	e00d      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2218      	movs	r2, #24
 8001a58:	605a      	str	r2, [r3, #4]
          break;
 8001a5a:	e009      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a62:	605a      	str	r2, [r3, #4]
          break;
 8001a64:	e004      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2206      	movs	r2, #6
 8001a6a:	605a      	str	r2, [r3, #4]
          break;
 8001a6c:	e000      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a6e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f7ff fc99 	bl	80013b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fd99 	bl	80015be <LL_ADC_REG_IsConversionOngoing>
 8001a8c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fda5 	bl	80015e4 <LL_ADC_INJ_IsConversionOngoing>
 8001a9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 81a6 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 81a1 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f7ff fca4 	bl	800140c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	08db      	lsrs	r3, r3, #3
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d00a      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6919      	ldr	r1, [r3, #16]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001af6:	f7ff fbf5 	bl	80012e4 <LL_ADC_SetOffset>
 8001afa:	e17b      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fc12 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x148>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fc07 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	0e9b      	lsrs	r3, r3, #26
 8001b22:	f003 021f 	and.w	r2, r3, #31
 8001b26:	e01e      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x186>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fbfc 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b56:	2320      	movs	r3, #32
 8001b58:	e004      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x19e>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	e018      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	e004      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d106      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fbcb 	bl	8001358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fbaf 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10a      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x20e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fba4 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	0e9b      	lsrs	r3, r3, #26
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	e01e      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x24c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fb99 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	e004      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x264>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0e9b      	lsrs	r3, r3, #26
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	e018      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x296>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	e004      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d106      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2101      	movs	r1, #1
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fb68 	bl	8001358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fb4c 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x2d4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fb41 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	0e9b      	lsrs	r3, r3, #26
 8001cae:	f003 021f 	and.w	r2, r3, #31
 8001cb2:	e01e      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x312>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2102      	movs	r1, #2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fb36 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	e004      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x32a>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	e016      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x358>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e004      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	2102      	movs	r1, #2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fb07 	bl	8001358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2103      	movs	r1, #3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff faeb 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x396>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2103      	movs	r1, #3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fae0 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	e017      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x3c6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fad5 	bl	800132c <LL_ADC_GetOffsetChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d90:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e003      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d105      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x3de>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0e9b      	lsrs	r3, r3, #26
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	e011      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x402>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e003      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d106      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2200      	movs	r2, #0
 8001dec:	2103      	movs	r1, #3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fab2 	bl	8001358 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fbb9 	bl	8001570 <LL_ADC_IsEnabled>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 813f 	bne.w	8002084 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	461a      	mov	r2, r3
 8001e14:	f7ff fb26 	bl	8001464 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a8e      	ldr	r2, [pc, #568]	; (8002058 <HAL_ADC_ConfigChannel+0x678>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	f040 8130 	bne.w	8002084 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10b      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x46c>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0e9b      	lsrs	r3, r3, #26
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	bf94      	ite	ls
 8001e44:	2301      	movls	r3, #1
 8001e46:	2300      	movhi	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	e019      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x4a0>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	2b09      	cmp	r3, #9
 8001e78:	bf94      	ite	ls
 8001e7a:	2301      	movls	r3, #1
 8001e7c:	2300      	movhi	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d079      	beq.n	8001f78 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d107      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x4c0>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	3301      	adds	r3, #1
 8001e98:	069b      	lsls	r3, r3, #26
 8001e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9e:	e015      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x4ec>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e003      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	069b      	lsls	r3, r3, #26
 8001ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x50c>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	e017      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x53c>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f04:	2320      	movs	r3, #32
 8001f06:	e003      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	ea42 0103 	orr.w	r1, r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x562>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	3301      	adds	r3, #1
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	e018      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x594>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e003      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f74:	430b      	orrs	r3, r1
 8001f76:	e080      	b.n	800207a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x5b4>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	069b      	lsls	r3, r3, #26
 8001f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f92:	e015      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x5e0>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001fac:	2320      	movs	r3, #32
 8001fae:	e003      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	069b      	lsls	r3, r3, #26
 8001fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x600>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	e017      	b.n	8002010 <HAL_ADC_ConfigChannel+0x630>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	61fb      	str	r3, [r7, #28]
  return result;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e003      	b.n	8002004 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	3301      	adds	r3, #1
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	ea42 0103 	orr.w	r1, r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <HAL_ADC_ConfigChannel+0x65c>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	3301      	adds	r3, #1
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	3b1e      	subs	r3, #30
 8002034:	051b      	lsls	r3, r3, #20
 8002036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203a:	e01d      	b.n	8002078 <HAL_ADC_ConfigChannel+0x698>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	613b      	str	r3, [r7, #16]
  return result;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d103      	bne.n	800205c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e005      	b.n	8002064 <HAL_ADC_ConfigChannel+0x684>
 8002058:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	f003 021f 	and.w	r2, r3, #31
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	3b1e      	subs	r3, #30
 8002072:	051b      	lsls	r3, r3, #20
 8002074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002078:	430b      	orrs	r3, r1
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	6892      	ldr	r2, [r2, #8]
 800207e:	4619      	mov	r1, r3
 8002080:	f7ff f9c4 	bl	800140c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_ADC_ConfigChannel+0x7a0>)
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d06c      	beq.n	800216a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002090:	483c      	ldr	r0, [pc, #240]	; (8002184 <HAL_ADC_ConfigChannel+0x7a4>)
 8002092:	f7ff f919 	bl	80012c8 <LL_ADC_GetCommonPathInternalCh>
 8002096:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a3a      	ldr	r2, [pc, #232]	; (8002188 <HAL_ADC_ConfigChannel+0x7a8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d127      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d121      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a35      	ldr	r2, [pc, #212]	; (800218c <HAL_ADC_ConfigChannel+0x7ac>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d157      	bne.n	800216a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c2:	4619      	mov	r1, r3
 80020c4:	482f      	ldr	r0, [pc, #188]	; (8002184 <HAL_ADC_ConfigChannel+0x7a4>)
 80020c6:	f7ff f8ec 	bl	80012a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ca:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_ADC_ConfigChannel+0x7b0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	4a30      	ldr	r2, [pc, #192]	; (8002194 <HAL_ADC_ConfigChannel+0x7b4>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f2:	e03a      	b.n	800216a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_ADC_ConfigChannel+0x7b8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d113      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x746>
 80020fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10d      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_ADC_ConfigChannel+0x7ac>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d12a      	bne.n	800216a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211c:	4619      	mov	r1, r3
 800211e:	4819      	ldr	r0, [pc, #100]	; (8002184 <HAL_ADC_ConfigChannel+0x7a4>)
 8002120:	f7ff f8bf 	bl	80012a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002124:	e021      	b.n	800216a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_ADC_ConfigChannel+0x7bc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d11c      	bne.n	800216a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d116      	bne.n	800216a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_ADC_ConfigChannel+0x7ac>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d111      	bne.n	800216a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800214a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800214e:	4619      	mov	r1, r3
 8002150:	480c      	ldr	r0, [pc, #48]	; (8002184 <HAL_ADC_ConfigChannel+0x7a4>)
 8002152:	f7ff f8a6 	bl	80012a2 <LL_ADC_SetCommonPathInternalCh>
 8002156:	e008      	b.n	800216a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002172:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002176:	4618      	mov	r0, r3
 8002178:	37d8      	adds	r7, #216	; 0xd8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	80080000 	.word	0x80080000
 8002184:	50040300 	.word	0x50040300
 8002188:	c7520000 	.word	0xc7520000
 800218c:	50040000 	.word	0x50040000
 8002190:	20000004 	.word	0x20000004
 8002194:	053e2d63 	.word	0x053e2d63
 8002198:	cb840000 	.word	0xcb840000
 800219c:	80000001 	.word	0x80000001

080021a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff f9dd 	bl	8001570 <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d169      	bne.n	8002290 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <ADC_Enable+0xfc>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f043 0210 	orr.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f043 0201 	orr.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e055      	b.n	8002292 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f9ac 	bl	8001548 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021f0:	482b      	ldr	r0, [pc, #172]	; (80022a0 <ADC_Enable+0x100>)
 80021f2:	f7ff f869 	bl	80012c8 <LL_ADC_GetCommonPathInternalCh>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <ADC_Enable+0x104>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <ADC_Enable+0x108>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800221a:	e002      	b.n	8002222 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3b01      	subs	r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f9      	bne.n	800221c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002228:	f7ff f81c 	bl	8001264 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800222e:	e028      	b.n	8002282 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f99b 	bl	8001570 <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d104      	bne.n	800224a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff f97f 	bl	8001548 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800224a:	f7ff f80b 	bl	8001264 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d914      	bls.n	8002282 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d00d      	beq.n	8002282 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e007      	b.n	8002292 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d1cf      	bne.n	8002230 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	8000003f 	.word	0x8000003f
 80022a0:	50040300 	.word	0x50040300
 80022a4:	20000004 	.word	0x20000004
 80022a8:	053e2d63 	.word	0x053e2d63

080022ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d14b      	bne.n	800235e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d021      	beq.n	8002324 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f852 	bl	800138e <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d032      	beq.n	8002356 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d12b      	bne.n	8002356 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11f      	bne.n	8002356 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
 8002322:	e018      	b.n	8002356 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d111      	bne.n	8002356 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff fb24 	bl	80019a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800235c:	e00e      	b.n	800237c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fb2e 	bl	80019cc <HAL_ADC_ErrorCallback>
}
 8002370:	e004      	b.n	800237c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff fb10 	bl	80019b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f043 0204 	orr.w	r2, r3, #4
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fb00 	bl	80019cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	; (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff4c 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002556:	f7ff ff61 	bl	800241c <__NVIC_GetPriorityGrouping>
 800255a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	6978      	ldr	r0, [r7, #20]
 8002562:	f7ff ffb1 	bl	80024c8 <NVIC_EncodePriority>
 8002566:	4602      	mov	r2, r0
 8002568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff80 	bl	8002474 <__NVIC_SetPriority>
}
 8002574:	bf00      	nop
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff54 	bl	8002438 <__NVIC_EnableIRQ>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e098      	b.n	80026dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <HAL_DMA_Init+0x150>)
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d80f      	bhi.n	80025d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_DMA_Init+0x154>)
 80025be:	4413      	add	r3, r2
 80025c0:	4a4b      	ldr	r2, [pc, #300]	; (80026f0 <HAL_DMA_Init+0x158>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a48      	ldr	r2, [pc, #288]	; (80026f4 <HAL_DMA_Init+0x15c>)
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
 80025d4:	e00e      	b.n	80025f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_DMA_Init+0x160>)
 80025de:	4413      	add	r3, r2
 80025e0:	4a43      	ldr	r2, [pc, #268]	; (80026f0 <HAL_DMA_Init+0x158>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	009a      	lsls	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a42      	ldr	r2, [pc, #264]	; (80026fc <HAL_DMA_Init+0x164>)
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264e:	d039      	beq.n	80026c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_DMA_Init+0x15c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d11a      	bne.n	8002690 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <HAL_DMA_Init+0x168>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 031c 	and.w	r3, r3, #28
 8002666:	210f      	movs	r1, #15
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	4924      	ldr	r1, [pc, #144]	; (8002700 <HAL_DMA_Init+0x168>)
 8002670:	4013      	ands	r3, r2
 8002672:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_DMA_Init+0x168>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f003 031c 	and.w	r3, r3, #28
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	491d      	ldr	r1, [pc, #116]	; (8002700 <HAL_DMA_Init+0x168>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
 800268e:	e019      	b.n	80026c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_DMA_Init+0x16c>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f003 031c 	and.w	r3, r3, #28
 800269c:	210f      	movs	r1, #15
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4917      	ldr	r1, [pc, #92]	; (8002704 <HAL_DMA_Init+0x16c>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_DMA_Init+0x16c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f003 031c 	and.w	r3, r3, #28
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	4911      	ldr	r1, [pc, #68]	; (8002704 <HAL_DMA_Init+0x16c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40020407 	.word	0x40020407
 80026ec:	bffdfff8 	.word	0xbffdfff8
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	40020000 	.word	0x40020000
 80026f8:	bffdfbf8 	.word	0xbffdfbf8
 80026fc:	40020400 	.word	0x40020400
 8002700:	400200a8 	.word	0x400200a8
 8002704:	400204a8 	.word	0x400204a8

08002708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Start_IT+0x20>
 8002724:	2302      	movs	r3, #2
 8002726:	e04b      	b.n	80027c0 <HAL_DMA_Start_IT+0xb8>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d13a      	bne.n	80027b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f8e0 	bl	8002926 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 020e 	orr.w	r2, r2, #14
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e00f      	b.n	80027a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0204 	bic.w	r2, r2, #4
 800278e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 020a 	orr.w	r2, r2, #10
 800279e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e005      	b.n	80027be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f003 031c 	and.w	r3, r3, #28
 80027e8:	2204      	movs	r2, #4
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d026      	beq.n	8002842 <HAL_DMA_IRQHandler+0x7a>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d021      	beq.n	8002842 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	f003 021c 	and.w	r2, r3, #28
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2104      	movs	r1, #4
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	2b00      	cmp	r3, #0
 8002836:	d071      	beq.n	800291c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002840:	e06c      	b.n	800291c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f003 031c 	and.w	r3, r3, #28
 800284a:	2202      	movs	r2, #2
 800284c:	409a      	lsls	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d02e      	beq.n	80028b4 <HAL_DMA_IRQHandler+0xec>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d029      	beq.n	80028b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10b      	bne.n	8002886 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 020a 	bic.w	r2, r2, #10
 800287c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f003 021c 	and.w	r2, r3, #28
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2102      	movs	r1, #2
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d038      	beq.n	800291c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028b2:	e033      	b.n	800291c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f003 031c 	and.w	r3, r3, #28
 80028bc:	2208      	movs	r2, #8
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d02a      	beq.n	800291e <HAL_DMA_IRQHandler+0x156>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d025      	beq.n	800291e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 020e 	bic.w	r2, r2, #14
 80028e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f003 021c 	and.w	r2, r3, #28
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800291c:	bf00      	nop
 800291e:	bf00      	nop
}
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	f003 021c 	and.w	r2, r3, #28
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f202 	lsl.w	r2, r1, r2
 8002946:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b10      	cmp	r3, #16
 8002956:	d108      	bne.n	800296a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002968:	e007      	b.n	800297a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	60da      	str	r2, [r3, #12]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002996:	e154      	b.n	8002c42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8146 	beq.w	8002c3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d005      	beq.n	80029c8 <HAL_GPIO_Init+0x40>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d130      	bne.n	8002a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fe:	2201      	movs	r2, #1
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 0201 	and.w	r2, r3, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d017      	beq.n	8002a66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d123      	bne.n	8002aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	6939      	ldr	r1, [r7, #16]
 8002ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80a0 	beq.w	8002c3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afc:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <HAL_GPIO_Init+0x2d8>)
 8002afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b00:	4a57      	ldr	r2, [pc, #348]	; (8002c60 <HAL_GPIO_Init+0x2d8>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6613      	str	r3, [r2, #96]	; 0x60
 8002b08:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <HAL_GPIO_Init+0x2d8>)
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b14:	4a53      	ldr	r2, [pc, #332]	; (8002c64 <HAL_GPIO_Init+0x2dc>)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b3e:	d019      	beq.n	8002b74 <HAL_GPIO_Init+0x1ec>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <HAL_GPIO_Init+0x2e0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_GPIO_Init+0x1e8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a48      	ldr	r2, [pc, #288]	; (8002c6c <HAL_GPIO_Init+0x2e4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00d      	beq.n	8002b6c <HAL_GPIO_Init+0x1e4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a47      	ldr	r2, [pc, #284]	; (8002c70 <HAL_GPIO_Init+0x2e8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <HAL_GPIO_Init+0x1e0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a46      	ldr	r2, [pc, #280]	; (8002c74 <HAL_GPIO_Init+0x2ec>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_GPIO_Init+0x1dc>
 8002b60:	2304      	movs	r3, #4
 8002b62:	e008      	b.n	8002b76 <HAL_GPIO_Init+0x1ee>
 8002b64:	2307      	movs	r3, #7
 8002b66:	e006      	b.n	8002b76 <HAL_GPIO_Init+0x1ee>
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e004      	b.n	8002b76 <HAL_GPIO_Init+0x1ee>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e002      	b.n	8002b76 <HAL_GPIO_Init+0x1ee>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_GPIO_Init+0x1ee>
 8002b74:	2300      	movs	r3, #0
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	f002 0203 	and.w	r2, r2, #3
 8002b7c:	0092      	lsls	r2, r2, #2
 8002b7e:	4093      	lsls	r3, r2
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b86:	4937      	ldr	r1, [pc, #220]	; (8002c64 <HAL_GPIO_Init+0x2dc>)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b94:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_GPIO_Init+0x2f0>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	; (8002c78 <HAL_GPIO_Init+0x2f0>)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bbe:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_GPIO_Init+0x2f0>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002be2:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <HAL_GPIO_Init+0x2f0>)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <HAL_GPIO_Init+0x2f0>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c0c:	4a1a      	ldr	r2, [pc, #104]	; (8002c78 <HAL_GPIO_Init+0x2f0>)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c12:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_GPIO_Init+0x2f0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c36:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <HAL_GPIO_Init+0x2f0>)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f47f aea3 	bne.w	8002998 <HAL_GPIO_Init+0x10>
  }
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010000 	.word	0x40010000
 8002c68:	48000400 	.word	0x48000400
 8002c6c:	48000800 	.word	0x48000800
 8002c70:	48000c00 	.word	0x48000c00
 8002c74:	48001000 	.word	0x48001000
 8002c78:	40010400 	.word	0x40010400

08002c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e001      	b.n	8002c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cbc:	787b      	ldrb	r3, [r7, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc8:	e002      	b.n	8002cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40007000 	.word	0x40007000

08002cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d06:	d130      	bne.n	8002d6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d08:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d14:	d038      	beq.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2232      	movs	r2, #50	; 0x32
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0c9b      	lsrs	r3, r3, #18
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d3c:	e002      	b.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d44:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d50:	d102      	bne.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f2      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d64:	d110      	bne.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e00f      	b.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d007      	beq.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d78:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d80:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	20000004 	.word	0x20000004
 8002da0:	431bde83 	.word	0x431bde83

08002da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f000 bc02 	b.w	80035bc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db8:	4b96      	ldr	r3, [pc, #600]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc2:	4b94      	ldr	r3, [pc, #592]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80e4 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4c>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	f040 808b 	bne.w	8002efe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	f040 8087 	bne.w	8002efe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002df0:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_OscConfig+0x64>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e3d9      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	4b81      	ldr	r3, [pc, #516]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_RCC_OscConfig+0x7e>
 8002e18:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e20:	e005      	b.n	8002e2e <HAL_RCC_OscConfig+0x8a>
 8002e22:	4b7c      	ldr	r3, [pc, #496]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d223      	bcs.n	8002e7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fdbe 	bl	80039b8 <RCC_SetFlashLatencyFromMSIRange>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e3ba      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e46:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a72      	ldr	r2, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	f043 0308 	orr.w	r3, r3, #8
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b70      	ldr	r3, [pc, #448]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	496d      	ldr	r1, [pc, #436]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e64:	4b6b      	ldr	r3, [pc, #428]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	4968      	ldr	r1, [pc, #416]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	e025      	b.n	8002ec6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e7a:	4b66      	ldr	r3, [pc, #408]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a65      	ldr	r2, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4960      	ldr	r1, [pc, #384]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e98:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	495b      	ldr	r1, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fd7e 	bl	80039b8 <RCC_SetFlashLatencyFromMSIRange>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e37a      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec6:	f000 fc81 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b51      	ldr	r3, [pc, #324]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	4950      	ldr	r1, [pc, #320]	; (8003018 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a4e      	ldr	r2, [pc, #312]	; (800301c <HAL_RCC_OscConfig+0x278>)
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee6:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <HAL_RCC_OscConfig+0x27c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd ffe6 	bl	8000ebc <HAL_InitTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d052      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	e35e      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d032      	beq.n	8002f6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f06:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f12:	f7fe f9a7 	bl	8001264 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f1a:	f7fe f9a3 	bl	8001264 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e347      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2c:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f38:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a35      	ldr	r2, [pc, #212]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4930      	ldr	r1, [pc, #192]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	492b      	ldr	r1, [pc, #172]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
 8002f6a:	e01a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a28      	ldr	r2, [pc, #160]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f78:	f7fe f974 	bl	8001264 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f80:	f7fe f970 	bl	8001264 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e314      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x1dc>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d073      	beq.n	8003096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x21c>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d063      	beq.n	8003094 <HAL_RCC_OscConfig+0x2f0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d15f      	bne.n	8003094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e2f1      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d106      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e025      	b.n	800303c <HAL_RCC_OscConfig+0x298>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff8:	d114      	bne.n	8003024 <HAL_RCC_OscConfig+0x280>
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a02      	ldr	r2, [pc, #8]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e013      	b.n	800303c <HAL_RCC_OscConfig+0x298>
 8003014:	40021000 	.word	0x40021000
 8003018:	080084f0 	.word	0x080084f0
 800301c:	20000004 	.word	0x20000004
 8003020:	20000008 	.word	0x20000008
 8003024:	4ba0      	ldr	r3, [pc, #640]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a9f      	ldr	r2, [pc, #636]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b9d      	ldr	r3, [pc, #628]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a9c      	ldr	r2, [pc, #624]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe f90e 	bl	8001264 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe f90a 	bl	8001264 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e2ae      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305e:	4b92      	ldr	r3, [pc, #584]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x2a8>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe f8fa 	bl	8001264 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe f8f6 	bl	8001264 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e29a      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003086:	4b88      	ldr	r3, [pc, #544]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x2d0>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d060      	beq.n	8003164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x310>
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d119      	bne.n	80030e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d116      	bne.n	80030e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b4:	4b7c      	ldr	r3, [pc, #496]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_OscConfig+0x328>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e277      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	4973      	ldr	r1, [pc, #460]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e0:	e040      	b.n	8003164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d023      	beq.n	8003132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ea:	4b6f      	ldr	r3, [pc, #444]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6e      	ldr	r2, [pc, #440]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe f8b5 	bl	8001264 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe f8b1 	bl	8001264 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e255      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003110:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b62      	ldr	r3, [pc, #392]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	495f      	ldr	r1, [pc, #380]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
 8003130:	e018      	b.n	8003164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003132:	4b5d      	ldr	r3, [pc, #372]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a5c      	ldr	r2, [pc, #368]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe f891 	bl	8001264 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003146:	f7fe f88d 	bl	8001264 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e231      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03c      	beq.n	80031ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003178:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	4a4a      	ldr	r2, [pc, #296]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe f86c 	bl	8001264 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe f868 	bl	8001264 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e20c      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <HAL_RCC_OscConfig+0x3ec>
 80031b0:	e01b      	b.n	80031ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b8:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe f84f 	bl	8001264 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe f84b 	bl	8001264 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e1ef      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ef      	bne.n	80031ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80a6 	beq.w	8003344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10d      	bne.n	8003224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003212:	6593      	str	r3, [r2, #88]	; 0x58
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003224:	4b21      	ldr	r3, [pc, #132]	; (80032ac <HAL_RCC_OscConfig+0x508>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d118      	bne.n	8003262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003230:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <HAL_RCC_OscConfig+0x508>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_RCC_OscConfig+0x508>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323c:	f7fe f812 	bl	8001264 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe f80e 	bl	8001264 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1b2      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCC_OscConfig+0x508>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <HAL_RCC_OscConfig+0x4d8>
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327a:	e029      	b.n	80032d0 <HAL_RCC_OscConfig+0x52c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d115      	bne.n	80032b0 <HAL_RCC_OscConfig+0x50c>
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	4a03      	ldr	r2, [pc, #12]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x52c>
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
 80032b0:	4b9a      	ldr	r3, [pc, #616]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	4a99      	ldr	r2, [pc, #612]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c0:	4b96      	ldr	r3, [pc, #600]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	4a95      	ldr	r2, [pc, #596]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fd ffc4 	bl	8001264 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7fd ffc0 	bl	8001264 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e162      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	4b89      	ldr	r3, [pc, #548]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ed      	beq.n	80032e0 <HAL_RCC_OscConfig+0x53c>
 8003304:	e015      	b.n	8003332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fd ffad 	bl	8001264 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fd ffa9 	bl	8001264 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e14b      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003324:	4b7d      	ldr	r3, [pc, #500]	; (800351c <HAL_RCC_OscConfig+0x778>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ed      	bne.n	800330e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4b78      	ldr	r3, [pc, #480]	; (800351c <HAL_RCC_OscConfig+0x778>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	4a77      	ldr	r2, [pc, #476]	; (800351c <HAL_RCC_OscConfig+0x778>)
 800333e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003342:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d03c      	beq.n	80033ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01c      	beq.n	8003392 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003358:	4b70      	ldr	r3, [pc, #448]	; (800351c <HAL_RCC_OscConfig+0x778>)
 800335a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800335e:	4a6f      	ldr	r2, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x778>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003368:	f7fd ff7c 	bl	8001264 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003370:	f7fd ff78 	bl	8001264 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e11c      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003382:	4b66      	ldr	r3, [pc, #408]	; (800351c <HAL_RCC_OscConfig+0x778>)
 8003384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ef      	beq.n	8003370 <HAL_RCC_OscConfig+0x5cc>
 8003390:	e01b      	b.n	80033ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003392:	4b62      	ldr	r3, [pc, #392]	; (800351c <HAL_RCC_OscConfig+0x778>)
 8003394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003398:	4a60      	ldr	r2, [pc, #384]	; (800351c <HAL_RCC_OscConfig+0x778>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a2:	f7fd ff5f 	bl	8001264 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033aa:	f7fd ff5b 	bl	8001264 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0ff      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033bc:	4b57      	ldr	r3, [pc, #348]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80033be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ef      	bne.n	80033aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80f3 	beq.w	80035ba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f040 80c9 	bne.w	8003570 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033de:	4b4f      	ldr	r3, [pc, #316]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 0203 	and.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d12c      	bne.n	800344c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	3b01      	subs	r3, #1
 80033fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d123      	bne.n	800344c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d11b      	bne.n	800344c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d113      	bne.n	800344c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	3b01      	subs	r3, #1
 8003432:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d109      	bne.n	800344c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	3b01      	subs	r3, #1
 8003446:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d06b      	beq.n	8003524 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d062      	beq.n	8003518 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003452:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_RCC_OscConfig+0x778>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e0ac      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003462:	4b2e      	ldr	r3, [pc, #184]	; (800351c <HAL_RCC_OscConfig+0x778>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2d      	ldr	r2, [pc, #180]	; (800351c <HAL_RCC_OscConfig+0x778>)
 8003468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800346e:	f7fd fef9 	bl	8001264 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fd fef5 	bl	8001264 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e099      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_OscConfig+0x778>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003494:	4b21      	ldr	r3, [pc, #132]	; (800351c <HAL_RCC_OscConfig+0x778>)
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_RCC_OscConfig+0x77c>)
 800349a:	4013      	ands	r3, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034a4:	3a01      	subs	r2, #1
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	4311      	orrs	r1, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034ae:	0212      	lsls	r2, r2, #8
 80034b0:	4311      	orrs	r1, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034b6:	0852      	lsrs	r2, r2, #1
 80034b8:	3a01      	subs	r2, #1
 80034ba:	0552      	lsls	r2, r2, #21
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034c2:	0852      	lsrs	r2, r2, #1
 80034c4:	3a01      	subs	r2, #1
 80034c6:	0652      	lsls	r2, r2, #25
 80034c8:	4311      	orrs	r1, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ce:	06d2      	lsls	r2, r2, #27
 80034d0:	430a      	orrs	r2, r1
 80034d2:	4912      	ldr	r1, [pc, #72]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0f      	ldr	r2, [pc, #60]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <HAL_RCC_OscConfig+0x778>)
 80034ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034f0:	f7fd feb8 	bl	8001264 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fd feb4 	bl	8001264 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e058      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <HAL_RCC_OscConfig+0x778>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003516:	e050      	b.n	80035ba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e04f      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
 800351c:	40021000 	.word	0x40021000
 8003520:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d144      	bne.n	80035ba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 8003536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a20      	ldr	r2, [pc, #128]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 8003542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003546:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003548:	f7fd fe8c 	bl	8001264 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003550:	f7fd fe88 	bl	8001264 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e02c      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x7ac>
 800356e:	e024      	b.n	80035ba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d01f      	beq.n	80035b6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 800357c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd fe6f 	bl	8001264 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358a:	f7fd fe6b 	bl	8001264 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e00f      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f0      	bne.n	800358a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	4905      	ldr	r1, [pc, #20]	; (80035c4 <HAL_RCC_OscConfig+0x820>)
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_RCC_OscConfig+0x824>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	60cb      	str	r3, [r1, #12]
 80035b4:	e001      	b.n	80035ba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	feeefffc 	.word	0xfeeefffc

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0e7      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <HAL_RCC_ClockConfig+0x1ec>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d910      	bls.n	8003610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b72      	ldr	r3, [pc, #456]	; (80037b8 <HAL_RCC_ClockConfig+0x1ec>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 0207 	bic.w	r2, r3, #7
 80035f6:	4970      	ldr	r1, [pc, #448]	; (80037b8 <HAL_RCC_ClockConfig+0x1ec>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b6e      	ldr	r3, [pc, #440]	; (80037b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0cf      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	4b66      	ldr	r3, [pc, #408]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003628:	429a      	cmp	r2, r3
 800362a:	d908      	bls.n	800363e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4960      	ldr	r1, [pc, #384]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d04c      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003652:	4b5a      	ldr	r3, [pc, #360]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d121      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e0a6      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366a:	4b54      	ldr	r3, [pc, #336]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d115      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e09a      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003682:	4b4e      	ldr	r3, [pc, #312]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e08e      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003692:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e086      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b46      	ldr	r3, [pc, #280]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4943      	ldr	r1, [pc, #268]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b4:	f7fd fdd6 	bl	8001264 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7fd fdd2 	bl	8001264 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e06e      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d010      	beq.n	8003712 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d208      	bcs.n	8003712 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	492b      	ldr	r1, [pc, #172]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d210      	bcs.n	8003742 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 0207 	bic.w	r2, r3, #7
 8003728:	4923      	ldr	r1, [pc, #140]	; (80037b8 <HAL_RCC_ClockConfig+0x1ec>)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003730:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d001      	beq.n	8003742 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e036      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4918      	ldr	r1, [pc, #96]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	4313      	orrs	r3, r2
 800375e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4910      	ldr	r1, [pc, #64]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003780:	f000 f824 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	490b      	ldr	r1, [pc, #44]	; (80037c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	4a09      	ldr	r2, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 800379e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1fc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd fb89 	bl	8000ebc <HAL_InitTick>
 80037aa:	4603      	mov	r3, r0
 80037ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80037ae:	7afb      	ldrb	r3, [r7, #11]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40022000 	.word	0x40022000
 80037bc:	40021000 	.word	0x40021000
 80037c0:	080084f0 	.word	0x080084f0
 80037c4:	20000004 	.word	0x20000004
 80037c8:	20000008 	.word	0x20000008

080037cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037da:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e4:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x34>
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d121      	bne.n	800383e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d11e      	bne.n	800383e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800380c:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800380e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e005      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003828:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003830:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383c:	e00a      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b04      	cmp	r3, #4
 8003842:	d102      	bne.n	800384a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e004      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d101      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003852:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d134      	bne.n	80038c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0xa6>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d003      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0xac>
 8003870:	e005      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003874:	617b      	str	r3, [r7, #20]
      break;
 8003876:	e005      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800387a:	617b      	str	r3, [r7, #20]
      break;
 800387c:	e002      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	617b      	str	r3, [r7, #20]
      break;
 8003882:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	3301      	adds	r3, #1
 8003890:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	fb03 f202 	mul.w	r2, r3, r2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	0e5b      	lsrs	r3, r3, #25
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	3301      	adds	r3, #1
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038c4:	69bb      	ldr	r3, [r7, #24]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	; 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08008508 	.word	0x08008508
 80038dc:	00f42400 	.word	0x00f42400
 80038e0:	007a1200 	.word	0x007a1200

080038e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003900:	f7ff fff0 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4904      	ldr	r1, [pc, #16]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	08008500 	.word	0x08008500

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800392c:	f7ff ffda 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0adb      	lsrs	r3, r3, #11
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4904      	ldr	r1, [pc, #16]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000
 8003950:	08008500 	.word	0x08008500

08003954 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	220f      	movs	r2, #15
 8003962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <HAL_RCC_GetClockConfig+0x60>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0207 	and.w	r2, r3, #7
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	601a      	str	r2, [r3, #0]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40022000 	.word	0x40022000

080039b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039d0:	f7ff f984 	bl	8002cdc <HAL_PWREx_GetVoltageRange>
 80039d4:	6178      	str	r0, [r7, #20]
 80039d6:	e014      	b.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039d8:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	4a24      	ldr	r2, [pc, #144]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	6593      	str	r3, [r2, #88]	; 0x58
 80039e4:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039f0:	f7ff f974 	bl	8002cdc <HAL_PWREx_GetVoltageRange>
 80039f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039f6:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	d10b      	bne.n	8003a22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b80      	cmp	r3, #128	; 0x80
 8003a0e:	d919      	bls.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2ba0      	cmp	r3, #160	; 0xa0
 8003a14:	d902      	bls.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a16:	2302      	movs	r3, #2
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e013      	b.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e010      	b.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b80      	cmp	r3, #128	; 0x80
 8003a26:	d902      	bls.n	8003a2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a28:	2303      	movs	r3, #3
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e00a      	b.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d102      	bne.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a34:	2302      	movs	r3, #2
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e004      	b.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d101      	bne.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a40:	2301      	movs	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 0207 	bic.w	r2, r3, #7
 8003a4c:	4909      	ldr	r1, [pc, #36]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40022000 	.word	0x40022000

08003a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a80:	2300      	movs	r3, #0
 8003a82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a84:	2300      	movs	r3, #0
 8003a86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d031      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a9c:	d01a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aa2:	d814      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aac:	d10f      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003aae:	4b5d      	ldr	r3, [pc, #372]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4a5c      	ldr	r2, [pc, #368]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aba:	e00c      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fa22 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003acc:	e003      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003adc:	4b51      	ldr	r3, [pc, #324]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	494e      	ldr	r1, [pc, #312]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003af2:	e001      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 809e 	beq.w	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b0a:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b2c:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b48:	f7fd fb8c 	bl	8001264 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b4e:	e009      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b50:	f7fd fb88 	bl	8001264 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d902      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	74fb      	strb	r3, [r7, #19]
        break;
 8003b62:	e005      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b64:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ef      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d15a      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01e      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d019      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bbe:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d016      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fb48 	bl	8001264 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fb44 	bl	8001264 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d902      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	74fb      	strb	r3, [r7, #19]
            break;
 8003bee:	e006      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0ec      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10b      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	4904      	ldr	r1, [pc, #16]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c1a:	e009      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c30:	7c7b      	ldrb	r3, [r7, #17]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c36:	4b8d      	ldr	r3, [pc, #564]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3a:	4a8c      	ldr	r2, [pc, #560]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4e:	4b87      	ldr	r3, [pc, #540]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f023 0203 	bic.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4983      	ldr	r1, [pc, #524]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c70:	4b7e      	ldr	r3, [pc, #504]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f023 020c 	bic.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	497b      	ldr	r1, [pc, #492]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c92:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	4972      	ldr	r1, [pc, #456]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cb4:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	496a      	ldr	r1, [pc, #424]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cd6:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	4961      	ldr	r1, [pc, #388]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cf8:	4b5c      	ldr	r3, [pc, #368]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4959      	ldr	r1, [pc, #356]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d1a:	4b54      	ldr	r3, [pc, #336]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	4950      	ldr	r1, [pc, #320]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3c:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	4948      	ldr	r1, [pc, #288]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d5e:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	493f      	ldr	r1, [pc, #252]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d028      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d80:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8e:	4937      	ldr	r1, [pc, #220]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d9e:	d106      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da0:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003daa:	60d3      	str	r3, [r2, #12]
 8003dac:	e011      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003db6:	d10c      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f8a4 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d028      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dde:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	491f      	ldr	r1, [pc, #124]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e08:	60d3      	str	r3, [r2, #12]
 8003e0a:	e011      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f875 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02b      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	4908      	ldr	r1, [pc, #32]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a02      	ldr	r2, [pc, #8]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]
 8003e68:	e014      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f843 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01c      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	4916      	ldr	r1, [pc, #88]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ebe:	d10c      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f820 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	4904      	ldr	r1, [pc, #16]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003efc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000

08003f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f1a:	4b74      	ldr	r3, [pc, #464]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f26:	4b71      	ldr	r3, [pc, #452]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0203 	and.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d10d      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
       ||
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f3e:	4b6b      	ldr	r3, [pc, #428]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d047      	beq.n	8003fe2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
 8003f56:	e044      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d018      	beq.n	8003f92 <RCCEx_PLLSAI1_Config+0x86>
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d825      	bhi.n	8003fb0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d002      	beq.n	8003f6e <RCCEx_PLLSAI1_Config+0x62>
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d009      	beq.n	8003f80 <RCCEx_PLLSAI1_Config+0x74>
 8003f6c:	e020      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f6e:	4b5f      	ldr	r3, [pc, #380]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11d      	bne.n	8003fb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f7e:	e01a      	b.n	8003fb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f80:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d116      	bne.n	8003fba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f90:	e013      	b.n	8003fba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f92:	4b56      	ldr	r3, [pc, #344]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f9e:	4b53      	ldr	r3, [pc, #332]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fae:	e006      	b.n	8003fbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb4:	e004      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10d      	bne.n	8003fe2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fc6:	4b49      	ldr	r3, [pc, #292]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	4943      	ldr	r1, [pc, #268]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d17c      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd f936 	bl	8001264 <HAL_GetTick>
 8003ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ffa:	e009      	b.n	8004010 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ffc:	f7fd f932 	bl	8001264 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d902      	bls.n	8004010 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	73fb      	strb	r3, [r7, #15]
        break;
 800400e:	e005      	b.n	800401c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1ef      	bne.n	8003ffc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d15f      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d110      	bne.n	800404a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004030:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6892      	ldr	r2, [r2, #8]
 8004038:	0211      	lsls	r1, r2, #8
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68d2      	ldr	r2, [r2, #12]
 800403e:	06d2      	lsls	r2, r2, #27
 8004040:	430a      	orrs	r2, r1
 8004042:	492a      	ldr	r1, [pc, #168]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	610b      	str	r3, [r1, #16]
 8004048:	e027      	b.n	800409a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d112      	bne.n	8004076 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004050:	4b26      	ldr	r3, [pc, #152]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004058:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6892      	ldr	r2, [r2, #8]
 8004060:	0211      	lsls	r1, r2, #8
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6912      	ldr	r2, [r2, #16]
 8004066:	0852      	lsrs	r2, r2, #1
 8004068:	3a01      	subs	r2, #1
 800406a:	0552      	lsls	r2, r2, #21
 800406c:	430a      	orrs	r2, r1
 800406e:	491f      	ldr	r1, [pc, #124]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004070:	4313      	orrs	r3, r2
 8004072:	610b      	str	r3, [r1, #16]
 8004074:	e011      	b.n	800409a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800407e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	0211      	lsls	r1, r2, #8
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6952      	ldr	r2, [r2, #20]
 800408c:	0852      	lsrs	r2, r2, #1
 800408e:	3a01      	subs	r2, #1
 8004090:	0652      	lsls	r2, r2, #25
 8004092:	430a      	orrs	r2, r1
 8004094:	4915      	ldr	r1, [pc, #84]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004096:	4313      	orrs	r3, r2
 8004098:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a13      	ldr	r2, [pc, #76]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fd f8dd 	bl	8001264 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ac:	e009      	b.n	80040c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ae:	f7fd f8d9 	bl	8001264 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d902      	bls.n	80040c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	73fb      	strb	r3, [r7, #15]
          break;
 80040c0:	e005      	b.n	80040ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ef      	beq.n	80040ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	4903      	ldr	r1, [pc, #12]	; (80040ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000

080040f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e049      	b.n	8004196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f841 	bl	800419e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 f9dc 	bl	80044ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e03b      	b.n	8004244 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <HAL_TIM_Base_Start_IT+0x9c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x4e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d004      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x4e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a15      	ldr	r2, [pc, #84]	; (8004254 <HAL_TIM_Base_Start_IT+0xa0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d115      	bne.n	800422e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <HAL_TIM_Base_Start_IT+0xa4>)
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b06      	cmp	r3, #6
 8004212:	d015      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x8c>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421a:	d011      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	e008      	b.n	8004240 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e000      	b.n	8004242 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40014000 	.word	0x40014000
 8004258:	00010007 	.word	0x00010007

0800425c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d122      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b02      	cmp	r3, #2
 800427e:	d11b      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0202 	mvn.w	r2, #2
 8004288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f905 	bl	80044ae <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8f7 	bl	800449a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f908 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d122      	bne.n	800430c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d11b      	bne.n	800430c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0204 	mvn.w	r2, #4
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8db 	bl	80044ae <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8cd 	bl	800449a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8de 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b08      	cmp	r3, #8
 8004318:	d122      	bne.n	8004360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b08      	cmp	r3, #8
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0208 	mvn.w	r2, #8
 8004330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2204      	movs	r2, #4
 8004336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8b1 	bl	80044ae <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8a3 	bl	800449a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8b4 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b10      	cmp	r3, #16
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0210 	mvn.w	r2, #16
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2208      	movs	r2, #8
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f887 	bl	80044ae <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f879 	bl	800449a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f88a 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0201 	mvn.w	r2, #1
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fc fd2e 	bl	8000e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	2b80      	cmp	r3, #128	; 0x80
 80043ec:	d10e      	bne.n	800440c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d107      	bne.n	800440c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8de 	bl	80045c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441a:	d10e      	bne.n	800443a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004426:	2b80      	cmp	r3, #128	; 0x80
 8004428:	d107      	bne.n	800443a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8d1 	bl	80045dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d10e      	bne.n	8004466 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b40      	cmp	r3, #64	; 0x40
 8004454:	d107      	bne.n	8004466 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800445e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f838 	bl	80044d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b20      	cmp	r3, #32
 8004472:	d10e      	bne.n	8004492 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b20      	cmp	r3, #32
 8004480:	d107      	bne.n	8004492 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f06f 0220 	mvn.w	r2, #32
 800448a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f891 	bl	80045b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <TIM_Base_SetConfig+0xbc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0x20>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450a:	d108      	bne.n	800451e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <TIM_Base_SetConfig+0xbc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00b      	beq.n	800453e <TIM_Base_SetConfig+0x52>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d007      	beq.n	800453e <TIM_Base_SetConfig+0x52>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <TIM_Base_SetConfig+0xc0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d003      	beq.n	800453e <TIM_Base_SetConfig+0x52>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <TIM_Base_SetConfig+0xc4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d108      	bne.n	8004550 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <TIM_Base_SetConfig+0xbc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d007      	beq.n	800458c <TIM_Base_SetConfig+0xa0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0b      	ldr	r2, [pc, #44]	; (80045ac <TIM_Base_SetConfig+0xc0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_Base_SetConfig+0xa0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <TIM_Base_SetConfig+0xc4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d103      	bne.n	8004594 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	615a      	str	r2, [r3, #20]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40014400 	.word	0x40014400

080045b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e040      	b.n	8004684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fd6e 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8c0 	bl	80047b4 <UART_SetConfig>
 8004634:	4603      	mov	r3, r0
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e022      	b.n	8004684 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fb0e 	bl	8004c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800465a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800466a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb95 	bl	8004dac <UART_CheckIdleState>
 8004682:	4603      	mov	r3, r0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	f040 8082 	bne.w	80047aa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_UART_Transmit+0x26>
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07a      	b.n	80047ac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_UART_Transmit+0x38>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e073      	b.n	80047ac <HAL_UART_Transmit+0x120>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2221      	movs	r2, #33	; 0x21
 80046d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046da:	f7fc fdc3 	bl	8001264 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f8:	d108      	bne.n	800470c <HAL_UART_Transmit+0x80>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e003      	b.n	8004714 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800471c:	e02d      	b.n	800477a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fb88 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e039      	b.n	80047ac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	881a      	ldrh	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474a:	b292      	uxth	r2, r2
 800474c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	3302      	adds	r3, #2
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e008      	b.n	8004768 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b292      	uxth	r2, r2
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1cb      	bne.n	800471e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	2140      	movs	r1, #64	; 0x40
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fb54 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e005      	b.n	80047ac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b8:	b08a      	sub	sp, #40	; 0x28
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	4313      	orrs	r3, r2
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b9e      	ldr	r3, [pc, #632]	; (8004a5c <UART_SetConfig+0x2a8>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a93      	ldr	r2, [pc, #588]	; (8004a60 <UART_SetConfig+0x2ac>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	4313      	orrs	r3, r2
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	430a      	orrs	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a8a      	ldr	r2, [pc, #552]	; (8004a64 <UART_SetConfig+0x2b0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d126      	bne.n	800488c <UART_SetConfig+0xd8>
 800483e:	4b8a      	ldr	r3, [pc, #552]	; (8004a68 <UART_SetConfig+0x2b4>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	2b03      	cmp	r3, #3
 800484a:	d81b      	bhi.n	8004884 <UART_SetConfig+0xd0>
 800484c:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0xa0>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004865 	.word	0x08004865
 8004858:	08004875 	.word	0x08004875
 800485c:	0800486d 	.word	0x0800486d
 8004860:	0800487d 	.word	0x0800487d
 8004864:	2301      	movs	r3, #1
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e0ab      	b.n	80049c4 <UART_SetConfig+0x210>
 800486c:	2302      	movs	r3, #2
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e0a7      	b.n	80049c4 <UART_SetConfig+0x210>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e0a3      	b.n	80049c4 <UART_SetConfig+0x210>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e09f      	b.n	80049c4 <UART_SetConfig+0x210>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e09b      	b.n	80049c4 <UART_SetConfig+0x210>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a76      	ldr	r2, [pc, #472]	; (8004a6c <UART_SetConfig+0x2b8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d138      	bne.n	8004908 <UART_SetConfig+0x154>
 8004896:	4b74      	ldr	r3, [pc, #464]	; (8004a68 <UART_SetConfig+0x2b4>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	d82d      	bhi.n	8004900 <UART_SetConfig+0x14c>
 80048a4:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <UART_SetConfig+0xf8>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	08004901 	.word	0x08004901
 80048b4:	08004901 	.word	0x08004901
 80048b8:	08004901 	.word	0x08004901
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	08004901 	.word	0x08004901
 80048c4:	08004901 	.word	0x08004901
 80048c8:	08004901 	.word	0x08004901
 80048cc:	080048e9 	.word	0x080048e9
 80048d0:	08004901 	.word	0x08004901
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004901 	.word	0x08004901
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	2300      	movs	r3, #0
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e6:	e06d      	b.n	80049c4 <UART_SetConfig+0x210>
 80048e8:	2302      	movs	r3, #2
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e069      	b.n	80049c4 <UART_SetConfig+0x210>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e065      	b.n	80049c4 <UART_SetConfig+0x210>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e061      	b.n	80049c4 <UART_SetConfig+0x210>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e05d      	b.n	80049c4 <UART_SetConfig+0x210>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a58      	ldr	r2, [pc, #352]	; (8004a70 <UART_SetConfig+0x2bc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d125      	bne.n	800495e <UART_SetConfig+0x1aa>
 8004912:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <UART_SetConfig+0x2b4>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	d016      	beq.n	800494e <UART_SetConfig+0x19a>
 8004920:	2b30      	cmp	r3, #48	; 0x30
 8004922:	d818      	bhi.n	8004956 <UART_SetConfig+0x1a2>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d00a      	beq.n	800493e <UART_SetConfig+0x18a>
 8004928:	2b20      	cmp	r3, #32
 800492a:	d814      	bhi.n	8004956 <UART_SetConfig+0x1a2>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <UART_SetConfig+0x182>
 8004930:	2b10      	cmp	r3, #16
 8004932:	d008      	beq.n	8004946 <UART_SetConfig+0x192>
 8004934:	e00f      	b.n	8004956 <UART_SetConfig+0x1a2>
 8004936:	2300      	movs	r3, #0
 8004938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493c:	e042      	b.n	80049c4 <UART_SetConfig+0x210>
 800493e:	2302      	movs	r3, #2
 8004940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004944:	e03e      	b.n	80049c4 <UART_SetConfig+0x210>
 8004946:	2304      	movs	r3, #4
 8004948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494c:	e03a      	b.n	80049c4 <UART_SetConfig+0x210>
 800494e:	2308      	movs	r3, #8
 8004950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004954:	e036      	b.n	80049c4 <UART_SetConfig+0x210>
 8004956:	2310      	movs	r3, #16
 8004958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495c:	e032      	b.n	80049c4 <UART_SetConfig+0x210>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3f      	ldr	r2, [pc, #252]	; (8004a60 <UART_SetConfig+0x2ac>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d12a      	bne.n	80049be <UART_SetConfig+0x20a>
 8004968:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <UART_SetConfig+0x2b4>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004976:	d01a      	beq.n	80049ae <UART_SetConfig+0x1fa>
 8004978:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800497c:	d81b      	bhi.n	80049b6 <UART_SetConfig+0x202>
 800497e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004982:	d00c      	beq.n	800499e <UART_SetConfig+0x1ea>
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004988:	d815      	bhi.n	80049b6 <UART_SetConfig+0x202>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <UART_SetConfig+0x1e2>
 800498e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004992:	d008      	beq.n	80049a6 <UART_SetConfig+0x1f2>
 8004994:	e00f      	b.n	80049b6 <UART_SetConfig+0x202>
 8004996:	2300      	movs	r3, #0
 8004998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499c:	e012      	b.n	80049c4 <UART_SetConfig+0x210>
 800499e:	2302      	movs	r3, #2
 80049a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a4:	e00e      	b.n	80049c4 <UART_SetConfig+0x210>
 80049a6:	2304      	movs	r3, #4
 80049a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ac:	e00a      	b.n	80049c4 <UART_SetConfig+0x210>
 80049ae:	2308      	movs	r3, #8
 80049b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b4:	e006      	b.n	80049c4 <UART_SetConfig+0x210>
 80049b6:	2310      	movs	r3, #16
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049bc:	e002      	b.n	80049c4 <UART_SetConfig+0x210>
 80049be:	2310      	movs	r3, #16
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <UART_SetConfig+0x2ac>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f040 808a 	bne.w	8004ae4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d824      	bhi.n	8004a22 <UART_SetConfig+0x26e>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <UART_SetConfig+0x22c>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a23 	.word	0x08004a23
 80049e8:	08004a0d 	.word	0x08004a0d
 80049ec:	08004a23 	.word	0x08004a23
 80049f0:	08004a13 	.word	0x08004a13
 80049f4:	08004a23 	.word	0x08004a23
 80049f8:	08004a23 	.word	0x08004a23
 80049fc:	08004a23 	.word	0x08004a23
 8004a00:	08004a1b 	.word	0x08004a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a04:	f7fe ff7a 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8004a08:	61f8      	str	r0, [r7, #28]
        break;
 8004a0a:	e010      	b.n	8004a2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a0c:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <UART_SetConfig+0x2c0>)
 8004a0e:	61fb      	str	r3, [r7, #28]
        break;
 8004a10:	e00d      	b.n	8004a2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a12:	f7fe fedb 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8004a16:	61f8      	str	r0, [r7, #28]
        break;
 8004a18:	e009      	b.n	8004a2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1e:	61fb      	str	r3, [r7, #28]
        break;
 8004a20:	e005      	b.n	8004a2e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8109 	beq.w	8004c48 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d305      	bcc.n	8004a52 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d912      	bls.n	8004a78 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a58:	e0f6      	b.n	8004c48 <UART_SetConfig+0x494>
 8004a5a:	bf00      	nop
 8004a5c:	efff69f3 	.word	0xefff69f3
 8004a60:	40008000 	.word	0x40008000
 8004a64:	40013800 	.word	0x40013800
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40004400 	.word	0x40004400
 8004a70:	40004800 	.word	0x40004800
 8004a74:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	461c      	mov	r4, r3
 8004a7e:	4615      	mov	r5, r2
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	022b      	lsls	r3, r5, #8
 8004a8a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a8e:	0222      	lsls	r2, r4, #8
 8004a90:	68f9      	ldr	r1, [r7, #12]
 8004a92:	6849      	ldr	r1, [r1, #4]
 8004a94:	0849      	lsrs	r1, r1, #1
 8004a96:	2000      	movs	r0, #0
 8004a98:	4688      	mov	r8, r1
 8004a9a:	4681      	mov	r9, r0
 8004a9c:	eb12 0a08 	adds.w	sl, r2, r8
 8004aa0:	eb43 0b09 	adc.w	fp, r3, r9
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab2:	4650      	mov	r0, sl
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	f7fb fbdb 	bl	8000270 <__aeabi_uldivmod>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4613      	mov	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac8:	d308      	bcc.n	8004adc <UART_SetConfig+0x328>
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad0:	d204      	bcs.n	8004adc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	60da      	str	r2, [r3, #12]
 8004ada:	e0b5      	b.n	8004c48 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ae2:	e0b1      	b.n	8004c48 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aec:	d15d      	bne.n	8004baa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d827      	bhi.n	8004b46 <UART_SetConfig+0x392>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x348>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b37 	.word	0x08004b37
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b47 	.word	0x08004b47
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fe feec 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8004b24:	61f8      	str	r0, [r7, #28]
        break;
 8004b26:	e014      	b.n	8004b52 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fe fefe 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	61f8      	str	r0, [r7, #28]
        break;
 8004b2e:	e010      	b.n	8004b52 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <UART_SetConfig+0x4b0>)
 8004b32:	61fb      	str	r3, [r7, #28]
        break;
 8004b34:	e00d      	b.n	8004b52 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fe fe49 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8004b3a:	61f8      	str	r0, [r7, #28]
        break;
 8004b3c:	e009      	b.n	8004b52 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	61fb      	str	r3, [r7, #28]
        break;
 8004b44:	e005      	b.n	8004b52 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d077      	beq.n	8004c48 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005a      	lsls	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	441a      	add	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b0f      	cmp	r3, #15
 8004b72:	d916      	bls.n	8004ba2 <UART_SetConfig+0x3ee>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7a:	d212      	bcs.n	8004ba2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f023 030f 	bic.w	r3, r3, #15
 8004b84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	8afb      	ldrh	r3, [r7, #22]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	8afa      	ldrh	r2, [r7, #22]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	e052      	b.n	8004c48 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ba8:	e04e      	b.n	8004c48 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d827      	bhi.n	8004c02 <UART_SetConfig+0x44e>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x404>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004bed 	.word	0x08004bed
 8004bc4:	08004c03 	.word	0x08004c03
 8004bc8:	08004bf3 	.word	0x08004bf3
 8004bcc:	08004c03 	.word	0x08004c03
 8004bd0:	08004c03 	.word	0x08004c03
 8004bd4:	08004c03 	.word	0x08004c03
 8004bd8:	08004bfb 	.word	0x08004bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fe fe8e 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8004be0:	61f8      	str	r0, [r7, #28]
        break;
 8004be2:	e014      	b.n	8004c0e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be4:	f7fe fea0 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8004be8:	61f8      	str	r0, [r7, #28]
        break;
 8004bea:	e010      	b.n	8004c0e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bec:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <UART_SetConfig+0x4b0>)
 8004bee:	61fb      	str	r3, [r7, #28]
        break;
 8004bf0:	e00d      	b.n	8004c0e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf2:	f7fe fdeb 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8004bf6:	61f8      	str	r0, [r7, #28]
        break;
 8004bf8:	e009      	b.n	8004c0e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfe:	61fb      	str	r3, [r7, #28]
        break;
 8004c00:	e005      	b.n	8004c0e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d019      	beq.n	8004c48 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	085a      	lsrs	r2, r3, #1
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	d909      	bls.n	8004c42 <UART_SetConfig+0x48e>
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d205      	bcs.n	8004c42 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
 8004c40:	e002      	b.n	8004c48 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c62:	bf00      	nop
 8004c64:	00f42400 	.word	0x00f42400

08004c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01a      	beq.n	8004d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d66:	d10a      	bne.n	8004d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dbc:	f7fc fa52 	bl	8001264 <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d10e      	bne.n	8004dee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f82d 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e023      	b.n	8004e36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d10e      	bne.n	8004e1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f817 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e00d      	b.n	8004e36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b09c      	sub	sp, #112	; 0x70
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4e:	e0a5      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	f000 80a1 	beq.w	8004f9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5a:	f7fc fa03 	bl	8001264 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d13e      	bne.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e84:	667b      	str	r3, [r7, #100]	; 0x64
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e6      	bne.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ec2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e5      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e067      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d04f      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0a:	d147      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f14:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
 8004f36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	613b      	str	r3, [r7, #16]
   return(result);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f68:	623a      	str	r2, [r7, #32]
 8004f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	69f9      	ldr	r1, [r7, #28]
 8004f6e:	6a3a      	ldr	r2, [r7, #32]
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e5      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e010      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	f43f af4a 	beq.w	8004e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3770      	adds	r7, #112	; 0x70
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <__NVIC_SetPriority>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db0a      	blt.n	8004ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	490c      	ldr	r1, [pc, #48]	; (8005014 <__NVIC_SetPriority+0x4c>)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	440b      	add	r3, r1
 8004fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ff0:	e00a      	b.n	8005008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <__NVIC_SetPriority+0x50>)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	3b04      	subs	r3, #4
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	440b      	add	r3, r1
 8005006:	761a      	strb	r2, [r3, #24]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000e100 	.word	0xe000e100
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <SysTick_Handler+0x1c>)
 8005022:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005024:	f001 fcfe 	bl	8006a24 <xTaskGetSchedulerState>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d001      	beq.n	8005032 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800502e:	f002 fae3 	bl	80075f8 <xPortSysTickHandler>
  }
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	e000e010 	.word	0xe000e010

0800503c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005040:	2100      	movs	r1, #0
 8005042:	f06f 0004 	mvn.w	r0, #4
 8005046:	f7ff ffbf 	bl	8004fc8 <__NVIC_SetPriority>
#endif
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005056:	f3ef 8305 	mrs	r3, IPSR
 800505a:	603b      	str	r3, [r7, #0]
  return(result);
 800505c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005062:	f06f 0305 	mvn.w	r3, #5
 8005066:	607b      	str	r3, [r7, #4]
 8005068:	e00c      	b.n	8005084 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <osKernelInitialize+0x44>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d105      	bne.n	800507e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <osKernelInitialize+0x44>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005078:	2300      	movs	r3, #0
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e002      	b.n	8005084 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800507e:	f04f 33ff 	mov.w	r3, #4294967295
 8005082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005084:	687b      	ldr	r3, [r7, #4]
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000240 	.word	0x20000240

08005098 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800509e:	f3ef 8305 	mrs	r3, IPSR
 80050a2:	603b      	str	r3, [r7, #0]
  return(result);
 80050a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80050aa:	f06f 0305 	mvn.w	r3, #5
 80050ae:	607b      	str	r3, [r7, #4]
 80050b0:	e010      	b.n	80050d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050b2:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <osKernelStart+0x48>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d109      	bne.n	80050ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80050ba:	f7ff ffbf 	bl	800503c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <osKernelStart+0x48>)
 80050c0:	2202      	movs	r2, #2
 80050c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050c4:	f001 f866 	bl	8006194 <vTaskStartScheduler>
      stat = osOK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	e002      	b.n	80050d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050d4:	687b      	ldr	r3, [r7, #4]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000240 	.word	0x20000240

080050e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08e      	sub	sp, #56	; 0x38
 80050e8:	af04      	add	r7, sp, #16
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f4:	f3ef 8305 	mrs	r3, IPSR
 80050f8:	617b      	str	r3, [r7, #20]
  return(result);
 80050fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d17e      	bne.n	80051fe <osThreadNew+0x11a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d07b      	beq.n	80051fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800510a:	2318      	movs	r3, #24
 800510c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005112:	f04f 33ff 	mov.w	r3, #4294967295
 8005116:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d045      	beq.n	80051aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <osThreadNew+0x48>
        name = attr->name;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <osThreadNew+0x6e>
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b38      	cmp	r3, #56	; 0x38
 8005144:	d805      	bhi.n	8005152 <osThreadNew+0x6e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <osThreadNew+0x72>
        return (NULL);
 8005152:	2300      	movs	r3, #0
 8005154:	e054      	b.n	8005200 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <osThreadNew+0xa8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b5b      	cmp	r3, #91	; 0x5b
 8005174:	d90a      	bls.n	800518c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800517a:	2b00      	cmp	r3, #0
 800517c:	d006      	beq.n	800518c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <osThreadNew+0xa8>
        mem = 1;
 8005186:	2301      	movs	r3, #1
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	e010      	b.n	80051ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10c      	bne.n	80051ae <osThreadNew+0xca>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d108      	bne.n	80051ae <osThreadNew+0xca>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <osThreadNew+0xca>
          mem = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	e001      	b.n	80051ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d110      	bne.n	80051d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051bc:	9202      	str	r2, [sp, #8]
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6a3a      	ldr	r2, [r7, #32]
 80051c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 fe0c 	bl	8005de8 <xTaskCreateStatic>
 80051d0:	4603      	mov	r3, r0
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	e013      	b.n	80051fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d110      	bne.n	80051fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	b29a      	uxth	r2, r3
 80051e0:	f107 0310 	add.w	r3, r7, #16
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fe57 	bl	8005ea2 <xTaskCreate>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d001      	beq.n	80051fe <osThreadNew+0x11a>
            hTask = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051fe:	693b      	ldr	r3, [r7, #16]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	; 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005210:	f3ef 8305 	mrs	r3, IPSR
 8005214:	60bb      	str	r3, [r7, #8]
  return(result);
 8005216:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <osDelay+0x1c>
    stat = osErrorISR;
 800521c:	f06f 0305 	mvn.w	r3, #5
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e007      	b.n	8005234 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <osDelay+0x2c>
      vTaskDelay(ticks);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 ff7c 	bl	800612c <vTaskDelay>
    }
  }

  return (stat);
 8005234:	68fb      	ldr	r3, [r7, #12]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4a07      	ldr	r2, [pc, #28]	; (800526c <vApplicationGetIdleTaskMemory+0x2c>)
 8005250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4a06      	ldr	r2, [pc, #24]	; (8005270 <vApplicationGetIdleTaskMemory+0x30>)
 8005256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2280      	movs	r2, #128	; 0x80
 800525c:	601a      	str	r2, [r3, #0]
}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000244 	.word	0x20000244
 8005270:	200002a0 	.word	0x200002a0

08005274 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005284:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4a06      	ldr	r2, [pc, #24]	; (80052a4 <vApplicationGetTimerTaskMemory+0x30>)
 800528a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	200004a0 	.word	0x200004a0
 80052a4:	200004fc 	.word	0x200004fc

080052a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f103 0208 	add.w	r2, r3, #8
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295
 80052c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f103 0208 	add.w	r2, r3, #8
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f103 0208 	add.w	r2, r3, #8
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	601a      	str	r2, [r3, #0]
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d103      	bne.n	800536a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e00c      	b.n	8005384 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3308      	adds	r3, #8
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e002      	b.n	8005378 <vListInsert+0x2e>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	429a      	cmp	r2, r3
 8005382:	d2f6      	bcs.n	8005372 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	601a      	str	r2, [r3, #0]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6892      	ldr	r2, [r2, #8]
 80053d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6852      	ldr	r2, [r2, #4]
 80053dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d103      	bne.n	80053f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1e5a      	subs	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800543a:	f002 f84b 	bl	80074d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	68f9      	ldr	r1, [r7, #12]
 8005448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	441a      	add	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	3b01      	subs	r3, #1
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005470:	fb01 f303 	mul.w	r3, r1, r3
 8005474:	441a      	add	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d114      	bne.n	80054ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01a      	beq.n	80054ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3310      	adds	r3, #16
 800549c:	4618      	mov	r0, r3
 800549e:	f001 f903 	bl	80066a8 <xTaskRemoveFromEventList>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d012      	beq.n	80054ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054a8:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <xQueueGenericReset+0xcc>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	e009      	b.n	80054ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3310      	adds	r3, #16
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fef2 	bl	80052a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff feed 	bl	80052a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054ce:	f002 f831 	bl	8007534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054d2:	2301      	movs	r3, #1
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08e      	sub	sp, #56	; 0x38
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <xQueueGenericCreateStatic+0x52>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <xQueueGenericCreateStatic+0x56>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <xQueueGenericCreateStatic+0x58>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	623b      	str	r3, [r7, #32]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <xQueueGenericCreateStatic+0x7e>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <xQueueGenericCreateStatic+0x82>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <xQueueGenericCreateStatic+0x84>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	61fb      	str	r3, [r7, #28]
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800557e:	2350      	movs	r3, #80	; 0x50
 8005580:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b50      	cmp	r3, #80	; 0x50
 8005586:	d00a      	beq.n	800559e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	61bb      	str	r3, [r7, #24]
}
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800559e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00d      	beq.n	80055c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f805 	bl	80055d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3730      	adds	r7, #48	; 0x30
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055fe:	2101      	movs	r1, #1
 8005600:	69b8      	ldr	r0, [r7, #24]
 8005602:	f7ff ff05 	bl	8005410 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	; 0x38
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005626:	2300      	movs	r3, #0
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueGenericSend+0x32>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <xQueueGenericSend+0x40>
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <xQueueGenericSend+0x44>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <xQueueGenericSend+0x46>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <xQueueGenericSend+0x60>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d103      	bne.n	8005686 <xQueueGenericSend+0x6e>
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <xQueueGenericSend+0x72>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericSend+0x74>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a6:	f001 f9bd 	bl	8006a24 <xTaskGetSchedulerState>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <xQueueGenericSend+0x9e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <xQueueGenericSend+0xa2>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <xQueueGenericSend+0xa4>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	61fb      	str	r3, [r7, #28]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056d6:	f001 fefd 	bl	80074d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d302      	bcc.n	80056ec <xQueueGenericSend+0xd4>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d129      	bne.n	8005740 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f2:	f000 fa0b 	bl	8005b0c <prvCopyDataToQueue>
 80056f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d010      	beq.n	8005722 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	3324      	adds	r3, #36	; 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f000 ffcf 	bl	80066a8 <xTaskRemoveFromEventList>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d013      	beq.n	8005738 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005710:	4b3f      	ldr	r3, [pc, #252]	; (8005810 <xQueueGenericSend+0x1f8>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	e00a      	b.n	8005738 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005728:	4b39      	ldr	r3, [pc, #228]	; (8005810 <xQueueGenericSend+0x1f8>)
 800572a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005738:	f001 fefc 	bl	8007534 <vPortExitCritical>
				return pdPASS;
 800573c:	2301      	movs	r3, #1
 800573e:	e063      	b.n	8005808 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005746:	f001 fef5 	bl	8007534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800574a:	2300      	movs	r3, #0
 800574c:	e05c      	b.n	8005808 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	2b00      	cmp	r3, #0
 8005752:	d106      	bne.n	8005762 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005754:	f107 0314 	add.w	r3, r7, #20
 8005758:	4618      	mov	r0, r3
 800575a:	f001 f809 	bl	8006770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800575e:	2301      	movs	r3, #1
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005762:	f001 fee7 	bl	8007534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005766:	f000 fd7b 	bl	8006260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800576a:	f001 feb3 	bl	80074d4 <vPortEnterCritical>
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005774:	b25b      	sxtb	r3, r3
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d103      	bne.n	8005784 <xQueueGenericSend+0x16c>
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800578a:	b25b      	sxtb	r3, r3
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d103      	bne.n	800579a <xQueueGenericSend+0x182>
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800579a:	f001 fecb 	bl	8007534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800579e:	1d3a      	adds	r2, r7, #4
 80057a0:	f107 0314 	add.w	r3, r7, #20
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fff8 	bl	800679c <xTaskCheckForTimeOut>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d124      	bne.n	80057fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b4:	f000 faa2 	bl	8005cfc <prvIsQueueFull>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	3310      	adds	r3, #16
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 ff1e 	bl	8006608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ce:	f000 fa2d 	bl	8005c2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057d2:	f000 fd53 	bl	800627c <xTaskResumeAll>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f47f af7c 	bne.w	80056d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <xQueueGenericSend+0x1f8>)
 80057e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	e772      	b.n	80056d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f2:	f000 fa1b 	bl	8005c2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057f6:	f000 fd41 	bl	800627c <xTaskResumeAll>
 80057fa:	e76c      	b.n	80056d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057fe:	f000 fa15 	bl	8005c2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005802:	f000 fd3b 	bl	800627c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005806:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005808:	4618      	mov	r0, r3
 800580a:	3738      	adds	r7, #56	; 0x38
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b090      	sub	sp, #64	; 0x40
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800583e:	bf00      	nop
 8005840:	e7fe      	b.n	8005840 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d103      	bne.n	8005850 <xQueueGenericSendFromISR+0x3c>
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <xQueueGenericSendFromISR+0x40>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <xQueueGenericSendFromISR+0x42>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d103      	bne.n	800587e <xQueueGenericSendFromISR+0x6a>
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <xQueueGenericSendFromISR+0x6e>
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <xQueueGenericSendFromISR+0x70>
 8005882:	2300      	movs	r3, #0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	623b      	str	r3, [r7, #32]
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800589e:	f001 fefb 	bl	8007698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058a2:	f3ef 8211 	mrs	r2, BASEPRI
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	61fa      	str	r2, [r7, #28]
 80058b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d302      	bcc.n	80058d0 <xQueueGenericSendFromISR+0xbc>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d12f      	bne.n	8005930 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058e6:	f000 f911 	bl	8005b0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d112      	bne.n	800591a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d016      	beq.n	800592a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	3324      	adds	r3, #36	; 0x24
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fed1 	bl	80066a8 <xTaskRemoveFromEventList>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00e      	beq.n	800592a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e007      	b.n	800592a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800591a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800591e:	3301      	adds	r3, #1
 8005920:	b2db      	uxtb	r3, r3
 8005922:	b25a      	sxtb	r2, r3
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800592a:	2301      	movs	r3, #1
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800592e:	e001      	b.n	8005934 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005930:	2300      	movs	r3, #0
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800593e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005942:	4618      	mov	r0, r3
 8005944:	3740      	adds	r7, #64	; 0x40
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	; 0x30
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005958:	2300      	movs	r3, #0
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <xQueueReceive+0x30>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	623b      	str	r3, [r7, #32]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <xQueueReceive+0x3e>
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <xQueueReceive+0x42>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <xQueueReceive+0x44>
 800598e:	2300      	movs	r3, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <xQueueReceive+0x5e>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	61fb      	str	r3, [r7, #28]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059aa:	f001 f83b 	bl	8006a24 <xTaskGetSchedulerState>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <xQueueReceive+0x6e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <xQueueReceive+0x72>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <xQueueReceive+0x74>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <xQueueReceive+0x8e>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	61bb      	str	r3, [r7, #24]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059da:	f001 fd7b 	bl	80074d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01f      	beq.n	8005a2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ee:	f000 f8f7 	bl	8005be0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	1e5a      	subs	r2, r3, #1
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00f      	beq.n	8005a22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	3310      	adds	r3, #16
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fe4e 	bl	80066a8 <xTaskRemoveFromEventList>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a12:	4b3d      	ldr	r3, [pc, #244]	; (8005b08 <xQueueReceive+0x1bc>)
 8005a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a22:	f001 fd87 	bl	8007534 <vPortExitCritical>
				return pdPASS;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e069      	b.n	8005afe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a30:	f001 fd80 	bl	8007534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e062      	b.n	8005afe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a3e:	f107 0310 	add.w	r3, r7, #16
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fe94 	bl	8006770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a4c:	f001 fd72 	bl	8007534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a50:	f000 fc06 	bl	8006260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a54:	f001 fd3e 	bl	80074d4 <vPortEnterCritical>
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d103      	bne.n	8005a6e <xQueueReceive+0x122>
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d103      	bne.n	8005a84 <xQueueReceive+0x138>
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a84:	f001 fd56 	bl	8007534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a88:	1d3a      	adds	r2, r7, #4
 8005a8a:	f107 0310 	add.w	r3, r7, #16
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fe83 	bl	800679c <xTaskCheckForTimeOut>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d123      	bne.n	8005ae4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9e:	f000 f917 	bl	8005cd0 <prvIsQueueEmpty>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d017      	beq.n	8005ad8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	3324      	adds	r3, #36	; 0x24
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fda9 	bl	8006608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab8:	f000 f8b8 	bl	8005c2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005abc:	f000 fbde 	bl	800627c <xTaskResumeAll>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d189      	bne.n	80059da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <xQueueReceive+0x1bc>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	e780      	b.n	80059da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ada:	f000 f8a7 	bl	8005c2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ade:	f000 fbcd 	bl	800627c <xTaskResumeAll>
 8005ae2:	e77a      	b.n	80059da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae6:	f000 f8a1 	bl	8005c2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aea:	f000 fbc7 	bl	800627c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af0:	f000 f8ee 	bl	8005cd0 <prvIsQueueEmpty>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f43f af6f 	beq.w	80059da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005afc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3730      	adds	r7, #48	; 0x30
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10d      	bne.n	8005b46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d14d      	bne.n	8005bce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 ff92 	bl	8006a60 <xTaskPriorityDisinherit>
 8005b3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	609a      	str	r2, [r3, #8]
 8005b44:	e043      	b.n	8005bce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d119      	bne.n	8005b80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6858      	ldr	r0, [r3, #4]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	461a      	mov	r2, r3
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	f001 fff2 	bl	8007b40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d32b      	bcc.n	8005bce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	e026      	b.n	8005bce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68d8      	ldr	r0, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	f001 ffd8 	bl	8007b40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	425b      	negs	r3, r3
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d207      	bcs.n	8005bbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	425b      	negs	r3, r3
 8005bb6:	441a      	add	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d105      	bne.n	8005bce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005bd6:	697b      	ldr	r3, [r7, #20]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d018      	beq.n	8005c24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	441a      	add	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d303      	bcc.n	8005c14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68d9      	ldr	r1, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6838      	ldr	r0, [r7, #0]
 8005c20:	f001 ff8e 	bl	8007b40 <memcpy>
	}
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c34:	f001 fc4e 	bl	80074d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c40:	e011      	b.n	8005c66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d012      	beq.n	8005c70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3324      	adds	r3, #36	; 0x24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fd2a 	bl	80066a8 <xTaskRemoveFromEventList>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c5a:	f000 fe01 	bl	8006860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dce9      	bgt.n	8005c42 <prvUnlockQueue+0x16>
 8005c6e:	e000      	b.n	8005c72 <prvUnlockQueue+0x46>
					break;
 8005c70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	22ff      	movs	r2, #255	; 0xff
 8005c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c7a:	f001 fc5b 	bl	8007534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c7e:	f001 fc29 	bl	80074d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c8a:	e011      	b.n	8005cb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3310      	adds	r3, #16
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fd05 	bl	80066a8 <xTaskRemoveFromEventList>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ca4:	f000 fddc 	bl	8006860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dce9      	bgt.n	8005c8c <prvUnlockQueue+0x60>
 8005cb8:	e000      	b.n	8005cbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	22ff      	movs	r2, #255	; 0xff
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005cc4:	f001 fc36 	bl	8007534 <vPortExitCritical>
}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cd8:	f001 fbfc 	bl	80074d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	e001      	b.n	8005cee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cee:	f001 fc21 	bl	8007534 <vPortExitCritical>

	return xReturn;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d04:	f001 fbe6 	bl	80074d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d102      	bne.n	8005d1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e001      	b.n	8005d1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d1e:	f001 fc09 	bl	8007534 <vPortExitCritical>

	return xReturn;
 8005d22:	68fb      	ldr	r3, [r7, #12]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e014      	b.n	8005d66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d3c:	4a0f      	ldr	r2, [pc, #60]	; (8005d7c <vQueueAddToRegistry+0x50>)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d48:	490c      	ldr	r1, [pc, #48]	; (8005d7c <vQueueAddToRegistry+0x50>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d52:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <vQueueAddToRegistry+0x50>)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	4413      	add	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d5e:	e006      	b.n	8005d6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b07      	cmp	r3, #7
 8005d6a:	d9e7      	bls.n	8005d3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	200008fc 	.word	0x200008fc

08005d80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d90:	f001 fba0 	bl	80074d4 <vPortEnterCritical>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d9a:	b25b      	sxtb	r3, r3
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d103      	bne.n	8005daa <vQueueWaitForMessageRestricted+0x2a>
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db0:	b25b      	sxtb	r3, r3
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db6:	d103      	bne.n	8005dc0 <vQueueWaitForMessageRestricted+0x40>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc0:	f001 fbb8 	bl	8007534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3324      	adds	r3, #36	; 0x24
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fc3b 	bl	8006650 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dda:	6978      	ldr	r0, [r7, #20]
 8005ddc:	f7ff ff26 	bl	8005c2c <prvUnlockQueue>
	}
 8005de0:	bf00      	nop
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	; 0x38
 8005dec:	af04      	add	r7, sp, #16
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	623b      	str	r3, [r7, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <xTaskCreateStatic+0x46>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	61fb      	str	r3, [r7, #28]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e2e:	235c      	movs	r3, #92	; 0x5c
 8005e30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b5c      	cmp	r3, #92	; 0x5c
 8005e36:	d00a      	beq.n	8005e4e <xTaskCreateStatic+0x66>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	61bb      	str	r3, [r7, #24]
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01e      	beq.n	8005e94 <xTaskCreateStatic+0xac>
 8005e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01b      	beq.n	8005e94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9303      	str	r3, [sp, #12]
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	9302      	str	r3, [sp, #8]
 8005e76:	f107 0314 	add.w	r3, r7, #20
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f850 	bl	8005f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e8e:	f000 f8dd 	bl	800604c <prvAddNewTaskToReadyList>
 8005e92:	e001      	b.n	8005e98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e98:	697b      	ldr	r3, [r7, #20]
	}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3728      	adds	r7, #40	; 0x28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b08c      	sub	sp, #48	; 0x30
 8005ea6:	af04      	add	r7, sp, #16
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 fc2e 	bl	8007718 <pvPortMalloc>
 8005ebc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00e      	beq.n	8005ee2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ec4:	205c      	movs	r0, #92	; 0x5c
 8005ec6:	f001 fc27 	bl	8007718 <pvPortMalloc>
 8005eca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ed8:	e005      	b.n	8005ee6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005eda:	6978      	ldr	r0, [r7, #20]
 8005edc:	f001 fce8 	bl	80078b0 <vPortFree>
 8005ee0:	e001      	b.n	8005ee6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d017      	beq.n	8005f1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9303      	str	r3, [sp, #12]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	9302      	str	r3, [sp, #8]
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f80e 	bl	8005f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f10:	69f8      	ldr	r0, [r7, #28]
 8005f12:	f000 f89b 	bl	800604c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f16:	2301      	movs	r3, #1
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e002      	b.n	8005f22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f22:	69bb      	ldr	r3, [r7, #24]
	}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3720      	adds	r7, #32
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	461a      	mov	r2, r3
 8005f44:	21a5      	movs	r1, #165	; 0xa5
 8005f46:	f001 fe09 	bl	8007b5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f54:	3b01      	subs	r3, #1
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f023 0307 	bic.w	r3, r3, #7
 8005f62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	617b      	str	r3, [r7, #20]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01f      	beq.n	8005fca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	e012      	b.n	8005fb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	7819      	ldrb	r1, [r3, #0]
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3334      	adds	r3, #52	; 0x34
 8005fa0:	460a      	mov	r2, r1
 8005fa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4413      	add	r3, r2
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d006      	beq.n	8005fbe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	61fb      	str	r3, [r7, #28]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	2b0f      	cmp	r3, #15
 8005fba:	d9e9      	bls.n	8005f90 <prvInitialiseNewTask+0x64>
 8005fbc:	e000      	b.n	8005fc0 <prvInitialiseNewTask+0x94>
			{
				break;
 8005fbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc8:	e003      	b.n	8005fd2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	2b37      	cmp	r3, #55	; 0x37
 8005fd6:	d901      	bls.n	8005fdc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fd8:	2337      	movs	r3, #55	; 0x37
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	2200      	movs	r2, #0
 8005fec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f978 	bl	80052e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	3318      	adds	r3, #24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff f973 	bl	80052e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	2200      	movs	r2, #0
 800601c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	68f9      	ldr	r1, [r7, #12]
 800602a:	69b8      	ldr	r0, [r7, #24]
 800602c:	f001 f928 	bl	8007280 <pxPortInitialiseStack>
 8006030:	4602      	mov	r2, r0
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006042:	bf00      	nop
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006054:	f001 fa3e 	bl	80074d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006058:	4b2d      	ldr	r3, [pc, #180]	; (8006110 <prvAddNewTaskToReadyList+0xc4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <prvAddNewTaskToReadyList+0xc4>)
 8006060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006062:	4b2c      	ldr	r3, [pc, #176]	; (8006114 <prvAddNewTaskToReadyList+0xc8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800606a:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <prvAddNewTaskToReadyList+0xc8>)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006070:	4b27      	ldr	r3, [pc, #156]	; (8006110 <prvAddNewTaskToReadyList+0xc4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d110      	bne.n	800609a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006078:	f000 fc16 	bl	80068a8 <prvInitialiseTaskLists>
 800607c:	e00d      	b.n	800609a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800607e:	4b26      	ldr	r3, [pc, #152]	; (8006118 <prvAddNewTaskToReadyList+0xcc>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006086:	4b23      	ldr	r3, [pc, #140]	; (8006114 <prvAddNewTaskToReadyList+0xc8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	429a      	cmp	r2, r3
 8006092:	d802      	bhi.n	800609a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006094:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <prvAddNewTaskToReadyList+0xc8>)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <prvAddNewTaskToReadyList+0xd0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3301      	adds	r3, #1
 80060a0:	4a1e      	ldr	r2, [pc, #120]	; (800611c <prvAddNewTaskToReadyList+0xd0>)
 80060a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060a4:	4b1d      	ldr	r3, [pc, #116]	; (800611c <prvAddNewTaskToReadyList+0xd0>)
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <prvAddNewTaskToReadyList+0xd4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d903      	bls.n	80060c0 <prvAddNewTaskToReadyList+0x74>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	4a18      	ldr	r2, [pc, #96]	; (8006120 <prvAddNewTaskToReadyList+0xd4>)
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <prvAddNewTaskToReadyList+0xd8>)
 80060ce:	441a      	add	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7ff f913 	bl	8005302 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060dc:	f001 fa2a 	bl	8007534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060e0:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <prvAddNewTaskToReadyList+0xcc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00e      	beq.n	8006106 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <prvAddNewTaskToReadyList+0xc8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d207      	bcs.n	8006106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <prvAddNewTaskToReadyList+0xdc>)
 80060f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000e10 	.word	0x20000e10
 8006114:	2000093c 	.word	0x2000093c
 8006118:	20000e1c 	.word	0x20000e1c
 800611c:	20000e2c 	.word	0x20000e2c
 8006120:	20000e18 	.word	0x20000e18
 8006124:	20000940 	.word	0x20000940
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d017      	beq.n	800616e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800613e:	4b13      	ldr	r3, [pc, #76]	; (800618c <vTaskDelay+0x60>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <vTaskDelay+0x30>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60bb      	str	r3, [r7, #8]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800615c:	f000 f880 	bl	8006260 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006160:	2100      	movs	r1, #0
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fcea 	bl	8006b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006168:	f000 f888 	bl	800627c <xTaskResumeAll>
 800616c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d107      	bne.n	8006184 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <vTaskDelay+0x64>)
 8006176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000e38 	.word	0x20000e38
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061a2:	463a      	mov	r2, r7
 80061a4:	1d39      	adds	r1, r7, #4
 80061a6:	f107 0308 	add.w	r3, r7, #8
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff f848 	bl	8005240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	9202      	str	r2, [sp, #8]
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	2300      	movs	r3, #0
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	2300      	movs	r3, #0
 80061c0:	460a      	mov	r2, r1
 80061c2:	4921      	ldr	r1, [pc, #132]	; (8006248 <vTaskStartScheduler+0xb4>)
 80061c4:	4821      	ldr	r0, [pc, #132]	; (800624c <vTaskStartScheduler+0xb8>)
 80061c6:	f7ff fe0f 	bl	8005de8 <xTaskCreateStatic>
 80061ca:	4603      	mov	r3, r0
 80061cc:	4a20      	ldr	r2, [pc, #128]	; (8006250 <vTaskStartScheduler+0xbc>)
 80061ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061d0:	4b1f      	ldr	r3, [pc, #124]	; (8006250 <vTaskStartScheduler+0xbc>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	e001      	b.n	80061e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d102      	bne.n	80061ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061e8:	f000 fcfc 	bl	8006be4 <xTimerCreateTimerTask>
 80061ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d116      	bne.n	8006222 <vTaskStartScheduler+0x8e>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	613b      	str	r3, [r7, #16]
}
 8006206:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006208:	4b12      	ldr	r3, [pc, #72]	; (8006254 <vTaskStartScheduler+0xc0>)
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <vTaskStartScheduler+0xc4>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006216:	4b11      	ldr	r3, [pc, #68]	; (800625c <vTaskStartScheduler+0xc8>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800621c:	f001 f8b8 	bl	8007390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006220:	e00e      	b.n	8006240 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d10a      	bne.n	8006240 <vTaskStartScheduler+0xac>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60fb      	str	r3, [r7, #12]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <vTaskStartScheduler+0xaa>
}
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	0800846c 	.word	0x0800846c
 800624c:	08006879 	.word	0x08006879
 8006250:	20000e34 	.word	0x20000e34
 8006254:	20000e30 	.word	0x20000e30
 8006258:	20000e1c 	.word	0x20000e1c
 800625c:	20000e14 	.word	0x20000e14

08006260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <vTaskSuspendAll+0x18>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	4a03      	ldr	r2, [pc, #12]	; (8006278 <vTaskSuspendAll+0x18>)
 800626c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800626e:	bf00      	nop
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	20000e38 	.word	0x20000e38

0800627c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800628a:	4b42      	ldr	r3, [pc, #264]	; (8006394 <xTaskResumeAll+0x118>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	603b      	str	r3, [r7, #0]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062a8:	f001 f914 	bl	80074d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062ac:	4b39      	ldr	r3, [pc, #228]	; (8006394 <xTaskResumeAll+0x118>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	4a38      	ldr	r2, [pc, #224]	; (8006394 <xTaskResumeAll+0x118>)
 80062b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b6:	4b37      	ldr	r3, [pc, #220]	; (8006394 <xTaskResumeAll+0x118>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d162      	bne.n	8006384 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062be:	4b36      	ldr	r3, [pc, #216]	; (8006398 <xTaskResumeAll+0x11c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d05e      	beq.n	8006384 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062c6:	e02f      	b.n	8006328 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c8:	4b34      	ldr	r3, [pc, #208]	; (800639c <xTaskResumeAll+0x120>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3318      	adds	r3, #24
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff f871 	bl	80053bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3304      	adds	r3, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff f86c 	bl	80053bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e8:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <xTaskResumeAll+0x124>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d903      	bls.n	80062f8 <xTaskResumeAll+0x7c>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4a2a      	ldr	r2, [pc, #168]	; (80063a0 <xTaskResumeAll+0x124>)
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <xTaskResumeAll+0x128>)
 8006306:	441a      	add	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3304      	adds	r3, #4
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f7fe fff7 	bl	8005302 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006318:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <xTaskResumeAll+0x12c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	429a      	cmp	r2, r3
 8006320:	d302      	bcc.n	8006328 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <xTaskResumeAll+0x130>)
 8006324:	2201      	movs	r2, #1
 8006326:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006328:	4b1c      	ldr	r3, [pc, #112]	; (800639c <xTaskResumeAll+0x120>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1cb      	bne.n	80062c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006336:	f000 fb55 	bl	80069e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800633a:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <xTaskResumeAll+0x134>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d010      	beq.n	8006368 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006346:	f000 f847 	bl	80063d8 <xTaskIncrementTick>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006350:	4b16      	ldr	r3, [pc, #88]	; (80063ac <xTaskResumeAll+0x130>)
 8006352:	2201      	movs	r2, #1
 8006354:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3b01      	subs	r3, #1
 800635a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f1      	bne.n	8006346 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <xTaskResumeAll+0x134>)
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006368:	4b10      	ldr	r3, [pc, #64]	; (80063ac <xTaskResumeAll+0x130>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006370:	2301      	movs	r3, #1
 8006372:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006374:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <xTaskResumeAll+0x138>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006384:	f001 f8d6 	bl	8007534 <vPortExitCritical>

	return xAlreadyYielded;
 8006388:	68bb      	ldr	r3, [r7, #8]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000e38 	.word	0x20000e38
 8006398:	20000e10 	.word	0x20000e10
 800639c:	20000dd0 	.word	0x20000dd0
 80063a0:	20000e18 	.word	0x20000e18
 80063a4:	20000940 	.word	0x20000940
 80063a8:	2000093c 	.word	0x2000093c
 80063ac:	20000e24 	.word	0x20000e24
 80063b0:	20000e20 	.word	0x20000e20
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <xTaskGetTickCount+0x1c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063c4:	687b      	ldr	r3, [r7, #4]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000e14 	.word	0x20000e14

080063d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e2:	4b4f      	ldr	r3, [pc, #316]	; (8006520 <xTaskIncrementTick+0x148>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f040 808f 	bne.w	800650a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063ec:	4b4d      	ldr	r3, [pc, #308]	; (8006524 <xTaskIncrementTick+0x14c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063f4:	4a4b      	ldr	r2, [pc, #300]	; (8006524 <xTaskIncrementTick+0x14c>)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d120      	bne.n	8006442 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006400:	4b49      	ldr	r3, [pc, #292]	; (8006528 <xTaskIncrementTick+0x150>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <xTaskIncrementTick+0x48>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	603b      	str	r3, [r7, #0]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <xTaskIncrementTick+0x46>
 8006420:	4b41      	ldr	r3, [pc, #260]	; (8006528 <xTaskIncrementTick+0x150>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	4b41      	ldr	r3, [pc, #260]	; (800652c <xTaskIncrementTick+0x154>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a3f      	ldr	r2, [pc, #252]	; (8006528 <xTaskIncrementTick+0x150>)
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	4a3f      	ldr	r2, [pc, #252]	; (800652c <xTaskIncrementTick+0x154>)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	4b3e      	ldr	r3, [pc, #248]	; (8006530 <xTaskIncrementTick+0x158>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	4a3d      	ldr	r2, [pc, #244]	; (8006530 <xTaskIncrementTick+0x158>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	f000 fad1 	bl	80069e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006442:	4b3c      	ldr	r3, [pc, #240]	; (8006534 <xTaskIncrementTick+0x15c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	429a      	cmp	r2, r3
 800644a:	d349      	bcc.n	80064e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800644c:	4b36      	ldr	r3, [pc, #216]	; (8006528 <xTaskIncrementTick+0x150>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d104      	bne.n	8006460 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006456:	4b37      	ldr	r3, [pc, #220]	; (8006534 <xTaskIncrementTick+0x15c>)
 8006458:	f04f 32ff 	mov.w	r2, #4294967295
 800645c:	601a      	str	r2, [r3, #0]
					break;
 800645e:	e03f      	b.n	80064e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006460:	4b31      	ldr	r3, [pc, #196]	; (8006528 <xTaskIncrementTick+0x150>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d203      	bcs.n	8006480 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006478:	4a2e      	ldr	r2, [pc, #184]	; (8006534 <xTaskIncrementTick+0x15c>)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800647e:	e02f      	b.n	80064e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	3304      	adds	r3, #4
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe ff99 	bl	80053bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	3318      	adds	r3, #24
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe ff90 	bl	80053bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a0:	4b25      	ldr	r3, [pc, #148]	; (8006538 <xTaskIncrementTick+0x160>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d903      	bls.n	80064b0 <xTaskIncrementTick+0xd8>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	4a22      	ldr	r2, [pc, #136]	; (8006538 <xTaskIncrementTick+0x160>)
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4a1f      	ldr	r2, [pc, #124]	; (800653c <xTaskIncrementTick+0x164>)
 80064be:	441a      	add	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f7fe ff1b 	bl	8005302 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <xTaskIncrementTick+0x168>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d3b8      	bcc.n	800644c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064da:	2301      	movs	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064de:	e7b5      	b.n	800644c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064e0:	4b17      	ldr	r3, [pc, #92]	; (8006540 <xTaskIncrementTick+0x168>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	4915      	ldr	r1, [pc, #84]	; (800653c <xTaskIncrementTick+0x164>)
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d901      	bls.n	80064fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064fc:	4b11      	ldr	r3, [pc, #68]	; (8006544 <xTaskIncrementTick+0x16c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e004      	b.n	8006514 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800650a:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <xTaskIncrementTick+0x170>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3301      	adds	r3, #1
 8006510:	4a0d      	ldr	r2, [pc, #52]	; (8006548 <xTaskIncrementTick+0x170>)
 8006512:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006514:	697b      	ldr	r3, [r7, #20]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000e38 	.word	0x20000e38
 8006524:	20000e14 	.word	0x20000e14
 8006528:	20000dc8 	.word	0x20000dc8
 800652c:	20000dcc 	.word	0x20000dcc
 8006530:	20000e28 	.word	0x20000e28
 8006534:	20000e30 	.word	0x20000e30
 8006538:	20000e18 	.word	0x20000e18
 800653c:	20000940 	.word	0x20000940
 8006540:	2000093c 	.word	0x2000093c
 8006544:	20000e24 	.word	0x20000e24
 8006548:	20000e20 	.word	0x20000e20

0800654c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006552:	4b28      	ldr	r3, [pc, #160]	; (80065f4 <vTaskSwitchContext+0xa8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800655a:	4b27      	ldr	r3, [pc, #156]	; (80065f8 <vTaskSwitchContext+0xac>)
 800655c:	2201      	movs	r2, #1
 800655e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006560:	e041      	b.n	80065e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006562:	4b25      	ldr	r3, [pc, #148]	; (80065f8 <vTaskSwitchContext+0xac>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <vTaskSwitchContext+0xb0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	e010      	b.n	8006592 <vTaskSwitchContext+0x46>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <vTaskSwitchContext+0x40>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	607b      	str	r3, [r7, #4]
}
 8006588:	bf00      	nop
 800658a:	e7fe      	b.n	800658a <vTaskSwitchContext+0x3e>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3b01      	subs	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	491b      	ldr	r1, [pc, #108]	; (8006600 <vTaskSwitchContext+0xb4>)
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0e4      	beq.n	8006570 <vTaskSwitchContext+0x24>
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4a13      	ldr	r2, [pc, #76]	; (8006600 <vTaskSwitchContext+0xb4>)
 80065b2:	4413      	add	r3, r2
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	605a      	str	r2, [r3, #4]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	3308      	adds	r3, #8
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d104      	bne.n	80065d6 <vTaskSwitchContext+0x8a>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a09      	ldr	r2, [pc, #36]	; (8006604 <vTaskSwitchContext+0xb8>)
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4a06      	ldr	r2, [pc, #24]	; (80065fc <vTaskSwitchContext+0xb0>)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6013      	str	r3, [r2, #0]
}
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	20000e38 	.word	0x20000e38
 80065f8:	20000e24 	.word	0x20000e24
 80065fc:	20000e18 	.word	0x20000e18
 8006600:	20000940 	.word	0x20000940
 8006604:	2000093c 	.word	0x2000093c

08006608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	60fb      	str	r3, [r7, #12]
}
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800662e:	4b07      	ldr	r3, [pc, #28]	; (800664c <vTaskPlaceOnEventList+0x44>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3318      	adds	r3, #24
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fe fe87 	bl	800534a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800663c:	2101      	movs	r1, #1
 800663e:	6838      	ldr	r0, [r7, #0]
 8006640:	f000 fa7c 	bl	8006b3c <prvAddCurrentTaskToDelayedList>
}
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	2000093c 	.word	0x2000093c

08006650 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	617b      	str	r3, [r7, #20]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3318      	adds	r3, #24
 800667e:	4619      	mov	r1, r3
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7fe fe3e 	bl	8005302 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800668c:	f04f 33ff 	mov.w	r3, #4294967295
 8006690:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	68b8      	ldr	r0, [r7, #8]
 8006696:	f000 fa51 	bl	8006b3c <prvAddCurrentTaskToDelayedList>
	}
 800669a:	bf00      	nop
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2000093c 	.word	0x2000093c

080066a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	60fb      	str	r3, [r7, #12]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	3318      	adds	r3, #24
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe fe6f 	bl	80053bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066de:	4b1e      	ldr	r3, [pc, #120]	; (8006758 <xTaskRemoveFromEventList+0xb0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d11d      	bne.n	8006722 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe fe66 	bl	80053bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	4b19      	ldr	r3, [pc, #100]	; (800675c <xTaskRemoveFromEventList+0xb4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d903      	bls.n	8006704 <xTaskRemoveFromEventList+0x5c>
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	4a16      	ldr	r2, [pc, #88]	; (800675c <xTaskRemoveFromEventList+0xb4>)
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4a13      	ldr	r2, [pc, #76]	; (8006760 <xTaskRemoveFromEventList+0xb8>)
 8006712:	441a      	add	r2, r3
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3304      	adds	r3, #4
 8006718:	4619      	mov	r1, r3
 800671a:	4610      	mov	r0, r2
 800671c:	f7fe fdf1 	bl	8005302 <vListInsertEnd>
 8006720:	e005      	b.n	800672e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	3318      	adds	r3, #24
 8006726:	4619      	mov	r1, r3
 8006728:	480e      	ldr	r0, [pc, #56]	; (8006764 <xTaskRemoveFromEventList+0xbc>)
 800672a:	f7fe fdea 	bl	8005302 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <xTaskRemoveFromEventList+0xc0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	429a      	cmp	r2, r3
 800673a:	d905      	bls.n	8006748 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <xTaskRemoveFromEventList+0xc4>)
 8006742:	2201      	movs	r2, #1
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	e001      	b.n	800674c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800674c:	697b      	ldr	r3, [r7, #20]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000e38 	.word	0x20000e38
 800675c:	20000e18 	.word	0x20000e18
 8006760:	20000940 	.word	0x20000940
 8006764:	20000dd0 	.word	0x20000dd0
 8006768:	2000093c 	.word	0x2000093c
 800676c:	20000e24 	.word	0x20000e24

08006770 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <vTaskInternalSetTimeOutState+0x24>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <vTaskInternalSetTimeOutState+0x28>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	605a      	str	r2, [r3, #4]
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	20000e28 	.word	0x20000e28
 8006798:	20000e14 	.word	0x20000e14

0800679c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	613b      	str	r3, [r7, #16]
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	60fb      	str	r3, [r7, #12]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067de:	f000 fe79 	bl	80074d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <xTaskCheckForTimeOut+0xbc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d102      	bne.n	8006802 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	e023      	b.n	800684a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b15      	ldr	r3, [pc, #84]	; (800685c <xTaskCheckForTimeOut+0xc0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d007      	beq.n	800681e <xTaskCheckForTimeOut+0x82>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	429a      	cmp	r2, r3
 8006816:	d302      	bcc.n	800681e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006818:	2301      	movs	r3, #1
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	e015      	b.n	800684a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	429a      	cmp	r2, r3
 8006826:	d20b      	bcs.n	8006840 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ff9b 	bl	8006770 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	e004      	b.n	800684a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006846:	2301      	movs	r3, #1
 8006848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800684a:	f000 fe73 	bl	8007534 <vPortExitCritical>

	return xReturn;
 800684e:	69fb      	ldr	r3, [r7, #28]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000e14 	.word	0x20000e14
 800685c:	20000e28 	.word	0x20000e28

08006860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006864:	4b03      	ldr	r3, [pc, #12]	; (8006874 <vTaskMissedYield+0x14>)
 8006866:	2201      	movs	r2, #1
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	bf00      	nop
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	20000e24 	.word	0x20000e24

08006878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006880:	f000 f852 	bl	8006928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <prvIdleTask+0x28>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d9f9      	bls.n	8006880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <prvIdleTask+0x2c>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800689c:	e7f0      	b.n	8006880 <prvIdleTask+0x8>
 800689e:	bf00      	nop
 80068a0:	20000940 	.word	0x20000940
 80068a4:	e000ed04 	.word	0xe000ed04

080068a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	e00c      	b.n	80068ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	4613      	mov	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4a12      	ldr	r2, [pc, #72]	; (8006908 <prvInitialiseTaskLists+0x60>)
 80068c0:	4413      	add	r3, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fcf0 	bl	80052a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3301      	adds	r3, #1
 80068cc:	607b      	str	r3, [r7, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b37      	cmp	r3, #55	; 0x37
 80068d2:	d9ef      	bls.n	80068b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068d4:	480d      	ldr	r0, [pc, #52]	; (800690c <prvInitialiseTaskLists+0x64>)
 80068d6:	f7fe fce7 	bl	80052a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068da:	480d      	ldr	r0, [pc, #52]	; (8006910 <prvInitialiseTaskLists+0x68>)
 80068dc:	f7fe fce4 	bl	80052a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068e0:	480c      	ldr	r0, [pc, #48]	; (8006914 <prvInitialiseTaskLists+0x6c>)
 80068e2:	f7fe fce1 	bl	80052a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068e6:	480c      	ldr	r0, [pc, #48]	; (8006918 <prvInitialiseTaskLists+0x70>)
 80068e8:	f7fe fcde 	bl	80052a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068ec:	480b      	ldr	r0, [pc, #44]	; (800691c <prvInitialiseTaskLists+0x74>)
 80068ee:	f7fe fcdb 	bl	80052a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068f2:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <prvInitialiseTaskLists+0x78>)
 80068f4:	4a05      	ldr	r2, [pc, #20]	; (800690c <prvInitialiseTaskLists+0x64>)
 80068f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <prvInitialiseTaskLists+0x7c>)
 80068fa:	4a05      	ldr	r2, [pc, #20]	; (8006910 <prvInitialiseTaskLists+0x68>)
 80068fc:	601a      	str	r2, [r3, #0]
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20000940 	.word	0x20000940
 800690c:	20000da0 	.word	0x20000da0
 8006910:	20000db4 	.word	0x20000db4
 8006914:	20000dd0 	.word	0x20000dd0
 8006918:	20000de4 	.word	0x20000de4
 800691c:	20000dfc 	.word	0x20000dfc
 8006920:	20000dc8 	.word	0x20000dc8
 8006924:	20000dcc 	.word	0x20000dcc

08006928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800692e:	e019      	b.n	8006964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006930:	f000 fdd0 	bl	80074d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006934:	4b10      	ldr	r3, [pc, #64]	; (8006978 <prvCheckTasksWaitingTermination+0x50>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3304      	adds	r3, #4
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fd3b 	bl	80053bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006946:	4b0d      	ldr	r3, [pc, #52]	; (800697c <prvCheckTasksWaitingTermination+0x54>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3b01      	subs	r3, #1
 800694c:	4a0b      	ldr	r2, [pc, #44]	; (800697c <prvCheckTasksWaitingTermination+0x54>)
 800694e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <prvCheckTasksWaitingTermination+0x58>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3b01      	subs	r3, #1
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <prvCheckTasksWaitingTermination+0x58>)
 8006958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800695a:	f000 fdeb 	bl	8007534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f810 	bl	8006984 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <prvCheckTasksWaitingTermination+0x58>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e1      	bne.n	8006930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000de4 	.word	0x20000de4
 800697c:	20000e10 	.word	0x20000e10
 8006980:	20000df8 	.word	0x20000df8

08006984 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006992:	2b00      	cmp	r3, #0
 8006994:	d108      	bne.n	80069a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	4618      	mov	r0, r3
 800699c:	f000 ff88 	bl	80078b0 <vPortFree>
				vPortFree( pxTCB );
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 ff85 	bl	80078b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069a6:	e018      	b.n	80069da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d103      	bne.n	80069ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 ff7c 	bl	80078b0 <vPortFree>
	}
 80069b8:	e00f      	b.n	80069da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d00a      	beq.n	80069da <prvDeleteTCB+0x56>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60fb      	str	r3, [r7, #12]
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <prvDeleteTCB+0x54>
	}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <prvResetNextTaskUnblockTime+0x38>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069f4:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <prvResetNextTaskUnblockTime+0x3c>)
 80069f6:	f04f 32ff 	mov.w	r2, #4294967295
 80069fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069fc:	e008      	b.n	8006a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <prvResetNextTaskUnblockTime+0x38>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <prvResetNextTaskUnblockTime+0x3c>)
 8006a0e:	6013      	str	r3, [r2, #0]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20000dc8 	.word	0x20000dc8
 8006a20:	20000e30 	.word	0x20000e30

08006a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <xTaskGetSchedulerState+0x34>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a32:	2301      	movs	r3, #1
 8006a34:	607b      	str	r3, [r7, #4]
 8006a36:	e008      	b.n	8006a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a38:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <xTaskGetSchedulerState+0x38>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a40:	2302      	movs	r3, #2
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	e001      	b.n	8006a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a46:	2300      	movs	r3, #0
 8006a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a4a:	687b      	ldr	r3, [r7, #4]
	}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	20000e1c 	.word	0x20000e1c
 8006a5c:	20000e38 	.word	0x20000e38

08006a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d056      	beq.n	8006b24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a76:	4b2e      	ldr	r3, [pc, #184]	; (8006b30 <xTaskPriorityDisinherit+0xd0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d00a      	beq.n	8006a96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	60fb      	str	r3, [r7, #12]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60bb      	str	r3, [r7, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	1e5a      	subs	r2, r3, #1
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d02c      	beq.n	8006b24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d128      	bne.n	8006b24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fc70 	bl	80053bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <xTaskPriorityDisinherit+0xd4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d903      	bls.n	8006b04 <xTaskPriorityDisinherit+0xa4>
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	4a0c      	ldr	r2, [pc, #48]	; (8006b34 <xTaskPriorityDisinherit+0xd4>)
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a09      	ldr	r2, [pc, #36]	; (8006b38 <xTaskPriorityDisinherit+0xd8>)
 8006b12:	441a      	add	r2, r3
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f7fe fbf1 	bl	8005302 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b24:	697b      	ldr	r3, [r7, #20]
	}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	2000093c 	.word	0x2000093c
 8006b34:	20000e18 	.word	0x20000e18
 8006b38:	20000940 	.word	0x20000940

08006b3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b46:	4b21      	ldr	r3, [pc, #132]	; (8006bcc <prvAddCurrentTaskToDelayedList+0x90>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b4c:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fc32 	bl	80053bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d10a      	bne.n	8006b76 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b66:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4819      	ldr	r0, [pc, #100]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b70:	f7fe fbc7 	bl	8005302 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b74:	e026      	b.n	8006bc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b7e:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d209      	bcs.n	8006ba2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b8e:	4b12      	ldr	r3, [pc, #72]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7fe fbd5 	bl	800534a <vListInsert>
}
 8006ba0:	e010      	b.n	8006bc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba2:	4b0e      	ldr	r3, [pc, #56]	; (8006bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7fe fbcb 	bl	800534a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bb4:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d202      	bcs.n	8006bc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bbe:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	6013      	str	r3, [r2, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000e14 	.word	0x20000e14
 8006bd0:	2000093c 	.word	0x2000093c
 8006bd4:	20000dfc 	.word	0x20000dfc
 8006bd8:	20000dcc 	.word	0x20000dcc
 8006bdc:	20000dc8 	.word	0x20000dc8
 8006be0:	20000e30 	.word	0x20000e30

08006be4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bee:	f000 fb07 	bl	8007200 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bf2:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <xTimerCreateTimerTask+0x80>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d021      	beq.n	8006c3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c02:	1d3a      	adds	r2, r7, #4
 8006c04:	f107 0108 	add.w	r1, r7, #8
 8006c08:	f107 030c 	add.w	r3, r7, #12
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fb31 	bl	8005274 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	9202      	str	r2, [sp, #8]
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	2300      	movs	r3, #0
 8006c22:	460a      	mov	r2, r1
 8006c24:	4910      	ldr	r1, [pc, #64]	; (8006c68 <xTimerCreateTimerTask+0x84>)
 8006c26:	4811      	ldr	r0, [pc, #68]	; (8006c6c <xTimerCreateTimerTask+0x88>)
 8006c28:	f7ff f8de 	bl	8005de8 <xTaskCreateStatic>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <xTimerCreateTimerTask+0x8c>)
 8006c30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <xTimerCreateTimerTask+0x8c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	613b      	str	r3, [r7, #16]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c5a:	697b      	ldr	r3, [r7, #20]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000e6c 	.word	0x20000e6c
 8006c68:	08008474 	.word	0x08008474
 8006c6c:	08006da9 	.word	0x08006da9
 8006c70:	20000e70 	.word	0x20000e70

08006c74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	623b      	str	r3, [r7, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ca2:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <xTimerGenericCommand+0x98>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d02a      	beq.n	8006d00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b05      	cmp	r3, #5
 8006cba:	dc18      	bgt.n	8006cee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cbc:	f7ff feb2 	bl	8006a24 <xTaskGetSchedulerState>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d109      	bne.n	8006cda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cc6:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <xTimerGenericCommand+0x98>)
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	f107 0110 	add.w	r1, r7, #16
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd2:	f7fe fca1 	bl	8005618 <xQueueGenericSend>
 8006cd6:	6278      	str	r0, [r7, #36]	; 0x24
 8006cd8:	e012      	b.n	8006d00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <xTimerGenericCommand+0x98>)
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	f107 0110 	add.w	r1, r7, #16
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f7fe fc97 	bl	8005618 <xQueueGenericSend>
 8006cea:	6278      	str	r0, [r7, #36]	; 0x24
 8006cec:	e008      	b.n	8006d00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cee:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <xTimerGenericCommand+0x98>)
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	f107 0110 	add.w	r1, r7, #16
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	f7fe fd8b 	bl	8005814 <xQueueGenericSendFromISR>
 8006cfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3728      	adds	r7, #40	; 0x28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000e6c 	.word	0x20000e6c

08006d10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1a:	4b22      	ldr	r3, [pc, #136]	; (8006da4 <prvProcessExpiredTimer+0x94>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe fb47 	bl	80053bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d022      	beq.n	8006d82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	18d1      	adds	r1, r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	6978      	ldr	r0, [r7, #20]
 8006d4a:	f000 f8d1 	bl	8006ef0 <prvInsertTimerInActiveList>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01f      	beq.n	8006d94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d54:	2300      	movs	r3, #0
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6978      	ldr	r0, [r7, #20]
 8006d60:	f7ff ff88 	bl	8006c74 <xTimerGenericCommand>
 8006d64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d113      	bne.n	8006d94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	60fb      	str	r3, [r7, #12]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	6978      	ldr	r0, [r7, #20]
 8006d9a:	4798      	blx	r3
}
 8006d9c:	bf00      	nop
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000e64 	.word	0x20000e64

08006da8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 f857 	bl	8006e68 <prvGetNextExpireTime>
 8006dba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f803 	bl	8006dcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006dc6:	f000 f8d5 	bl	8006f74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dca:	e7f1      	b.n	8006db0 <prvTimerTask+0x8>

08006dcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006dd6:	f7ff fa43 	bl	8006260 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dda:	f107 0308 	add.w	r3, r7, #8
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 f866 	bl	8006eb0 <prvSampleTimeNow>
 8006de4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d130      	bne.n	8006e4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <prvProcessTimerOrBlockTask+0x3c>
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d806      	bhi.n	8006e08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006dfa:	f7ff fa3f 	bl	800627c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff ff85 	bl	8006d10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e06:	e024      	b.n	8006e52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <prvProcessTimerOrBlockTask+0x90>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <prvProcessTimerOrBlockTask+0x50>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <prvProcessTimerOrBlockTask+0x52>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <prvProcessTimerOrBlockTask+0x94>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f7fe ffa7 	bl	8005d80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e32:	f7ff fa23 	bl	800627c <xTaskResumeAll>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <prvProcessTimerOrBlockTask+0x98>)
 8006e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	f3bf 8f6f 	isb	sy
}
 8006e4c:	e001      	b.n	8006e52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e4e:	f7ff fa15 	bl	800627c <xTaskResumeAll>
}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000e68 	.word	0x20000e68
 8006e60:	20000e6c 	.word	0x20000e6c
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <prvGetNextExpireTime+0x44>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <prvGetNextExpireTime+0x16>
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	e000      	b.n	8006e80 <prvGetNextExpireTime+0x18>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d105      	bne.n	8006e98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e8c:	4b07      	ldr	r3, [pc, #28]	; (8006eac <prvGetNextExpireTime+0x44>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	e001      	b.n	8006e9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20000e64 	.word	0x20000e64

08006eb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006eb8:	f7ff fa7e 	bl	80063b8 <xTaskGetTickCount>
 8006ebc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <prvSampleTimeNow+0x3c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d205      	bcs.n	8006ed4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ec8:	f000 f936 	bl	8007138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	e002      	b.n	8006eda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006eda:	4a04      	ldr	r2, [pc, #16]	; (8006eec <prvSampleTimeNow+0x3c>)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000e74 	.word	0x20000e74

08006ef0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d812      	bhi.n	8006f3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d302      	bcc.n	8006f2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e01b      	b.n	8006f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f2a:	4b10      	ldr	r3, [pc, #64]	; (8006f6c <prvInsertTimerInActiveList+0x7c>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f7fe fa08 	bl	800534a <vListInsert>
 8006f3a:	e012      	b.n	8006f62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d206      	bcs.n	8006f52 <prvInsertTimerInActiveList+0x62>
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d302      	bcc.n	8006f52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e007      	b.n	8006f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f52:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <prvInsertTimerInActiveList+0x80>)
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	f7fe f9f4 	bl	800534a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f62:	697b      	ldr	r3, [r7, #20]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20000e68 	.word	0x20000e68
 8006f70:	20000e64 	.word	0x20000e64

08006f74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08e      	sub	sp, #56	; 0x38
 8006f78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f7a:	e0ca      	b.n	8007112 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	da18      	bge.n	8006fb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	3304      	adds	r3, #4
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	61fb      	str	r3, [r7, #28]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006faa:	6850      	ldr	r0, [r2, #4]
 8006fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fae:	6892      	ldr	r2, [r2, #8]
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f2c0 80aa 	blt.w	8007110 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe f9f5 	bl	80053bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff ff6b 	bl	8006eb0 <prvSampleTimeNow>
 8006fda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b09      	cmp	r3, #9
 8006fe0:	f200 8097 	bhi.w	8007112 <prvProcessReceivedCommands+0x19e>
 8006fe4:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <prvProcessReceivedCommands+0x78>)
 8006fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fea:	bf00      	nop
 8006fec:	08007015 	.word	0x08007015
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	08007015 	.word	0x08007015
 8006ff8:	08007089 	.word	0x08007089
 8006ffc:	0800709d 	.word	0x0800709d
 8007000:	080070e7 	.word	0x080070e7
 8007004:	08007015 	.word	0x08007015
 8007008:	08007015 	.word	0x08007015
 800700c:	08007089 	.word	0x08007089
 8007010:	0800709d 	.word	0x0800709d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	b2da      	uxtb	r2, r3
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	18d1      	adds	r1, r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007034:	f7ff ff5c 	bl	8006ef0 <prvInsertTimerInActiveList>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d069      	beq.n	8007112 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d05e      	beq.n	8007112 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	441a      	add	r2, r3
 800705c:	2300      	movs	r3, #0
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	2300      	movs	r3, #0
 8007062:	2100      	movs	r1, #0
 8007064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007066:	f7ff fe05 	bl	8006c74 <xTimerGenericCommand>
 800706a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d14f      	bne.n	8007112 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	61bb      	str	r3, [r7, #24]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	b2da      	uxtb	r2, r3
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800709a:	e03a      	b.n	8007112 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	617b      	str	r3, [r7, #20]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	18d1      	adds	r1, r2, r3
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e0:	f7ff ff06 	bl	8006ef0 <prvInsertTimerInActiveList>
					break;
 80070e4:	e015      	b.n	8007112 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d103      	bne.n	80070fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80070f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f6:	f000 fbdb 	bl	80078b0 <vPortFree>
 80070fa:	e00a      	b.n	8007112 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007102:	f023 0301 	bic.w	r3, r3, #1
 8007106:	b2da      	uxtb	r2, r3
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800710e:	e000      	b.n	8007112 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007110:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007112:	4b08      	ldr	r3, [pc, #32]	; (8007134 <prvProcessReceivedCommands+0x1c0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	1d39      	adds	r1, r7, #4
 8007118:	2200      	movs	r2, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fc16 	bl	800594c <xQueueReceive>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	f47f af2a 	bne.w	8006f7c <prvProcessReceivedCommands+0x8>
	}
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	3730      	adds	r7, #48	; 0x30
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000e6c 	.word	0x20000e6c

08007138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800713e:	e048      	b.n	80071d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007140:	4b2d      	ldr	r3, [pc, #180]	; (80071f8 <prvSwitchTimerLists+0xc0>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800714a:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <prvSwitchTimerLists+0xc0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3304      	adds	r3, #4
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe f92f 	bl	80053bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d02e      	beq.n	80071d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4413      	add	r3, r2
 800717c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	429a      	cmp	r2, r3
 8007184:	d90e      	bls.n	80071a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007192:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <prvSwitchTimerLists+0xc0>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3304      	adds	r3, #4
 800719a:	4619      	mov	r1, r3
 800719c:	4610      	mov	r0, r2
 800719e:	f7fe f8d4 	bl	800534a <vListInsert>
 80071a2:	e016      	b.n	80071d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	2100      	movs	r1, #0
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fd60 	bl	8006c74 <xTimerGenericCommand>
 80071b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	603b      	str	r3, [r7, #0]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071d2:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <prvSwitchTimerLists+0xc0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1b1      	bne.n	8007140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071dc:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <prvSwitchTimerLists+0xc0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <prvSwitchTimerLists+0xc4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a04      	ldr	r2, [pc, #16]	; (80071f8 <prvSwitchTimerLists+0xc0>)
 80071e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071ea:	4a04      	ldr	r2, [pc, #16]	; (80071fc <prvSwitchTimerLists+0xc4>)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	6013      	str	r3, [r2, #0]
}
 80071f0:	bf00      	nop
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000e64 	.word	0x20000e64
 80071fc:	20000e68 	.word	0x20000e68

08007200 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007206:	f000 f965 	bl	80074d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800720a:	4b15      	ldr	r3, [pc, #84]	; (8007260 <prvCheckForValidListAndQueue+0x60>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d120      	bne.n	8007254 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007212:	4814      	ldr	r0, [pc, #80]	; (8007264 <prvCheckForValidListAndQueue+0x64>)
 8007214:	f7fe f848 	bl	80052a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007218:	4813      	ldr	r0, [pc, #76]	; (8007268 <prvCheckForValidListAndQueue+0x68>)
 800721a:	f7fe f845 	bl	80052a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <prvCheckForValidListAndQueue+0x6c>)
 8007220:	4a10      	ldr	r2, [pc, #64]	; (8007264 <prvCheckForValidListAndQueue+0x64>)
 8007222:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007224:	4b12      	ldr	r3, [pc, #72]	; (8007270 <prvCheckForValidListAndQueue+0x70>)
 8007226:	4a10      	ldr	r2, [pc, #64]	; (8007268 <prvCheckForValidListAndQueue+0x68>)
 8007228:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800722a:	2300      	movs	r3, #0
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	4b11      	ldr	r3, [pc, #68]	; (8007274 <prvCheckForValidListAndQueue+0x74>)
 8007230:	4a11      	ldr	r2, [pc, #68]	; (8007278 <prvCheckForValidListAndQueue+0x78>)
 8007232:	2110      	movs	r1, #16
 8007234:	200a      	movs	r0, #10
 8007236:	f7fe f953 	bl	80054e0 <xQueueGenericCreateStatic>
 800723a:	4603      	mov	r3, r0
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <prvCheckForValidListAndQueue+0x60>)
 800723e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <prvCheckForValidListAndQueue+0x60>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <prvCheckForValidListAndQueue+0x60>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	490b      	ldr	r1, [pc, #44]	; (800727c <prvCheckForValidListAndQueue+0x7c>)
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fd6c 	bl	8005d2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007254:	f000 f96e 	bl	8007534 <vPortExitCritical>
}
 8007258:	bf00      	nop
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000e6c 	.word	0x20000e6c
 8007264:	20000e3c 	.word	0x20000e3c
 8007268:	20000e50 	.word	0x20000e50
 800726c:	20000e64 	.word	0x20000e64
 8007270:	20000e68 	.word	0x20000e68
 8007274:	20000f18 	.word	0x20000f18
 8007278:	20000e78 	.word	0x20000e78
 800727c:	0800847c 	.word	0x0800847c

08007280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3b04      	subs	r3, #4
 8007290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3b04      	subs	r3, #4
 800729e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f023 0201 	bic.w	r2, r3, #1
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3b04      	subs	r3, #4
 80072ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072b0:	4a0c      	ldr	r2, [pc, #48]	; (80072e4 <pxPortInitialiseStack+0x64>)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3b14      	subs	r3, #20
 80072ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3b04      	subs	r3, #4
 80072c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f06f 0202 	mvn.w	r2, #2
 80072ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3b20      	subs	r3, #32
 80072d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072d6:	68fb      	ldr	r3, [r7, #12]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	080072e9 	.word	0x080072e9

080072e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <prvTaskExitError+0x54>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d00a      	beq.n	8007312 <prvTaskExitError+0x2a>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	60fb      	str	r3, [r7, #12]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <prvTaskExitError+0x28>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60bb      	str	r3, [r7, #8]
}
 8007324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007326:	bf00      	nop
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0fc      	beq.n	8007328 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800732e:	bf00      	nop
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	20000010 	.word	0x20000010

08007340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007340:	4b07      	ldr	r3, [pc, #28]	; (8007360 <pxCurrentTCBConst2>)
 8007342:	6819      	ldr	r1, [r3, #0]
 8007344:	6808      	ldr	r0, [r1, #0]
 8007346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	f380 8809 	msr	PSP, r0
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f04f 0000 	mov.w	r0, #0
 8007356:	f380 8811 	msr	BASEPRI, r0
 800735a:	4770      	bx	lr
 800735c:	f3af 8000 	nop.w

08007360 <pxCurrentTCBConst2>:
 8007360:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop

08007368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007368:	4808      	ldr	r0, [pc, #32]	; (800738c <prvPortStartFirstTask+0x24>)
 800736a:	6800      	ldr	r0, [r0, #0]
 800736c:	6800      	ldr	r0, [r0, #0]
 800736e:	f380 8808 	msr	MSP, r0
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8814 	msr	CONTROL, r0
 800737a:	b662      	cpsie	i
 800737c:	b661      	cpsie	f
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	df00      	svc	0
 8007388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800738a:	bf00      	nop
 800738c:	e000ed08 	.word	0xe000ed08

08007390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007396:	4b46      	ldr	r3, [pc, #280]	; (80074b0 <xPortStartScheduler+0x120>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a46      	ldr	r2, [pc, #280]	; (80074b4 <xPortStartScheduler+0x124>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d10a      	bne.n	80073b6 <xPortStartScheduler+0x26>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	613b      	str	r3, [r7, #16]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073b6:	4b3e      	ldr	r3, [pc, #248]	; (80074b0 <xPortStartScheduler+0x120>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a3f      	ldr	r2, [pc, #252]	; (80074b8 <xPortStartScheduler+0x128>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10a      	bne.n	80073d6 <xPortStartScheduler+0x46>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	60fb      	str	r3, [r7, #12]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073d6:	4b39      	ldr	r3, [pc, #228]	; (80074bc <xPortStartScheduler+0x12c>)
 80073d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	22ff      	movs	r2, #255	; 0xff
 80073e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	4b31      	ldr	r3, [pc, #196]	; (80074c0 <xPortStartScheduler+0x130>)
 80073fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073fe:	4b31      	ldr	r3, [pc, #196]	; (80074c4 <xPortStartScheduler+0x134>)
 8007400:	2207      	movs	r2, #7
 8007402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007404:	e009      	b.n	800741a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007406:	4b2f      	ldr	r3, [pc, #188]	; (80074c4 <xPortStartScheduler+0x134>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3b01      	subs	r3, #1
 800740c:	4a2d      	ldr	r2, [pc, #180]	; (80074c4 <xPortStartScheduler+0x134>)
 800740e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	b2db      	uxtb	r3, r3
 8007418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007422:	2b80      	cmp	r3, #128	; 0x80
 8007424:	d0ef      	beq.n	8007406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007426:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <xPortStartScheduler+0x134>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1c3 0307 	rsb	r3, r3, #7
 800742e:	2b04      	cmp	r3, #4
 8007430:	d00a      	beq.n	8007448 <xPortStartScheduler+0xb8>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	60bb      	str	r3, [r7, #8]
}
 8007444:	bf00      	nop
 8007446:	e7fe      	b.n	8007446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007448:	4b1e      	ldr	r3, [pc, #120]	; (80074c4 <xPortStartScheduler+0x134>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	4a1d      	ldr	r2, [pc, #116]	; (80074c4 <xPortStartScheduler+0x134>)
 8007450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <xPortStartScheduler+0x134>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800745a:	4a1a      	ldr	r2, [pc, #104]	; (80074c4 <xPortStartScheduler+0x134>)
 800745c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	b2da      	uxtb	r2, r3
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007466:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <xPortStartScheduler+0x138>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a17      	ldr	r2, [pc, #92]	; (80074c8 <xPortStartScheduler+0x138>)
 800746c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <xPortStartScheduler+0x138>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a14      	ldr	r2, [pc, #80]	; (80074c8 <xPortStartScheduler+0x138>)
 8007478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800747c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800747e:	f000 f8dd 	bl	800763c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007482:	4b12      	ldr	r3, [pc, #72]	; (80074cc <xPortStartScheduler+0x13c>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007488:	f000 f8fc 	bl	8007684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800748c:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <xPortStartScheduler+0x140>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0f      	ldr	r2, [pc, #60]	; (80074d0 <xPortStartScheduler+0x140>)
 8007492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007498:	f7ff ff66 	bl	8007368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800749c:	f7ff f856 	bl	800654c <vTaskSwitchContext>
	prvTaskExitError();
 80074a0:	f7ff ff22 	bl	80072e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	e000ed00 	.word	0xe000ed00
 80074b4:	410fc271 	.word	0x410fc271
 80074b8:	410fc270 	.word	0x410fc270
 80074bc:	e000e400 	.word	0xe000e400
 80074c0:	20000f68 	.word	0x20000f68
 80074c4:	20000f6c 	.word	0x20000f6c
 80074c8:	e000ed20 	.word	0xe000ed20
 80074cc:	20000010 	.word	0x20000010
 80074d0:	e000ef34 	.word	0xe000ef34

080074d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	607b      	str	r3, [r7, #4]
}
 80074ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074ee:	4b0f      	ldr	r3, [pc, #60]	; (800752c <vPortEnterCritical+0x58>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3301      	adds	r3, #1
 80074f4:	4a0d      	ldr	r2, [pc, #52]	; (800752c <vPortEnterCritical+0x58>)
 80074f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <vPortEnterCritical+0x58>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d10f      	bne.n	8007520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <vPortEnterCritical+0x5c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <vPortEnterCritical+0x4c>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	603b      	str	r3, [r7, #0]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <vPortEnterCritical+0x4a>
	}
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	20000010 	.word	0x20000010
 8007530:	e000ed04 	.word	0xe000ed04

08007534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800753a:	4b12      	ldr	r3, [pc, #72]	; (8007584 <vPortExitCritical+0x50>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <vPortExitCritical+0x24>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	607b      	str	r3, [r7, #4]
}
 8007554:	bf00      	nop
 8007556:	e7fe      	b.n	8007556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007558:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <vPortExitCritical+0x50>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3b01      	subs	r3, #1
 800755e:	4a09      	ldr	r2, [pc, #36]	; (8007584 <vPortExitCritical+0x50>)
 8007560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007562:	4b08      	ldr	r3, [pc, #32]	; (8007584 <vPortExitCritical+0x50>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <vPortExitCritical+0x42>
 800756a:	2300      	movs	r3, #0
 800756c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	f383 8811 	msr	BASEPRI, r3
}
 8007574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20000010 	.word	0x20000010
	...

08007590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007590:	f3ef 8009 	mrs	r0, PSP
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <pxCurrentTCBConst>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	f01e 0f10 	tst.w	lr, #16
 80075a0:	bf08      	it	eq
 80075a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075aa:	6010      	str	r0, [r2, #0]
 80075ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075b4:	f380 8811 	msr	BASEPRI, r0
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f7fe ffc4 	bl	800654c <vTaskSwitchContext>
 80075c4:	f04f 0000 	mov.w	r0, #0
 80075c8:	f380 8811 	msr	BASEPRI, r0
 80075cc:	bc09      	pop	{r0, r3}
 80075ce:	6819      	ldr	r1, [r3, #0]
 80075d0:	6808      	ldr	r0, [r1, #0]
 80075d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d6:	f01e 0f10 	tst.w	lr, #16
 80075da:	bf08      	it	eq
 80075dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075e0:	f380 8809 	msr	PSP, r0
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	f3af 8000 	nop.w

080075f0 <pxCurrentTCBConst>:
 80075f0:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop

080075f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	607b      	str	r3, [r7, #4]
}
 8007610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007612:	f7fe fee1 	bl	80063d8 <xTaskIncrementTick>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800761c:	4b06      	ldr	r3, [pc, #24]	; (8007638 <xPortSysTickHandler+0x40>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	2300      	movs	r3, #0
 8007626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f383 8811 	msr	BASEPRI, r3
}
 800762e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007640:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <vPortSetupTimerInterrupt+0x34>)
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <vPortSetupTimerInterrupt+0x38>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <vPortSetupTimerInterrupt+0x3c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a0a      	ldr	r2, [pc, #40]	; (800767c <vPortSetupTimerInterrupt+0x40>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	099b      	lsrs	r3, r3, #6
 8007658:	4a09      	ldr	r2, [pc, #36]	; (8007680 <vPortSetupTimerInterrupt+0x44>)
 800765a:	3b01      	subs	r3, #1
 800765c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800765e:	4b04      	ldr	r3, [pc, #16]	; (8007670 <vPortSetupTimerInterrupt+0x34>)
 8007660:	2207      	movs	r2, #7
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	e000e010 	.word	0xe000e010
 8007674:	e000e018 	.word	0xe000e018
 8007678:	20000004 	.word	0x20000004
 800767c:	10624dd3 	.word	0x10624dd3
 8007680:	e000e014 	.word	0xe000e014

08007684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007694 <vPortEnableVFP+0x10>
 8007688:	6801      	ldr	r1, [r0, #0]
 800768a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800768e:	6001      	str	r1, [r0, #0]
 8007690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007692:	bf00      	nop
 8007694:	e000ed88 	.word	0xe000ed88

08007698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800769e:	f3ef 8305 	mrs	r3, IPSR
 80076a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b0f      	cmp	r3, #15
 80076a8:	d914      	bls.n	80076d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076aa:	4a17      	ldr	r2, [pc, #92]	; (8007708 <vPortValidateInterruptPriority+0x70>)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076b4:	4b15      	ldr	r3, [pc, #84]	; (800770c <vPortValidateInterruptPriority+0x74>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	7afa      	ldrb	r2, [r7, #11]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d20a      	bcs.n	80076d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
}
 80076d0:	bf00      	nop
 80076d2:	e7fe      	b.n	80076d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076d4:	4b0e      	ldr	r3, [pc, #56]	; (8007710 <vPortValidateInterruptPriority+0x78>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076dc:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <vPortValidateInterruptPriority+0x7c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d90a      	bls.n	80076fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	603b      	str	r3, [r7, #0]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <vPortValidateInterruptPriority+0x60>
	}
 80076fa:	bf00      	nop
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	e000e3f0 	.word	0xe000e3f0
 800770c:	20000f68 	.word	0x20000f68
 8007710:	e000ed0c 	.word	0xe000ed0c
 8007714:	20000f6c 	.word	0x20000f6c

08007718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08a      	sub	sp, #40	; 0x28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007724:	f7fe fd9c 	bl	8006260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007728:	4b5b      	ldr	r3, [pc, #364]	; (8007898 <pvPortMalloc+0x180>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007730:	f000 f920 	bl	8007974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007734:	4b59      	ldr	r3, [pc, #356]	; (800789c <pvPortMalloc+0x184>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	f040 8093 	bne.w	8007868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01d      	beq.n	8007784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007748:	2208      	movs	r2, #8
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	2b00      	cmp	r3, #0
 8007758:	d014      	beq.n	8007784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f023 0307 	bic.w	r3, r3, #7
 8007760:	3308      	adds	r3, #8
 8007762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <pvPortMalloc+0x6c>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	617b      	str	r3, [r7, #20]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d06e      	beq.n	8007868 <pvPortMalloc+0x150>
 800778a:	4b45      	ldr	r3, [pc, #276]	; (80078a0 <pvPortMalloc+0x188>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	429a      	cmp	r2, r3
 8007792:	d869      	bhi.n	8007868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007794:	4b43      	ldr	r3, [pc, #268]	; (80078a4 <pvPortMalloc+0x18c>)
 8007796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007798:	4b42      	ldr	r3, [pc, #264]	; (80078a4 <pvPortMalloc+0x18c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800779e:	e004      	b.n	80077aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d903      	bls.n	80077bc <pvPortMalloc+0xa4>
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f1      	bne.n	80077a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077bc:	4b36      	ldr	r3, [pc, #216]	; (8007898 <pvPortMalloc+0x180>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d050      	beq.n	8007868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2208      	movs	r2, #8
 80077cc:	4413      	add	r3, r2
 80077ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	2308      	movs	r3, #8
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d91f      	bls.n	8007828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <pvPortMalloc+0xf8>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	613b      	str	r3, [r7, #16]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007822:	69b8      	ldr	r0, [r7, #24]
 8007824:	f000 f908 	bl	8007a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007828:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <pvPortMalloc+0x188>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	4a1b      	ldr	r2, [pc, #108]	; (80078a0 <pvPortMalloc+0x188>)
 8007834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007836:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <pvPortMalloc+0x188>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b1b      	ldr	r3, [pc, #108]	; (80078a8 <pvPortMalloc+0x190>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d203      	bcs.n	800784a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007842:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <pvPortMalloc+0x188>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <pvPortMalloc+0x190>)
 8007848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	4b13      	ldr	r3, [pc, #76]	; (800789c <pvPortMalloc+0x184>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	431a      	orrs	r2, r3
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <pvPortMalloc+0x194>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	4a11      	ldr	r2, [pc, #68]	; (80078ac <pvPortMalloc+0x194>)
 8007866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007868:	f7fe fd08 	bl	800627c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <pvPortMalloc+0x174>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60fb      	str	r3, [r7, #12]
}
 8007888:	bf00      	nop
 800788a:	e7fe      	b.n	800788a <pvPortMalloc+0x172>
	return pvReturn;
 800788c:	69fb      	ldr	r3, [r7, #28]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3728      	adds	r7, #40	; 0x28
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20001b30 	.word	0x20001b30
 800789c:	20001b44 	.word	0x20001b44
 80078a0:	20001b34 	.word	0x20001b34
 80078a4:	20001b28 	.word	0x20001b28
 80078a8:	20001b38 	.word	0x20001b38
 80078ac:	20001b3c 	.word	0x20001b3c

080078b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d04d      	beq.n	800795e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078c2:	2308      	movs	r3, #8
 80078c4:	425b      	negs	r3, r3
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4413      	add	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	4b24      	ldr	r3, [pc, #144]	; (8007968 <vPortFree+0xb8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4013      	ands	r3, r2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10a      	bne.n	80078f4 <vPortFree+0x44>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	60fb      	str	r3, [r7, #12]
}
 80078f0:	bf00      	nop
 80078f2:	e7fe      	b.n	80078f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <vPortFree+0x62>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	60bb      	str	r3, [r7, #8]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <vPortFree+0xb8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4013      	ands	r3, r2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01e      	beq.n	800795e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d11a      	bne.n	800795e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <vPortFree+0xb8>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	43db      	mvns	r3, r3
 8007932:	401a      	ands	r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007938:	f7fe fc92 	bl	8006260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	4b0a      	ldr	r3, [pc, #40]	; (800796c <vPortFree+0xbc>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4413      	add	r3, r2
 8007946:	4a09      	ldr	r2, [pc, #36]	; (800796c <vPortFree+0xbc>)
 8007948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800794a:	6938      	ldr	r0, [r7, #16]
 800794c:	f000 f874 	bl	8007a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007950:	4b07      	ldr	r3, [pc, #28]	; (8007970 <vPortFree+0xc0>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	4a06      	ldr	r2, [pc, #24]	; (8007970 <vPortFree+0xc0>)
 8007958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800795a:	f7fe fc8f 	bl	800627c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800795e:	bf00      	nop
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20001b44 	.word	0x20001b44
 800796c:	20001b34 	.word	0x20001b34
 8007970:	20001b40 	.word	0x20001b40

08007974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800797a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800797e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007980:	4b27      	ldr	r3, [pc, #156]	; (8007a20 <prvHeapInit+0xac>)
 8007982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00c      	beq.n	80079a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3307      	adds	r3, #7
 8007992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0307 	bic.w	r3, r3, #7
 800799a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	4a1f      	ldr	r2, [pc, #124]	; (8007a20 <prvHeapInit+0xac>)
 80079a4:	4413      	add	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079ac:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <prvHeapInit+0xb0>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079b2:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <prvHeapInit+0xb0>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4413      	add	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079c0:	2208      	movs	r2, #8
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0307 	bic.w	r3, r3, #7
 80079ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a15      	ldr	r2, [pc, #84]	; (8007a28 <prvHeapInit+0xb4>)
 80079d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079d6:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <prvHeapInit+0xb4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079de:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <prvHeapInit+0xb4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079f4:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <prvHeapInit+0xb4>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4a0a      	ldr	r2, [pc, #40]	; (8007a2c <prvHeapInit+0xb8>)
 8007a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	4a09      	ldr	r2, [pc, #36]	; (8007a30 <prvHeapInit+0xbc>)
 8007a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a0c:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <prvHeapInit+0xc0>)
 8007a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a12:	601a      	str	r2, [r3, #0]
}
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	20000f70 	.word	0x20000f70
 8007a24:	20001b28 	.word	0x20001b28
 8007a28:	20001b30 	.word	0x20001b30
 8007a2c:	20001b38 	.word	0x20001b38
 8007a30:	20001b34 	.word	0x20001b34
 8007a34:	20001b44 	.word	0x20001b44

08007a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a40:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <prvInsertBlockIntoFreeList+0xac>)
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e002      	b.n	8007a4c <prvInsertBlockIntoFreeList+0x14>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d8f7      	bhi.n	8007a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4413      	add	r3, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d108      	bne.n	8007a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	441a      	add	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d118      	bne.n	8007ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d00d      	beq.n	8007ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e008      	b.n	8007ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e003      	b.n	8007ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d002      	beq.n	8007ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20001b28 	.word	0x20001b28
 8007ae8:	20001b30 	.word	0x20001b30

08007aec <__errno>:
 8007aec:	4b01      	ldr	r3, [pc, #4]	; (8007af4 <__errno+0x8>)
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000014 	.word	0x20000014

08007af8 <__libc_init_array>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	4d0d      	ldr	r5, [pc, #52]	; (8007b30 <__libc_init_array+0x38>)
 8007afc:	4c0d      	ldr	r4, [pc, #52]	; (8007b34 <__libc_init_array+0x3c>)
 8007afe:	1b64      	subs	r4, r4, r5
 8007b00:	10a4      	asrs	r4, r4, #2
 8007b02:	2600      	movs	r6, #0
 8007b04:	42a6      	cmp	r6, r4
 8007b06:	d109      	bne.n	8007b1c <__libc_init_array+0x24>
 8007b08:	4d0b      	ldr	r5, [pc, #44]	; (8007b38 <__libc_init_array+0x40>)
 8007b0a:	4c0c      	ldr	r4, [pc, #48]	; (8007b3c <__libc_init_array+0x44>)
 8007b0c:	f000 fc8e 	bl	800842c <_init>
 8007b10:	1b64      	subs	r4, r4, r5
 8007b12:	10a4      	asrs	r4, r4, #2
 8007b14:	2600      	movs	r6, #0
 8007b16:	42a6      	cmp	r6, r4
 8007b18:	d105      	bne.n	8007b26 <__libc_init_array+0x2e>
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b20:	4798      	blx	r3
 8007b22:	3601      	adds	r6, #1
 8007b24:	e7ee      	b.n	8007b04 <__libc_init_array+0xc>
 8007b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2a:	4798      	blx	r3
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	e7f2      	b.n	8007b16 <__libc_init_array+0x1e>
 8007b30:	08008574 	.word	0x08008574
 8007b34:	08008574 	.word	0x08008574
 8007b38:	08008574 	.word	0x08008574
 8007b3c:	08008578 	.word	0x08008578

08007b40 <memcpy>:
 8007b40:	440a      	add	r2, r1
 8007b42:	4291      	cmp	r1, r2
 8007b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b48:	d100      	bne.n	8007b4c <memcpy+0xc>
 8007b4a:	4770      	bx	lr
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b56:	4291      	cmp	r1, r2
 8007b58:	d1f9      	bne.n	8007b4e <memcpy+0xe>
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <memset>:
 8007b5c:	4402      	add	r2, r0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d100      	bne.n	8007b66 <memset+0xa>
 8007b64:	4770      	bx	lr
 8007b66:	f803 1b01 	strb.w	r1, [r3], #1
 8007b6a:	e7f9      	b.n	8007b60 <memset+0x4>

08007b6c <siprintf>:
 8007b6c:	b40e      	push	{r1, r2, r3}
 8007b6e:	b500      	push	{lr}
 8007b70:	b09c      	sub	sp, #112	; 0x70
 8007b72:	ab1d      	add	r3, sp, #116	; 0x74
 8007b74:	9002      	str	r0, [sp, #8]
 8007b76:	9006      	str	r0, [sp, #24]
 8007b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b7c:	4809      	ldr	r0, [pc, #36]	; (8007ba4 <siprintf+0x38>)
 8007b7e:	9107      	str	r1, [sp, #28]
 8007b80:	9104      	str	r1, [sp, #16]
 8007b82:	4909      	ldr	r1, [pc, #36]	; (8007ba8 <siprintf+0x3c>)
 8007b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b88:	9105      	str	r1, [sp, #20]
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	a902      	add	r1, sp, #8
 8007b90:	f000 f868 	bl	8007c64 <_svfiprintf_r>
 8007b94:	9b02      	ldr	r3, [sp, #8]
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	b01c      	add	sp, #112	; 0x70
 8007b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ba0:	b003      	add	sp, #12
 8007ba2:	4770      	bx	lr
 8007ba4:	20000014 	.word	0x20000014
 8007ba8:	ffff0208 	.word	0xffff0208

08007bac <__ssputs_r>:
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	688e      	ldr	r6, [r1, #8]
 8007bb2:	429e      	cmp	r6, r3
 8007bb4:	4682      	mov	sl, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	4690      	mov	r8, r2
 8007bba:	461f      	mov	r7, r3
 8007bbc:	d838      	bhi.n	8007c30 <__ssputs_r+0x84>
 8007bbe:	898a      	ldrh	r2, [r1, #12]
 8007bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bc4:	d032      	beq.n	8007c2c <__ssputs_r+0x80>
 8007bc6:	6825      	ldr	r5, [r4, #0]
 8007bc8:	6909      	ldr	r1, [r1, #16]
 8007bca:	eba5 0901 	sub.w	r9, r5, r1
 8007bce:	6965      	ldr	r5, [r4, #20]
 8007bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bd8:	3301      	adds	r3, #1
 8007bda:	444b      	add	r3, r9
 8007bdc:	106d      	asrs	r5, r5, #1
 8007bde:	429d      	cmp	r5, r3
 8007be0:	bf38      	it	cc
 8007be2:	461d      	movcc	r5, r3
 8007be4:	0553      	lsls	r3, r2, #21
 8007be6:	d531      	bpl.n	8007c4c <__ssputs_r+0xa0>
 8007be8:	4629      	mov	r1, r5
 8007bea:	f000 fb55 	bl	8008298 <_malloc_r>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	b950      	cbnz	r0, 8007c08 <__ssputs_r+0x5c>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	f8ca 3000 	str.w	r3, [sl]
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	6921      	ldr	r1, [r4, #16]
 8007c0a:	464a      	mov	r2, r9
 8007c0c:	f7ff ff98 	bl	8007b40 <memcpy>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	6126      	str	r6, [r4, #16]
 8007c1e:	6165      	str	r5, [r4, #20]
 8007c20:	444e      	add	r6, r9
 8007c22:	eba5 0509 	sub.w	r5, r5, r9
 8007c26:	6026      	str	r6, [r4, #0]
 8007c28:	60a5      	str	r5, [r4, #8]
 8007c2a:	463e      	mov	r6, r7
 8007c2c:	42be      	cmp	r6, r7
 8007c2e:	d900      	bls.n	8007c32 <__ssputs_r+0x86>
 8007c30:	463e      	mov	r6, r7
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	4632      	mov	r2, r6
 8007c36:	4641      	mov	r1, r8
 8007c38:	f000 faa8 	bl	800818c <memmove>
 8007c3c:	68a3      	ldr	r3, [r4, #8]
 8007c3e:	1b9b      	subs	r3, r3, r6
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	4433      	add	r3, r6
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e7db      	b.n	8007c04 <__ssputs_r+0x58>
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	f000 fb97 	bl	8008380 <_realloc_r>
 8007c52:	4606      	mov	r6, r0
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1e1      	bne.n	8007c1c <__ssputs_r+0x70>
 8007c58:	6921      	ldr	r1, [r4, #16]
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f000 fab0 	bl	80081c0 <_free_r>
 8007c60:	e7c7      	b.n	8007bf2 <__ssputs_r+0x46>
	...

08007c64 <_svfiprintf_r>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	4698      	mov	r8, r3
 8007c6a:	898b      	ldrh	r3, [r1, #12]
 8007c6c:	061b      	lsls	r3, r3, #24
 8007c6e:	b09d      	sub	sp, #116	; 0x74
 8007c70:	4607      	mov	r7, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	4614      	mov	r4, r2
 8007c76:	d50e      	bpl.n	8007c96 <_svfiprintf_r+0x32>
 8007c78:	690b      	ldr	r3, [r1, #16]
 8007c7a:	b963      	cbnz	r3, 8007c96 <_svfiprintf_r+0x32>
 8007c7c:	2140      	movs	r1, #64	; 0x40
 8007c7e:	f000 fb0b 	bl	8008298 <_malloc_r>
 8007c82:	6028      	str	r0, [r5, #0]
 8007c84:	6128      	str	r0, [r5, #16]
 8007c86:	b920      	cbnz	r0, 8007c92 <_svfiprintf_r+0x2e>
 8007c88:	230c      	movs	r3, #12
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c90:	e0d1      	b.n	8007e36 <_svfiprintf_r+0x1d2>
 8007c92:	2340      	movs	r3, #64	; 0x40
 8007c94:	616b      	str	r3, [r5, #20]
 8007c96:	2300      	movs	r3, #0
 8007c98:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9a:	2320      	movs	r3, #32
 8007c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ca4:	2330      	movs	r3, #48	; 0x30
 8007ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e50 <_svfiprintf_r+0x1ec>
 8007caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cae:	f04f 0901 	mov.w	r9, #1
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	469a      	mov	sl, r3
 8007cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cba:	b10a      	cbz	r2, 8007cc0 <_svfiprintf_r+0x5c>
 8007cbc:	2a25      	cmp	r2, #37	; 0x25
 8007cbe:	d1f9      	bne.n	8007cb4 <_svfiprintf_r+0x50>
 8007cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8007cc4:	d00b      	beq.n	8007cde <_svfiprintf_r+0x7a>
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	4622      	mov	r2, r4
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff ff6d 	bl	8007bac <__ssputs_r>
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	f000 80aa 	beq.w	8007e2c <_svfiprintf_r+0x1c8>
 8007cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cda:	445a      	add	r2, fp
 8007cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cde:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80a2 	beq.w	8007e2c <_svfiprintf_r+0x1c8>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f04f 32ff 	mov.w	r2, #4294967295
 8007cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cf2:	f10a 0a01 	add.w	sl, sl, #1
 8007cf6:	9304      	str	r3, [sp, #16]
 8007cf8:	9307      	str	r3, [sp, #28]
 8007cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8007d00:	4654      	mov	r4, sl
 8007d02:	2205      	movs	r2, #5
 8007d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d08:	4851      	ldr	r0, [pc, #324]	; (8007e50 <_svfiprintf_r+0x1ec>)
 8007d0a:	f7f8 fa61 	bl	80001d0 <memchr>
 8007d0e:	9a04      	ldr	r2, [sp, #16]
 8007d10:	b9d8      	cbnz	r0, 8007d4a <_svfiprintf_r+0xe6>
 8007d12:	06d0      	lsls	r0, r2, #27
 8007d14:	bf44      	itt	mi
 8007d16:	2320      	movmi	r3, #32
 8007d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d1c:	0711      	lsls	r1, r2, #28
 8007d1e:	bf44      	itt	mi
 8007d20:	232b      	movmi	r3, #43	; 0x2b
 8007d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d26:	f89a 3000 	ldrb.w	r3, [sl]
 8007d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d2c:	d015      	beq.n	8007d5a <_svfiprintf_r+0xf6>
 8007d2e:	9a07      	ldr	r2, [sp, #28]
 8007d30:	4654      	mov	r4, sl
 8007d32:	2000      	movs	r0, #0
 8007d34:	f04f 0c0a 	mov.w	ip, #10
 8007d38:	4621      	mov	r1, r4
 8007d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d3e:	3b30      	subs	r3, #48	; 0x30
 8007d40:	2b09      	cmp	r3, #9
 8007d42:	d94e      	bls.n	8007de2 <_svfiprintf_r+0x17e>
 8007d44:	b1b0      	cbz	r0, 8007d74 <_svfiprintf_r+0x110>
 8007d46:	9207      	str	r2, [sp, #28]
 8007d48:	e014      	b.n	8007d74 <_svfiprintf_r+0x110>
 8007d4a:	eba0 0308 	sub.w	r3, r0, r8
 8007d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d52:	4313      	orrs	r3, r2
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	46a2      	mov	sl, r4
 8007d58:	e7d2      	b.n	8007d00 <_svfiprintf_r+0x9c>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	1d19      	adds	r1, r3, #4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	9103      	str	r1, [sp, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfbb      	ittet	lt
 8007d66:	425b      	neglt	r3, r3
 8007d68:	f042 0202 	orrlt.w	r2, r2, #2
 8007d6c:	9307      	strge	r3, [sp, #28]
 8007d6e:	9307      	strlt	r3, [sp, #28]
 8007d70:	bfb8      	it	lt
 8007d72:	9204      	strlt	r2, [sp, #16]
 8007d74:	7823      	ldrb	r3, [r4, #0]
 8007d76:	2b2e      	cmp	r3, #46	; 0x2e
 8007d78:	d10c      	bne.n	8007d94 <_svfiprintf_r+0x130>
 8007d7a:	7863      	ldrb	r3, [r4, #1]
 8007d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d7e:	d135      	bne.n	8007dec <_svfiprintf_r+0x188>
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	1d1a      	adds	r2, r3, #4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	9203      	str	r2, [sp, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bfb8      	it	lt
 8007d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d90:	3402      	adds	r4, #2
 8007d92:	9305      	str	r3, [sp, #20]
 8007d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e60 <_svfiprintf_r+0x1fc>
 8007d98:	7821      	ldrb	r1, [r4, #0]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	f7f8 fa17 	bl	80001d0 <memchr>
 8007da2:	b140      	cbz	r0, 8007db6 <_svfiprintf_r+0x152>
 8007da4:	2340      	movs	r3, #64	; 0x40
 8007da6:	eba0 000a 	sub.w	r0, r0, sl
 8007daa:	fa03 f000 	lsl.w	r0, r3, r0
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	4303      	orrs	r3, r0
 8007db2:	3401      	adds	r4, #1
 8007db4:	9304      	str	r3, [sp, #16]
 8007db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dba:	4826      	ldr	r0, [pc, #152]	; (8007e54 <_svfiprintf_r+0x1f0>)
 8007dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dc0:	2206      	movs	r2, #6
 8007dc2:	f7f8 fa05 	bl	80001d0 <memchr>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d038      	beq.n	8007e3c <_svfiprintf_r+0x1d8>
 8007dca:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <_svfiprintf_r+0x1f4>)
 8007dcc:	bb1b      	cbnz	r3, 8007e16 <_svfiprintf_r+0x1b2>
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	3307      	adds	r3, #7
 8007dd2:	f023 0307 	bic.w	r3, r3, #7
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	9303      	str	r3, [sp, #12]
 8007dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ddc:	4433      	add	r3, r6
 8007dde:	9309      	str	r3, [sp, #36]	; 0x24
 8007de0:	e767      	b.n	8007cb2 <_svfiprintf_r+0x4e>
 8007de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007de6:	460c      	mov	r4, r1
 8007de8:	2001      	movs	r0, #1
 8007dea:	e7a5      	b.n	8007d38 <_svfiprintf_r+0xd4>
 8007dec:	2300      	movs	r3, #0
 8007dee:	3401      	adds	r4, #1
 8007df0:	9305      	str	r3, [sp, #20]
 8007df2:	4619      	mov	r1, r3
 8007df4:	f04f 0c0a 	mov.w	ip, #10
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dfe:	3a30      	subs	r2, #48	; 0x30
 8007e00:	2a09      	cmp	r2, #9
 8007e02:	d903      	bls.n	8007e0c <_svfiprintf_r+0x1a8>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0c5      	beq.n	8007d94 <_svfiprintf_r+0x130>
 8007e08:	9105      	str	r1, [sp, #20]
 8007e0a:	e7c3      	b.n	8007d94 <_svfiprintf_r+0x130>
 8007e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e10:	4604      	mov	r4, r0
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7f0      	b.n	8007df8 <_svfiprintf_r+0x194>
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <_svfiprintf_r+0x1f8>)
 8007e1e:	a904      	add	r1, sp, #16
 8007e20:	4638      	mov	r0, r7
 8007e22:	f3af 8000 	nop.w
 8007e26:	1c42      	adds	r2, r0, #1
 8007e28:	4606      	mov	r6, r0
 8007e2a:	d1d6      	bne.n	8007dda <_svfiprintf_r+0x176>
 8007e2c:	89ab      	ldrh	r3, [r5, #12]
 8007e2e:	065b      	lsls	r3, r3, #25
 8007e30:	f53f af2c 	bmi.w	8007c8c <_svfiprintf_r+0x28>
 8007e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e36:	b01d      	add	sp, #116	; 0x74
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	ab03      	add	r3, sp, #12
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	462a      	mov	r2, r5
 8007e42:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <_svfiprintf_r+0x1f8>)
 8007e44:	a904      	add	r1, sp, #16
 8007e46:	4638      	mov	r0, r7
 8007e48:	f000 f87a 	bl	8007f40 <_printf_i>
 8007e4c:	e7eb      	b.n	8007e26 <_svfiprintf_r+0x1c2>
 8007e4e:	bf00      	nop
 8007e50:	08008538 	.word	0x08008538
 8007e54:	08008542 	.word	0x08008542
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	08007bad 	.word	0x08007bad
 8007e60:	0800853e 	.word	0x0800853e

08007e64 <_printf_common>:
 8007e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	4616      	mov	r6, r2
 8007e6a:	4699      	mov	r9, r3
 8007e6c:	688a      	ldr	r2, [r1, #8]
 8007e6e:	690b      	ldr	r3, [r1, #16]
 8007e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	bfb8      	it	lt
 8007e78:	4613      	movlt	r3, r2
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e80:	4607      	mov	r7, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	b10a      	cbz	r2, 8007e8a <_printf_common+0x26>
 8007e86:	3301      	adds	r3, #1
 8007e88:	6033      	str	r3, [r6, #0]
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	0699      	lsls	r1, r3, #26
 8007e8e:	bf42      	ittt	mi
 8007e90:	6833      	ldrmi	r3, [r6, #0]
 8007e92:	3302      	addmi	r3, #2
 8007e94:	6033      	strmi	r3, [r6, #0]
 8007e96:	6825      	ldr	r5, [r4, #0]
 8007e98:	f015 0506 	ands.w	r5, r5, #6
 8007e9c:	d106      	bne.n	8007eac <_printf_common+0x48>
 8007e9e:	f104 0a19 	add.w	sl, r4, #25
 8007ea2:	68e3      	ldr	r3, [r4, #12]
 8007ea4:	6832      	ldr	r2, [r6, #0]
 8007ea6:	1a9b      	subs	r3, r3, r2
 8007ea8:	42ab      	cmp	r3, r5
 8007eaa:	dc26      	bgt.n	8007efa <_printf_common+0x96>
 8007eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eb0:	1e13      	subs	r3, r2, #0
 8007eb2:	6822      	ldr	r2, [r4, #0]
 8007eb4:	bf18      	it	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	0692      	lsls	r2, r2, #26
 8007eba:	d42b      	bmi.n	8007f14 <_printf_common+0xb0>
 8007ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	47c0      	blx	r8
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d01e      	beq.n	8007f08 <_printf_common+0xa4>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	68e5      	ldr	r5, [r4, #12]
 8007ece:	6832      	ldr	r2, [r6, #0]
 8007ed0:	f003 0306 	and.w	r3, r3, #6
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	bf08      	it	eq
 8007ed8:	1aad      	subeq	r5, r5, r2
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	6922      	ldr	r2, [r4, #16]
 8007ede:	bf0c      	ite	eq
 8007ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee4:	2500      	movne	r5, #0
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	bfc4      	itt	gt
 8007eea:	1a9b      	subgt	r3, r3, r2
 8007eec:	18ed      	addgt	r5, r5, r3
 8007eee:	2600      	movs	r6, #0
 8007ef0:	341a      	adds	r4, #26
 8007ef2:	42b5      	cmp	r5, r6
 8007ef4:	d11a      	bne.n	8007f2c <_printf_common+0xc8>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	e008      	b.n	8007f0c <_printf_common+0xa8>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4652      	mov	r2, sl
 8007efe:	4649      	mov	r1, r9
 8007f00:	4638      	mov	r0, r7
 8007f02:	47c0      	blx	r8
 8007f04:	3001      	adds	r0, #1
 8007f06:	d103      	bne.n	8007f10 <_printf_common+0xac>
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f10:	3501      	adds	r5, #1
 8007f12:	e7c6      	b.n	8007ea2 <_printf_common+0x3e>
 8007f14:	18e1      	adds	r1, r4, r3
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	2030      	movs	r0, #48	; 0x30
 8007f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f1e:	4422      	add	r2, r4
 8007f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f28:	3302      	adds	r3, #2
 8007f2a:	e7c7      	b.n	8007ebc <_printf_common+0x58>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	4622      	mov	r2, r4
 8007f30:	4649      	mov	r1, r9
 8007f32:	4638      	mov	r0, r7
 8007f34:	47c0      	blx	r8
 8007f36:	3001      	adds	r0, #1
 8007f38:	d0e6      	beq.n	8007f08 <_printf_common+0xa4>
 8007f3a:	3601      	adds	r6, #1
 8007f3c:	e7d9      	b.n	8007ef2 <_printf_common+0x8e>
	...

08007f40 <_printf_i>:
 8007f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f44:	7e0f      	ldrb	r7, [r1, #24]
 8007f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f48:	2f78      	cmp	r7, #120	; 0x78
 8007f4a:	4691      	mov	r9, r2
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	469a      	mov	sl, r3
 8007f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f56:	d807      	bhi.n	8007f68 <_printf_i+0x28>
 8007f58:	2f62      	cmp	r7, #98	; 0x62
 8007f5a:	d80a      	bhi.n	8007f72 <_printf_i+0x32>
 8007f5c:	2f00      	cmp	r7, #0
 8007f5e:	f000 80d8 	beq.w	8008112 <_printf_i+0x1d2>
 8007f62:	2f58      	cmp	r7, #88	; 0x58
 8007f64:	f000 80a3 	beq.w	80080ae <_printf_i+0x16e>
 8007f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f70:	e03a      	b.n	8007fe8 <_printf_i+0xa8>
 8007f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f76:	2b15      	cmp	r3, #21
 8007f78:	d8f6      	bhi.n	8007f68 <_printf_i+0x28>
 8007f7a:	a101      	add	r1, pc, #4	; (adr r1, 8007f80 <_printf_i+0x40>)
 8007f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f80:	08007fd9 	.word	0x08007fd9
 8007f84:	08007fed 	.word	0x08007fed
 8007f88:	08007f69 	.word	0x08007f69
 8007f8c:	08007f69 	.word	0x08007f69
 8007f90:	08007f69 	.word	0x08007f69
 8007f94:	08007f69 	.word	0x08007f69
 8007f98:	08007fed 	.word	0x08007fed
 8007f9c:	08007f69 	.word	0x08007f69
 8007fa0:	08007f69 	.word	0x08007f69
 8007fa4:	08007f69 	.word	0x08007f69
 8007fa8:	08007f69 	.word	0x08007f69
 8007fac:	080080f9 	.word	0x080080f9
 8007fb0:	0800801d 	.word	0x0800801d
 8007fb4:	080080db 	.word	0x080080db
 8007fb8:	08007f69 	.word	0x08007f69
 8007fbc:	08007f69 	.word	0x08007f69
 8007fc0:	0800811b 	.word	0x0800811b
 8007fc4:	08007f69 	.word	0x08007f69
 8007fc8:	0800801d 	.word	0x0800801d
 8007fcc:	08007f69 	.word	0x08007f69
 8007fd0:	08007f69 	.word	0x08007f69
 8007fd4:	080080e3 	.word	0x080080e3
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	1d1a      	adds	r2, r3, #4
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	602a      	str	r2, [r5, #0]
 8007fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e0a3      	b.n	8008134 <_printf_i+0x1f4>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	6829      	ldr	r1, [r5, #0]
 8007ff0:	0606      	lsls	r6, r0, #24
 8007ff2:	f101 0304 	add.w	r3, r1, #4
 8007ff6:	d50a      	bpl.n	800800e <_printf_i+0xce>
 8007ff8:	680e      	ldr	r6, [r1, #0]
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	2e00      	cmp	r6, #0
 8007ffe:	da03      	bge.n	8008008 <_printf_i+0xc8>
 8008000:	232d      	movs	r3, #45	; 0x2d
 8008002:	4276      	negs	r6, r6
 8008004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008008:	485e      	ldr	r0, [pc, #376]	; (8008184 <_printf_i+0x244>)
 800800a:	230a      	movs	r3, #10
 800800c:	e019      	b.n	8008042 <_printf_i+0x102>
 800800e:	680e      	ldr	r6, [r1, #0]
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008016:	bf18      	it	ne
 8008018:	b236      	sxthne	r6, r6
 800801a:	e7ef      	b.n	8007ffc <_printf_i+0xbc>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	6820      	ldr	r0, [r4, #0]
 8008020:	1d19      	adds	r1, r3, #4
 8008022:	6029      	str	r1, [r5, #0]
 8008024:	0601      	lsls	r1, r0, #24
 8008026:	d501      	bpl.n	800802c <_printf_i+0xec>
 8008028:	681e      	ldr	r6, [r3, #0]
 800802a:	e002      	b.n	8008032 <_printf_i+0xf2>
 800802c:	0646      	lsls	r6, r0, #25
 800802e:	d5fb      	bpl.n	8008028 <_printf_i+0xe8>
 8008030:	881e      	ldrh	r6, [r3, #0]
 8008032:	4854      	ldr	r0, [pc, #336]	; (8008184 <_printf_i+0x244>)
 8008034:	2f6f      	cmp	r7, #111	; 0x6f
 8008036:	bf0c      	ite	eq
 8008038:	2308      	moveq	r3, #8
 800803a:	230a      	movne	r3, #10
 800803c:	2100      	movs	r1, #0
 800803e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008042:	6865      	ldr	r5, [r4, #4]
 8008044:	60a5      	str	r5, [r4, #8]
 8008046:	2d00      	cmp	r5, #0
 8008048:	bfa2      	ittt	ge
 800804a:	6821      	ldrge	r1, [r4, #0]
 800804c:	f021 0104 	bicge.w	r1, r1, #4
 8008050:	6021      	strge	r1, [r4, #0]
 8008052:	b90e      	cbnz	r6, 8008058 <_printf_i+0x118>
 8008054:	2d00      	cmp	r5, #0
 8008056:	d04d      	beq.n	80080f4 <_printf_i+0x1b4>
 8008058:	4615      	mov	r5, r2
 800805a:	fbb6 f1f3 	udiv	r1, r6, r3
 800805e:	fb03 6711 	mls	r7, r3, r1, r6
 8008062:	5dc7      	ldrb	r7, [r0, r7]
 8008064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008068:	4637      	mov	r7, r6
 800806a:	42bb      	cmp	r3, r7
 800806c:	460e      	mov	r6, r1
 800806e:	d9f4      	bls.n	800805a <_printf_i+0x11a>
 8008070:	2b08      	cmp	r3, #8
 8008072:	d10b      	bne.n	800808c <_printf_i+0x14c>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	07de      	lsls	r6, r3, #31
 8008078:	d508      	bpl.n	800808c <_printf_i+0x14c>
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	6861      	ldr	r1, [r4, #4]
 800807e:	4299      	cmp	r1, r3
 8008080:	bfde      	ittt	le
 8008082:	2330      	movle	r3, #48	; 0x30
 8008084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800808c:	1b52      	subs	r2, r2, r5
 800808e:	6122      	str	r2, [r4, #16]
 8008090:	f8cd a000 	str.w	sl, [sp]
 8008094:	464b      	mov	r3, r9
 8008096:	aa03      	add	r2, sp, #12
 8008098:	4621      	mov	r1, r4
 800809a:	4640      	mov	r0, r8
 800809c:	f7ff fee2 	bl	8007e64 <_printf_common>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d14c      	bne.n	800813e <_printf_i+0x1fe>
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	b004      	add	sp, #16
 80080aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ae:	4835      	ldr	r0, [pc, #212]	; (8008184 <_printf_i+0x244>)
 80080b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80080bc:	6029      	str	r1, [r5, #0]
 80080be:	061d      	lsls	r5, r3, #24
 80080c0:	d514      	bpl.n	80080ec <_printf_i+0x1ac>
 80080c2:	07df      	lsls	r7, r3, #31
 80080c4:	bf44      	itt	mi
 80080c6:	f043 0320 	orrmi.w	r3, r3, #32
 80080ca:	6023      	strmi	r3, [r4, #0]
 80080cc:	b91e      	cbnz	r6, 80080d6 <_printf_i+0x196>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	f023 0320 	bic.w	r3, r3, #32
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	2310      	movs	r3, #16
 80080d8:	e7b0      	b.n	800803c <_printf_i+0xfc>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f043 0320 	orr.w	r3, r3, #32
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	2378      	movs	r3, #120	; 0x78
 80080e4:	4828      	ldr	r0, [pc, #160]	; (8008188 <_printf_i+0x248>)
 80080e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080ea:	e7e3      	b.n	80080b4 <_printf_i+0x174>
 80080ec:	0659      	lsls	r1, r3, #25
 80080ee:	bf48      	it	mi
 80080f0:	b2b6      	uxthmi	r6, r6
 80080f2:	e7e6      	b.n	80080c2 <_printf_i+0x182>
 80080f4:	4615      	mov	r5, r2
 80080f6:	e7bb      	b.n	8008070 <_printf_i+0x130>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	6826      	ldr	r6, [r4, #0]
 80080fc:	6961      	ldr	r1, [r4, #20]
 80080fe:	1d18      	adds	r0, r3, #4
 8008100:	6028      	str	r0, [r5, #0]
 8008102:	0635      	lsls	r5, r6, #24
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	d501      	bpl.n	800810c <_printf_i+0x1cc>
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	e002      	b.n	8008112 <_printf_i+0x1d2>
 800810c:	0670      	lsls	r0, r6, #25
 800810e:	d5fb      	bpl.n	8008108 <_printf_i+0x1c8>
 8008110:	8019      	strh	r1, [r3, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	4615      	mov	r5, r2
 8008118:	e7ba      	b.n	8008090 <_printf_i+0x150>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	1d1a      	adds	r2, r3, #4
 800811e:	602a      	str	r2, [r5, #0]
 8008120:	681d      	ldr	r5, [r3, #0]
 8008122:	6862      	ldr	r2, [r4, #4]
 8008124:	2100      	movs	r1, #0
 8008126:	4628      	mov	r0, r5
 8008128:	f7f8 f852 	bl	80001d0 <memchr>
 800812c:	b108      	cbz	r0, 8008132 <_printf_i+0x1f2>
 800812e:	1b40      	subs	r0, r0, r5
 8008130:	6060      	str	r0, [r4, #4]
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	2300      	movs	r3, #0
 8008138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813c:	e7a8      	b.n	8008090 <_printf_i+0x150>
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	462a      	mov	r2, r5
 8008142:	4649      	mov	r1, r9
 8008144:	4640      	mov	r0, r8
 8008146:	47d0      	blx	sl
 8008148:	3001      	adds	r0, #1
 800814a:	d0ab      	beq.n	80080a4 <_printf_i+0x164>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	079b      	lsls	r3, r3, #30
 8008150:	d413      	bmi.n	800817a <_printf_i+0x23a>
 8008152:	68e0      	ldr	r0, [r4, #12]
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	4298      	cmp	r0, r3
 8008158:	bfb8      	it	lt
 800815a:	4618      	movlt	r0, r3
 800815c:	e7a4      	b.n	80080a8 <_printf_i+0x168>
 800815e:	2301      	movs	r3, #1
 8008160:	4632      	mov	r2, r6
 8008162:	4649      	mov	r1, r9
 8008164:	4640      	mov	r0, r8
 8008166:	47d0      	blx	sl
 8008168:	3001      	adds	r0, #1
 800816a:	d09b      	beq.n	80080a4 <_printf_i+0x164>
 800816c:	3501      	adds	r5, #1
 800816e:	68e3      	ldr	r3, [r4, #12]
 8008170:	9903      	ldr	r1, [sp, #12]
 8008172:	1a5b      	subs	r3, r3, r1
 8008174:	42ab      	cmp	r3, r5
 8008176:	dcf2      	bgt.n	800815e <_printf_i+0x21e>
 8008178:	e7eb      	b.n	8008152 <_printf_i+0x212>
 800817a:	2500      	movs	r5, #0
 800817c:	f104 0619 	add.w	r6, r4, #25
 8008180:	e7f5      	b.n	800816e <_printf_i+0x22e>
 8008182:	bf00      	nop
 8008184:	08008549 	.word	0x08008549
 8008188:	0800855a 	.word	0x0800855a

0800818c <memmove>:
 800818c:	4288      	cmp	r0, r1
 800818e:	b510      	push	{r4, lr}
 8008190:	eb01 0402 	add.w	r4, r1, r2
 8008194:	d902      	bls.n	800819c <memmove+0x10>
 8008196:	4284      	cmp	r4, r0
 8008198:	4623      	mov	r3, r4
 800819a:	d807      	bhi.n	80081ac <memmove+0x20>
 800819c:	1e43      	subs	r3, r0, #1
 800819e:	42a1      	cmp	r1, r4
 80081a0:	d008      	beq.n	80081b4 <memmove+0x28>
 80081a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081aa:	e7f8      	b.n	800819e <memmove+0x12>
 80081ac:	4402      	add	r2, r0
 80081ae:	4601      	mov	r1, r0
 80081b0:	428a      	cmp	r2, r1
 80081b2:	d100      	bne.n	80081b6 <memmove+0x2a>
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081be:	e7f7      	b.n	80081b0 <memmove+0x24>

080081c0 <_free_r>:
 80081c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081c2:	2900      	cmp	r1, #0
 80081c4:	d044      	beq.n	8008250 <_free_r+0x90>
 80081c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ca:	9001      	str	r0, [sp, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f1a1 0404 	sub.w	r4, r1, #4
 80081d2:	bfb8      	it	lt
 80081d4:	18e4      	addlt	r4, r4, r3
 80081d6:	f000 f913 	bl	8008400 <__malloc_lock>
 80081da:	4a1e      	ldr	r2, [pc, #120]	; (8008254 <_free_r+0x94>)
 80081dc:	9801      	ldr	r0, [sp, #4]
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	b933      	cbnz	r3, 80081f0 <_free_r+0x30>
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	6014      	str	r4, [r2, #0]
 80081e6:	b003      	add	sp, #12
 80081e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081ec:	f000 b90e 	b.w	800840c <__malloc_unlock>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d908      	bls.n	8008206 <_free_r+0x46>
 80081f4:	6825      	ldr	r5, [r4, #0]
 80081f6:	1961      	adds	r1, r4, r5
 80081f8:	428b      	cmp	r3, r1
 80081fa:	bf01      	itttt	eq
 80081fc:	6819      	ldreq	r1, [r3, #0]
 80081fe:	685b      	ldreq	r3, [r3, #4]
 8008200:	1949      	addeq	r1, r1, r5
 8008202:	6021      	streq	r1, [r4, #0]
 8008204:	e7ed      	b.n	80081e2 <_free_r+0x22>
 8008206:	461a      	mov	r2, r3
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b10b      	cbz	r3, 8008210 <_free_r+0x50>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d9fa      	bls.n	8008206 <_free_r+0x46>
 8008210:	6811      	ldr	r1, [r2, #0]
 8008212:	1855      	adds	r5, r2, r1
 8008214:	42a5      	cmp	r5, r4
 8008216:	d10b      	bne.n	8008230 <_free_r+0x70>
 8008218:	6824      	ldr	r4, [r4, #0]
 800821a:	4421      	add	r1, r4
 800821c:	1854      	adds	r4, r2, r1
 800821e:	42a3      	cmp	r3, r4
 8008220:	6011      	str	r1, [r2, #0]
 8008222:	d1e0      	bne.n	80081e6 <_free_r+0x26>
 8008224:	681c      	ldr	r4, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	6053      	str	r3, [r2, #4]
 800822a:	4421      	add	r1, r4
 800822c:	6011      	str	r1, [r2, #0]
 800822e:	e7da      	b.n	80081e6 <_free_r+0x26>
 8008230:	d902      	bls.n	8008238 <_free_r+0x78>
 8008232:	230c      	movs	r3, #12
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	e7d6      	b.n	80081e6 <_free_r+0x26>
 8008238:	6825      	ldr	r5, [r4, #0]
 800823a:	1961      	adds	r1, r4, r5
 800823c:	428b      	cmp	r3, r1
 800823e:	bf04      	itt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	bf04      	itt	eq
 8008248:	1949      	addeq	r1, r1, r5
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	6054      	str	r4, [r2, #4]
 800824e:	e7ca      	b.n	80081e6 <_free_r+0x26>
 8008250:	b003      	add	sp, #12
 8008252:	bd30      	pop	{r4, r5, pc}
 8008254:	20001b48 	.word	0x20001b48

08008258 <sbrk_aligned>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4e0e      	ldr	r6, [pc, #56]	; (8008294 <sbrk_aligned+0x3c>)
 800825c:	460c      	mov	r4, r1
 800825e:	6831      	ldr	r1, [r6, #0]
 8008260:	4605      	mov	r5, r0
 8008262:	b911      	cbnz	r1, 800826a <sbrk_aligned+0x12>
 8008264:	f000 f8bc 	bl	80083e0 <_sbrk_r>
 8008268:	6030      	str	r0, [r6, #0]
 800826a:	4621      	mov	r1, r4
 800826c:	4628      	mov	r0, r5
 800826e:	f000 f8b7 	bl	80083e0 <_sbrk_r>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	d00a      	beq.n	800828c <sbrk_aligned+0x34>
 8008276:	1cc4      	adds	r4, r0, #3
 8008278:	f024 0403 	bic.w	r4, r4, #3
 800827c:	42a0      	cmp	r0, r4
 800827e:	d007      	beq.n	8008290 <sbrk_aligned+0x38>
 8008280:	1a21      	subs	r1, r4, r0
 8008282:	4628      	mov	r0, r5
 8008284:	f000 f8ac 	bl	80083e0 <_sbrk_r>
 8008288:	3001      	adds	r0, #1
 800828a:	d101      	bne.n	8008290 <sbrk_aligned+0x38>
 800828c:	f04f 34ff 	mov.w	r4, #4294967295
 8008290:	4620      	mov	r0, r4
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	20001b4c 	.word	0x20001b4c

08008298 <_malloc_r>:
 8008298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829c:	1ccd      	adds	r5, r1, #3
 800829e:	f025 0503 	bic.w	r5, r5, #3
 80082a2:	3508      	adds	r5, #8
 80082a4:	2d0c      	cmp	r5, #12
 80082a6:	bf38      	it	cc
 80082a8:	250c      	movcc	r5, #12
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	4607      	mov	r7, r0
 80082ae:	db01      	blt.n	80082b4 <_malloc_r+0x1c>
 80082b0:	42a9      	cmp	r1, r5
 80082b2:	d905      	bls.n	80082c0 <_malloc_r+0x28>
 80082b4:	230c      	movs	r3, #12
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	2600      	movs	r6, #0
 80082ba:	4630      	mov	r0, r6
 80082bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c0:	4e2e      	ldr	r6, [pc, #184]	; (800837c <_malloc_r+0xe4>)
 80082c2:	f000 f89d 	bl	8008400 <__malloc_lock>
 80082c6:	6833      	ldr	r3, [r6, #0]
 80082c8:	461c      	mov	r4, r3
 80082ca:	bb34      	cbnz	r4, 800831a <_malloc_r+0x82>
 80082cc:	4629      	mov	r1, r5
 80082ce:	4638      	mov	r0, r7
 80082d0:	f7ff ffc2 	bl	8008258 <sbrk_aligned>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	4604      	mov	r4, r0
 80082d8:	d14d      	bne.n	8008376 <_malloc_r+0xde>
 80082da:	6834      	ldr	r4, [r6, #0]
 80082dc:	4626      	mov	r6, r4
 80082de:	2e00      	cmp	r6, #0
 80082e0:	d140      	bne.n	8008364 <_malloc_r+0xcc>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	4631      	mov	r1, r6
 80082e6:	4638      	mov	r0, r7
 80082e8:	eb04 0803 	add.w	r8, r4, r3
 80082ec:	f000 f878 	bl	80083e0 <_sbrk_r>
 80082f0:	4580      	cmp	r8, r0
 80082f2:	d13a      	bne.n	800836a <_malloc_r+0xd2>
 80082f4:	6821      	ldr	r1, [r4, #0]
 80082f6:	3503      	adds	r5, #3
 80082f8:	1a6d      	subs	r5, r5, r1
 80082fa:	f025 0503 	bic.w	r5, r5, #3
 80082fe:	3508      	adds	r5, #8
 8008300:	2d0c      	cmp	r5, #12
 8008302:	bf38      	it	cc
 8008304:	250c      	movcc	r5, #12
 8008306:	4629      	mov	r1, r5
 8008308:	4638      	mov	r0, r7
 800830a:	f7ff ffa5 	bl	8008258 <sbrk_aligned>
 800830e:	3001      	adds	r0, #1
 8008310:	d02b      	beq.n	800836a <_malloc_r+0xd2>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	442b      	add	r3, r5
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	e00e      	b.n	8008338 <_malloc_r+0xa0>
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	1b52      	subs	r2, r2, r5
 800831e:	d41e      	bmi.n	800835e <_malloc_r+0xc6>
 8008320:	2a0b      	cmp	r2, #11
 8008322:	d916      	bls.n	8008352 <_malloc_r+0xba>
 8008324:	1961      	adds	r1, r4, r5
 8008326:	42a3      	cmp	r3, r4
 8008328:	6025      	str	r5, [r4, #0]
 800832a:	bf18      	it	ne
 800832c:	6059      	strne	r1, [r3, #4]
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	bf08      	it	eq
 8008332:	6031      	streq	r1, [r6, #0]
 8008334:	5162      	str	r2, [r4, r5]
 8008336:	604b      	str	r3, [r1, #4]
 8008338:	4638      	mov	r0, r7
 800833a:	f104 060b 	add.w	r6, r4, #11
 800833e:	f000 f865 	bl	800840c <__malloc_unlock>
 8008342:	f026 0607 	bic.w	r6, r6, #7
 8008346:	1d23      	adds	r3, r4, #4
 8008348:	1af2      	subs	r2, r6, r3
 800834a:	d0b6      	beq.n	80082ba <_malloc_r+0x22>
 800834c:	1b9b      	subs	r3, r3, r6
 800834e:	50a3      	str	r3, [r4, r2]
 8008350:	e7b3      	b.n	80082ba <_malloc_r+0x22>
 8008352:	6862      	ldr	r2, [r4, #4]
 8008354:	42a3      	cmp	r3, r4
 8008356:	bf0c      	ite	eq
 8008358:	6032      	streq	r2, [r6, #0]
 800835a:	605a      	strne	r2, [r3, #4]
 800835c:	e7ec      	b.n	8008338 <_malloc_r+0xa0>
 800835e:	4623      	mov	r3, r4
 8008360:	6864      	ldr	r4, [r4, #4]
 8008362:	e7b2      	b.n	80082ca <_malloc_r+0x32>
 8008364:	4634      	mov	r4, r6
 8008366:	6876      	ldr	r6, [r6, #4]
 8008368:	e7b9      	b.n	80082de <_malloc_r+0x46>
 800836a:	230c      	movs	r3, #12
 800836c:	603b      	str	r3, [r7, #0]
 800836e:	4638      	mov	r0, r7
 8008370:	f000 f84c 	bl	800840c <__malloc_unlock>
 8008374:	e7a1      	b.n	80082ba <_malloc_r+0x22>
 8008376:	6025      	str	r5, [r4, #0]
 8008378:	e7de      	b.n	8008338 <_malloc_r+0xa0>
 800837a:	bf00      	nop
 800837c:	20001b48 	.word	0x20001b48

08008380 <_realloc_r>:
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	4680      	mov	r8, r0
 8008386:	4614      	mov	r4, r2
 8008388:	460e      	mov	r6, r1
 800838a:	b921      	cbnz	r1, 8008396 <_realloc_r+0x16>
 800838c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008390:	4611      	mov	r1, r2
 8008392:	f7ff bf81 	b.w	8008298 <_malloc_r>
 8008396:	b92a      	cbnz	r2, 80083a4 <_realloc_r+0x24>
 8008398:	f7ff ff12 	bl	80081c0 <_free_r>
 800839c:	4625      	mov	r5, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a4:	f000 f838 	bl	8008418 <_malloc_usable_size_r>
 80083a8:	4284      	cmp	r4, r0
 80083aa:	4607      	mov	r7, r0
 80083ac:	d802      	bhi.n	80083b4 <_realloc_r+0x34>
 80083ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083b2:	d812      	bhi.n	80083da <_realloc_r+0x5a>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4640      	mov	r0, r8
 80083b8:	f7ff ff6e 	bl	8008298 <_malloc_r>
 80083bc:	4605      	mov	r5, r0
 80083be:	2800      	cmp	r0, #0
 80083c0:	d0ed      	beq.n	800839e <_realloc_r+0x1e>
 80083c2:	42bc      	cmp	r4, r7
 80083c4:	4622      	mov	r2, r4
 80083c6:	4631      	mov	r1, r6
 80083c8:	bf28      	it	cs
 80083ca:	463a      	movcs	r2, r7
 80083cc:	f7ff fbb8 	bl	8007b40 <memcpy>
 80083d0:	4631      	mov	r1, r6
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff fef4 	bl	80081c0 <_free_r>
 80083d8:	e7e1      	b.n	800839e <_realloc_r+0x1e>
 80083da:	4635      	mov	r5, r6
 80083dc:	e7df      	b.n	800839e <_realloc_r+0x1e>
	...

080083e0 <_sbrk_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4d06      	ldr	r5, [pc, #24]	; (80083fc <_sbrk_r+0x1c>)
 80083e4:	2300      	movs	r3, #0
 80083e6:	4604      	mov	r4, r0
 80083e8:	4608      	mov	r0, r1
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	f7f8 fe0a 	bl	8001004 <_sbrk>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_sbrk_r+0x1a>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_sbrk_r+0x1a>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	20001b50 	.word	0x20001b50

08008400 <__malloc_lock>:
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <__malloc_lock+0x8>)
 8008402:	f000 b811 	b.w	8008428 <__retarget_lock_acquire_recursive>
 8008406:	bf00      	nop
 8008408:	20001b54 	.word	0x20001b54

0800840c <__malloc_unlock>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__malloc_unlock+0x8>)
 800840e:	f000 b80c 	b.w	800842a <__retarget_lock_release_recursive>
 8008412:	bf00      	nop
 8008414:	20001b54 	.word	0x20001b54

08008418 <_malloc_usable_size_r>:
 8008418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800841c:	1f18      	subs	r0, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfbc      	itt	lt
 8008422:	580b      	ldrlt	r3, [r1, r0]
 8008424:	18c0      	addlt	r0, r0, r3
 8008426:	4770      	bx	lr

08008428 <__retarget_lock_acquire_recursive>:
 8008428:	4770      	bx	lr

0800842a <__retarget_lock_release_recursive>:
 800842a:	4770      	bx	lr

0800842c <_init>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	bf00      	nop
 8008430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008432:	bc08      	pop	{r3}
 8008434:	469e      	mov	lr, r3
 8008436:	4770      	bx	lr

08008438 <_fini>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr
